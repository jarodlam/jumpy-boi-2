
example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000968  000009fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000968  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000a04  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000a58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c18  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd6  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b2d  00000000  00000000  00003586  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  000060b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000908  00000000  00000000  00006300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f33  00000000  00000000  00006c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00008b3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	79 c1       	rjmp	.+754    	; 0x2f4 <__ctors_end>
   2:	00 00       	nop
   4:	92 c1       	rjmp	.+804    	; 0x32a <__bad_interrupt>
   6:	00 00       	nop
   8:	90 c1       	rjmp	.+800    	; 0x32a <__bad_interrupt>
   a:	00 00       	nop
   c:	8e c1       	rjmp	.+796    	; 0x32a <__bad_interrupt>
   e:	00 00       	nop
  10:	8c c1       	rjmp	.+792    	; 0x32a <__bad_interrupt>
  12:	00 00       	nop
  14:	8a c1       	rjmp	.+788    	; 0x32a <__bad_interrupt>
  16:	00 00       	nop
  18:	88 c1       	rjmp	.+784    	; 0x32a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	86 c1       	rjmp	.+780    	; 0x32a <__bad_interrupt>
  1e:	00 00       	nop
  20:	84 c1       	rjmp	.+776    	; 0x32a <__bad_interrupt>
  22:	00 00       	nop
  24:	82 c1       	rjmp	.+772    	; 0x32a <__bad_interrupt>
  26:	00 00       	nop
  28:	19 c3       	rjmp	.+1586   	; 0x65c <__vector_10>
  2a:	00 00       	nop
  2c:	4f c3       	rjmp	.+1694   	; 0x6cc <__vector_11>
  2e:	00 00       	nop
  30:	7c c1       	rjmp	.+760    	; 0x32a <__bad_interrupt>
  32:	00 00       	nop
  34:	7a c1       	rjmp	.+756    	; 0x32a <__bad_interrupt>
  36:	00 00       	nop
  38:	78 c1       	rjmp	.+752    	; 0x32a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	76 c1       	rjmp	.+748    	; 0x32a <__bad_interrupt>
  3e:	00 00       	nop
  40:	74 c1       	rjmp	.+744    	; 0x32a <__bad_interrupt>
  42:	00 00       	nop
  44:	72 c1       	rjmp	.+740    	; 0x32a <__bad_interrupt>
  46:	00 00       	nop
  48:	70 c1       	rjmp	.+736    	; 0x32a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6e c1       	rjmp	.+732    	; 0x32a <__bad_interrupt>
  4e:	00 00       	nop
  50:	6c c1       	rjmp	.+728    	; 0x32a <__bad_interrupt>
  52:	00 00       	nop
  54:	6a c1       	rjmp	.+724    	; 0x32a <__bad_interrupt>
  56:	00 00       	nop
  58:	68 c1       	rjmp	.+720    	; 0x32a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	66 c1       	rjmp	.+716    	; 0x32a <__bad_interrupt>
  5e:	00 00       	nop
  60:	64 c1       	rjmp	.+712    	; 0x32a <__bad_interrupt>
  62:	00 00       	nop
  64:	62 c1       	rjmp	.+708    	; 0x32a <__bad_interrupt>
  66:	00 00       	nop
  68:	60 c1       	rjmp	.+704    	; 0x32a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5e c1       	rjmp	.+700    	; 0x32a <__bad_interrupt>
  6e:	00 00       	nop
  70:	5c c1       	rjmp	.+696    	; 0x32a <__bad_interrupt>
  72:	00 00       	nop
  74:	5a c1       	rjmp	.+692    	; 0x32a <__bad_interrupt>
  76:	00 00       	nop
  78:	58 c1       	rjmp	.+688    	; 0x32a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	56 c1       	rjmp	.+684    	; 0x32a <__bad_interrupt>
  7e:	00 00       	nop
  80:	54 c1       	rjmp	.+680    	; 0x32a <__bad_interrupt>
  82:	00 00       	nop
  84:	52 c1       	rjmp	.+676    	; 0x32a <__bad_interrupt>
  86:	00 00       	nop
  88:	50 c1       	rjmp	.+672    	; 0x32a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4e c1       	rjmp	.+668    	; 0x32a <__bad_interrupt>
  8e:	00 00       	nop
  90:	4c c1       	rjmp	.+664    	; 0x32a <__bad_interrupt>
  92:	00 00       	nop
  94:	4a c1       	rjmp	.+660    	; 0x32a <__bad_interrupt>
  96:	00 00       	nop
  98:	48 c1       	rjmp	.+656    	; 0x32a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	46 c1       	rjmp	.+652    	; 0x32a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	44 c1       	rjmp	.+648    	; 0x32a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	42 c1       	rjmp	.+644    	; 0x32a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	40 c1       	rjmp	.+640    	; 0x32a <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__trampolines_end>:
  ac:	22 2c       	mov	r2, r2
  ae:	20 6d       	ori	r18, 0xD0	; 208
  b0:	75 73       	andi	r23, 0x35	; 53
  b2:	74 20       	and	r7, r4
  b4:	62 65       	ori	r22, 0x52	; 82
  b6:	20 3f       	cpi	r18, 0xF0	; 240
  b8:	20 6f       	ori	r18, 0xF0	; 240
  ba:	72 20       	and	r7, r2
  bc:	3d 0d       	add	r19, r13
  be:	0a 00       	.word	0x000a	; ????

000000c0 <__c.1930>:
  c0:	55 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 20     Unknown command 
  d0:	22 00                                               ".

000000d2 <__c.1928>:
  d2:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 6f 72 20     ", must be 0 or 
  e2:	31 0d 0a 00                                         1...

000000e6 <__c.1926>:
  e6:	55 6e 6b 6e 6f 77 6e 20 76 61 6c 75 65 20 22 00     Unknown value ".

000000f6 <__c.1924>:
  f6:	0d 0a 00                                            ...

000000f9 <__c.1922>:
  f9:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 74 6f 20     ", must be 0 to 
 109:	37 0d 0a 00                                         7...

0000010d <__c.1920>:
 10d:	55 6e 6b 6e 6f 77 6e 20 70 69 6e 20 22 00           Unknown pin ".

0000011b <__c.1918>:
 11b:	22 2c 20 6d 75 73 74 20 62 65 20 41 20 2d 20 46     ", must be A - F
 12b:	0d 0a 00                                            ...

0000012e <__c.1916>:
 12e:	55 6e 6b 6e 6f 77 6e 20 70 6f 72 74 20 22 00        Unknown port ".

0000013d <__c.1914>:
 13d:	75 6e 72 65 63 6f 67 6e 69 7a 65 64 20 66 6f 72     unrecognized for
 14d:	6d 61 74 2c 20 33 20 63 68 61 72 73 20 6d 69 6e     mat, 3 chars min
 15d:	20 72 65 71 27 64 0d 0a 00                           req'd...

00000166 <__c.1885>:
 166:	0d 0a 00                                            ...

00000169 <__c.1882>:
 169:	3e 20 00                                            > .

0000016c <__c.1880>:
 16c:	0d 0a 54 65 65 6e 73 79 20 55 53 42 20 53 65 72     ..Teensy USB Ser
 17c:	69 61 6c 20 45 78 61 6d 70 6c 65 2c 20 53 69 6d     ial Example, Sim
 18c:	70 6c 65 20 50 69 6e 20 43 6f 6e 74 72 6f 6c 20     ple Pin Control 
 19c:	53 68 65 6c 6c 0d 0a 0d 0a 45 78 61 6d 70 6c 65     Shell....Example
 1ac:	20 43 6f 6d 6d 61 6e 64 73 0d 0a 20 20 42 30 3f      Commands..  B0?
 1bc:	20 20 20 52 65 61 64 20 50 6f 72 74 20 42 2c 20        Read Port B, 
 1cc:	70 69 6e 20 30 0d 0a 20 20 43 32 3d 30 20 20 57     pin 0..  C2=0  W
 1dc:	72 69 74 65 20 50 6f 72 74 20 43 2c 20 70 69 6e     rite Port C, pin
 1ec:	20 31 20 4c 4f 57 0d 0a 20 20 44 36 3d 31 20 20      1 LOW..  D6=1  
 1fc:	57 72 69 74 65 20 50 6f 72 74 20 44 2c 20 70 69     Write Port D, pi
 20c:	6e 20 36 20 48 49 47 48 20 20 28 44 36 20 69 73     n 6 HIGH  (D6 is
 21c:	20 4c 45 44 20 70 69 6e 29 0d 0a 0d 0a 00            LED pin).....

0000022a <descriptor_list>:
 22a:	00 01 00 00 d7 02 12 00 02 00 00 94 02 43 00 03     .............C..
 23a:	00 00 90 02 04 01 03 09 04 7a 02 14 02 03 09 04     .........z......
 24a:	62 02 16 03 03 09 04 54 02 0c                       b......T..

00000254 <string3>:
 254:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

00000262 <string2>:
 262:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
 272:	69 00 61 00 6c 00 00 00                             i.a.l...

0000027a <string1>:
 27a:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 28a:	6d 00 65 00 00 00                                   m.e...

00000290 <string0>:
 290:	04 03 09 04                                         ....

00000294 <config1_descriptor>:
 294:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 2a4:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 2b4:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 2c4:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 2d4:	40 00 00                                            @..

000002d7 <device_descriptor>:
 2d7:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 2e7:	03 01                                               ..

000002e9 <endpoint_config_table>:
 2e9:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000002f4 <__ctors_end>:
 2f4:	11 24       	eor	r1, r1
 2f6:	1f be       	out	0x3f, r1	; 63
 2f8:	cf ef       	ldi	r28, 0xFF	; 255
 2fa:	da e0       	ldi	r29, 0x0A	; 10
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	cd bf       	out	0x3d, r28	; 61

00000300 <__do_copy_data>:
 300:	11 e0       	ldi	r17, 0x01	; 1
 302:	a0 e0       	ldi	r26, 0x00	; 0
 304:	b1 e0       	ldi	r27, 0x01	; 1
 306:	e8 e6       	ldi	r30, 0x68	; 104
 308:	f9 e0       	ldi	r31, 0x09	; 9
 30a:	02 c0       	rjmp	.+4      	; 0x310 <__do_copy_data+0x10>
 30c:	05 90       	lpm	r0, Z+
 30e:	0d 92       	st	X+, r0
 310:	a8 30       	cpi	r26, 0x08	; 8
 312:	b1 07       	cpc	r27, r17
 314:	d9 f7       	brne	.-10     	; 0x30c <__do_copy_data+0xc>

00000316 <__do_clear_bss>:
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	a8 e0       	ldi	r26, 0x08	; 8
 31a:	b1 e0       	ldi	r27, 0x01	; 1
 31c:	01 c0       	rjmp	.+2      	; 0x320 <.do_clear_bss_start>

0000031e <.do_clear_bss_loop>:
 31e:	1d 92       	st	X+, r1

00000320 <.do_clear_bss_start>:
 320:	ac 30       	cpi	r26, 0x0C	; 12
 322:	b2 07       	cpc	r27, r18
 324:	e1 f7       	brne	.-8      	; 0x31e <.do_clear_bss_loop>
 326:	cb d0       	rcall	.+406    	; 0x4be <main>
 328:	1d c3       	rjmp	.+1594   	; 0x964 <_exit>

0000032a <__bad_interrupt>:
 32a:	6a ce       	rjmp	.-812    	; 0x0 <__vectors>

0000032c <send_str>:

// Send a string to the USB serial port.  The string must be in
// flash memory, using PSTR
//
void send_str(const char *s)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ec 01       	movw	r28, r24
	char c;
	while (1) {
		c = pgm_read_byte(s++);
 332:	fe 01       	movw	r30, r28
 334:	84 91       	lpm	r24, Z
		if (!c) break;
 336:	21 96       	adiw	r28, 0x01	; 1
 338:	88 23       	and	r24, r24
 33a:	11 f0       	breq	.+4      	; 0x340 <send_str+0x14>
		usb_serial_putchar(c);
 33c:	4c d1       	rcall	.+664    	; 0x5d6 <usb_serial_putchar>
		c = pgm_read_byte(s++);
 33e:	f9 cf       	rjmp	.-14     	; 0x332 <send_str+0x6>
	}
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <recv_str>:
// stored into the buffer.
// The return value is the number of characters received, or 255 if
// the virtual serial connection was closed while waiting.
//
uint8_t recv_str(char *buf, uint8_t size)
{
 346:	ef 92       	push	r14
 348:	ff 92       	push	r15
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	08 2f       	mov	r16, r24
 354:	f9 2e       	mov	r15, r25
 356:	e6 2e       	mov	r14, r22
	int16_t r;
	uint8_t count=0;
 358:	10 e0       	ldi	r17, 0x00	; 0

	while (count < size) {
 35a:	1e 15       	cp	r17, r14
 35c:	e0 f4       	brcc	.+56     	; 0x396 <recv_str+0x50>
		r = usb_serial_getchar();
 35e:	05 d1       	rcall	.+522    	; 0x56a <usb_serial_getchar>
		if (r != -1) {
 360:	8f 3f       	cpi	r24, 0xFF	; 255
 362:	98 07       	cpc	r25, r24
 364:	a1 f0       	breq	.+40     	; 0x38e <recv_str+0x48>
			if (r == '\r' || r == '\n') return count;
 366:	8d 30       	cpi	r24, 0x0D	; 13
 368:	91 05       	cpc	r25, r1
 36a:	a9 f0       	breq	.+42     	; 0x396 <recv_str+0x50>
 36c:	8a 30       	cpi	r24, 0x0A	; 10
 36e:	91 05       	cpc	r25, r1
 370:	91 f0       	breq	.+36     	; 0x396 <recv_str+0x50>
			if (r >= ' ' && r <= '~') {
 372:	9c 01       	movw	r18, r24
 374:	20 52       	subi	r18, 0x20	; 32
 376:	31 09       	sbc	r19, r1
 378:	2f 35       	cpi	r18, 0x5F	; 95
 37a:	31 05       	cpc	r19, r1
 37c:	70 f7       	brcc	.-36     	; 0x35a <recv_str+0x14>
				*buf++ = r;
 37e:	c0 2f       	mov	r28, r16
 380:	df 2d       	mov	r29, r15
				usb_serial_putchar(r);
 382:	89 93       	st	Y+, r24
 384:	28 d1       	rcall	.+592    	; 0x5d6 <usb_serial_putchar>
				count++;
 386:	1f 5f       	subi	r17, 0xFF	; 255
				*buf++ = r;
 388:	0c 2f       	mov	r16, r28
 38a:	fd 2e       	mov	r15, r29
			}
		} else {
			if (!usb_configured() ||
 38c:	e6 cf       	rjmp	.-52     	; 0x35a <recv_str+0x14>
 38e:	ea d0       	rcall	.+468    	; 0x564 <usb_configured>
 390:	81 11       	cpse	r24, r1
 392:	09 c0       	rjmp	.+18     	; 0x3a6 <recv_str+0x60>
			  !(usb_serial_get_control() & USB_SERIAL_DTR)) {
				// user no longer connected
				return 255;
 394:	1f ef       	ldi	r17, 0xFF	; 255
			}
			// just a normal timeout, keep waiting
		}
	}
	return count;
}
 396:	81 2f       	mov	r24, r17
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
			  !(usb_serial_get_control() & USB_SERIAL_DTR)) {
 3a4:	08 95       	ret
 3a6:	57 d1       	rcall	.+686    	; 0x656 <usb_serial_get_control>
			if (!usb_configured() ||
 3a8:	80 fd       	sbrc	r24, 0
 3aa:	d7 cf       	rjmp	.-82     	; 0x35a <recv_str+0x14>
 3ac:	f3 cf       	rjmp	.-26     	; 0x394 <recv_str+0x4e>

000003ae <parse_and_execute_command>:

// parse a user command and execute it, or print an error message
//
void parse_and_execute_command(const char *buf, uint8_t num)
{
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	ec 01       	movw	r28, r24
	uint8_t port, pin, val;

	if (num < 3) {
		send_str(PSTR("unrecognized format, 3 chars min req'd\r\n"));
 3b4:	8d e3       	ldi	r24, 0x3D	; 61
 3b6:	91 e0       	ldi	r25, 0x01	; 1
	if (num < 3) {
 3b8:	63 30       	cpi	r22, 0x03	; 3
 3ba:	80 f0       	brcs	.+32     	; 0x3dc <parse_and_execute_command+0x2e>
		return;
	}
	// first character is the port letter
	if (buf[0] >= 'A' && buf[0] <= 'F') {
 3bc:	88 81       	ld	r24, Y
 3be:	ef eb       	ldi	r30, 0xBF	; 191
 3c0:	e8 0f       	add	r30, r24
 3c2:	e6 30       	cpi	r30, 0x06	; 6
 3c4:	70 f0       	brcs	.+28     	; 0x3e2 <parse_and_execute_command+0x34>
		port = buf[0] - 'A';
	} else if (buf[0] >= 'a' && buf[0] <= 'f') {
 3c6:	ef e9       	ldi	r30, 0x9F	; 159
 3c8:	e8 0f       	add	r30, r24
 3ca:	e6 30       	cpi	r30, 0x06	; 6
 3cc:	50 f0       	brcs	.+20     	; 0x3e2 <parse_and_execute_command+0x34>
		port = buf[0] - 'a';
	} else {
		send_str(PSTR("Unknown port \""));
 3ce:	8e e2       	ldi	r24, 0x2E	; 46
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	ac df       	rcall	.-168    	; 0x32c <send_str>
		usb_serial_putchar(buf[0]);
 3d4:	88 81       	ld	r24, Y
 3d6:	ff d0       	rcall	.+510    	; 0x5d6 <usb_serial_putchar>
		send_str(PSTR("\", must be A - F\r\n"));
 3d8:	8b e1       	ldi	r24, 0x1B	; 27
 3da:	91 e0       	ldi	r25, 0x01	; 1
	}
	// otherwise, error message
	send_str(PSTR("Unknown command \""));
	usb_serial_putchar(buf[0]);
	send_str(PSTR("\", must be ? or =\r\n"));
}
 3dc:	df 91       	pop	r29
	send_str(PSTR("\", must be ? or =\r\n"));
 3de:	cf 91       	pop	r28
 3e0:	a5 cf       	rjmp	.-182    	; 0x32c <send_str>
	if (buf[1] >= '0' && buf[1] <= '7') {
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	80 53       	subi	r24, 0x30	; 48
 3e6:	88 30       	cpi	r24, 0x08	; 8
 3e8:	e8 f4       	brcc	.+58     	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
	if (buf[2] == '?') {
 3ea:	9a 81       	ldd	r25, Y+2	; 0x02
 3ec:	9f 33       	cpi	r25, 0x3F	; 63
 3ee:	21 f5       	brne	.+72     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
		*(uint8_t *)(0x21 + port * 3) &= ~(1 << pin);
 3f0:	43 e0       	ldi	r20, 0x03	; 3
 3f2:	e4 9f       	mul	r30, r20
 3f4:	f0 01       	movw	r30, r0
 3f6:	11 24       	eor	r1, r1
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	a9 01       	movw	r20, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
 400:	44 0f       	add	r20, r20
 402:	55 1f       	adc	r21, r21
 404:	8a 95       	dec	r24
 406:	e2 f7       	brpl	.-8      	; 0x400 <__FUSE_REGION_LENGTH__>
 408:	ca 01       	movw	r24, r20
 40a:	24 2f       	mov	r18, r20
 40c:	20 95       	com	r18
 40e:	91 a1       	ldd	r25, Z+33	; 0x21
 410:	92 23       	and	r25, r18
 412:	91 a3       	std	Z+33, r25	; 0x21
		val = *(uint8_t *)(0x20 + port * 3) & (1 << pin);
 414:	90 a1       	ldd	r25, Z+32	; 0x20
		usb_serial_putchar(val ? '1' : '0');
 416:	89 23       	and	r24, r25
 418:	69 f4       	brne	.+26     	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
 41a:	80 e3       	ldi	r24, 0x30	; 48
 41c:	dc d0       	rcall	.+440    	; 0x5d6 <usb_serial_putchar>
		send_str(PSTR("\r\n"));
 41e:	86 ef       	ldi	r24, 0xF6	; 246
 420:	90 e0       	ldi	r25, 0x00	; 0
		send_str(PSTR("Unknown pin \""));
 422:	dc cf       	rjmp	.-72     	; 0x3dc <parse_and_execute_command+0x2e>
 424:	8d e0       	ldi	r24, 0x0D	; 13
 426:	91 e0       	ldi	r25, 0x01	; 1
		usb_serial_putchar(buf[0]);
 428:	81 df       	rcall	.-254    	; 0x32c <send_str>
 42a:	88 81       	ld	r24, Y
 42c:	d4 d0       	rcall	.+424    	; 0x5d6 <usb_serial_putchar>
		send_str(PSTR("\", must be 0 to 7\r\n"));
 42e:	89 ef       	ldi	r24, 0xF9	; 249
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	d4 cf       	rjmp	.-88     	; 0x3dc <parse_and_execute_command+0x2e>
		usb_serial_putchar(val ? '1' : '0');
 434:	81 e3       	ldi	r24, 0x31	; 49
 436:	f2 cf       	rjmp	.-28     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
	if (num >= 4 && buf[2] == '=') {
 438:	63 30       	cpi	r22, 0x03	; 3
 43a:	c9 f1       	breq	.+114    	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
 43c:	9d 33       	cpi	r25, 0x3D	; 61
 43e:	b9 f5       	brne	.+110    	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
		if (buf[3] == '0') {
 440:	9b 81       	ldd	r25, Y+3	; 0x03
 442:	90 33       	cpi	r25, 0x30	; 48
 444:	b9 f4       	brne	.+46     	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
			*(uint8_t *)(0x21 + port * 3) |= (1 << pin);
 446:	53 e0       	ldi	r21, 0x03	; 3
 448:	e5 9f       	mul	r30, r21
 44a:	f0 01       	movw	r30, r0
 44c:	11 24       	eor	r1, r1
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	a9 01       	movw	r20, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
 456:	44 0f       	add	r20, r20
 458:	55 1f       	adc	r21, r21
 45a:	8a 95       	dec	r24
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
 45e:	ca 01       	movw	r24, r20
 460:	91 a1       	ldd	r25, Z+33	; 0x21
 462:	98 2b       	or	r25, r24
 464:	91 a3       	std	Z+33, r25	; 0x21
			*(uint8_t *)(0x22 + port * 3) &= ~(1 << pin);
 466:	80 95       	com	r24
 468:	92 a1       	ldd	r25, Z+34	; 0x22
 46a:	89 23       	and	r24, r25
			*(uint8_t *)(0x22 + port * 3) |= (1 << pin);
 46c:	82 a3       	std	Z+34, r24	; 0x22
}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret
		} else if (buf[3] == '1') {
 474:	91 33       	cpi	r25, 0x31	; 49
 476:	99 f4       	brne	.+38     	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
			*(uint8_t *)(0x21 + port * 3) |= (1 << pin);
 478:	53 e0       	ldi	r21, 0x03	; 3
 47a:	e5 9f       	mul	r30, r21
 47c:	f0 01       	movw	r30, r0
 47e:	11 24       	eor	r1, r1
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	a9 01       	movw	r20, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
 488:	44 0f       	add	r20, r20
 48a:	55 1f       	adc	r21, r21
 48c:	8a 95       	dec	r24
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
 490:	ca 01       	movw	r24, r20
 492:	91 a1       	ldd	r25, Z+33	; 0x21
 494:	98 2b       	or	r25, r24
			*(uint8_t *)(0x22 + port * 3) |= (1 << pin);
 496:	91 a3       	std	Z+33, r25	; 0x21
 498:	92 a1       	ldd	r25, Z+34	; 0x22
			send_str(PSTR("Unknown value \""));
 49a:	89 2b       	or	r24, r25
 49c:	e7 cf       	rjmp	.-50     	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
 49e:	86 ee       	ldi	r24, 0xE6	; 230
 4a0:	90 e0       	ldi	r25, 0x00	; 0
			usb_serial_putchar(buf[3]);
 4a2:	44 df       	rcall	.-376    	; 0x32c <send_str>
 4a4:	8b 81       	ldd	r24, Y+3	; 0x03
			send_str(PSTR("\", must be 0 or 1\r\n"));
 4a6:	97 d0       	rcall	.+302    	; 0x5d6 <usb_serial_putchar>
 4a8:	82 ed       	ldi	r24, 0xD2	; 210
 4aa:	90 e0       	ldi	r25, 0x00	; 0
	send_str(PSTR("Unknown command \""));
 4ac:	97 cf       	rjmp	.-210    	; 0x3dc <parse_and_execute_command+0x2e>
 4ae:	80 ec       	ldi	r24, 0xC0	; 192
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	3c df       	rcall	.-392    	; 0x32c <send_str>
	usb_serial_putchar(buf[0]);
 4b4:	88 81       	ld	r24, Y
 4b6:	8f d0       	rcall	.+286    	; 0x5d6 <usb_serial_putchar>
 4b8:	8c ea       	ldi	r24, 0xAC	; 172
	send_str(PSTR("\", must be ? or =\r\n"));
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	8f cf       	rjmp	.-226    	; 0x3dc <parse_and_execute_command+0x2e>

000004be <main>:
 4be:	cd b7       	in	r28, 0x3d	; 61
{
 4c0:	de b7       	in	r29, 0x3e	; 62
 4c2:	a0 97       	sbiw	r28, 0x20	; 32
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
	CPU_PRESCALE(0);
 4ce:	80 e8       	ldi	r24, 0x80	; 128
 4d0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 4d4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	LED_CONFIG;
 4d8:	56 9a       	sbi	0x0a, 6	; 10
	LED_ON;
 4da:	5e 9a       	sbi	0x0b, 6	; 11
	usb_init();
 4dc:	2a d0       	rcall	.+84     	; 0x532 <usb_init>
	while (!usb_configured()) /* wait */ ;
 4de:	42 d0       	rcall	.+132    	; 0x564 <usb_configured>
 4e0:	88 23       	and	r24, r24
 4e2:	e9 f3       	breq	.-6      	; 0x4de <main+0x20>
 4e4:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e6:	83 ed       	ldi	r24, 0xD3	; 211
 4e8:	90 e3       	ldi	r25, 0x30	; 48
 4ea:	21 50       	subi	r18, 0x01	; 1
 4ec:	80 40       	sbci	r24, 0x00	; 0
 4ee:	90 40       	sbci	r25, 0x00	; 0
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <main+0x2c>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <main+0x36>
 4f4:	00 00       	nop
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
 4f6:	af d0       	rcall	.+350    	; 0x656 <usb_serial_get_control>
 4f8:	80 ff       	sbrs	r24, 0
 4fa:	fd cf       	rjmp	.-6      	; 0x4f6 <main+0x38>
		usb_serial_flush_input();
 4fc:	59 d0       	rcall	.+178    	; 0x5b0 <usb_serial_flush_input>
		send_str(PSTR("\r\nTeensy USB Serial Example, "
 4fe:	8c e6       	ldi	r24, 0x6C	; 108
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	14 df       	rcall	.-472    	; 0x32c <send_str>
			send_str(PSTR("> "));
 504:	89 e6       	ldi	r24, 0x69	; 105
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	11 df       	rcall	.-478    	; 0x32c <send_str>
			n = recv_str(buf, sizeof(buf));
 50a:	60 e2       	ldi	r22, 0x20	; 32
 50c:	ce 01       	movw	r24, r28
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	1a df       	rcall	.-460    	; 0x346 <recv_str>
 512:	18 2f       	mov	r17, r24
			if (n == 255) break;
 514:	8f 3f       	cpi	r24, 0xFF	; 255
			send_str(PSTR("\r\n"));
 516:	79 f3       	breq	.-34     	; 0x4f6 <main+0x38>
 518:	86 e6       	ldi	r24, 0x66	; 102
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	07 df       	rcall	.-498    	; 0x32c <send_str>
			parse_and_execute_command(buf, n);
 51e:	61 2f       	mov	r22, r17
 520:	ce 01       	movw	r24, r28
 522:	01 96       	adiw	r24, 0x01	; 1
 524:	44 df       	rcall	.-376    	; 0x3ae <parse_and_execute_command>
 526:	ee cf       	rjmp	.-36     	; 0x504 <main+0x46>

00000528 <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 528:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 52c:	80 ff       	sbrs	r24, 0
 52e:	fc cf       	rjmp	.-8      	; 0x528 <usb_wait_in_ready>
}
 530:	08 95       	ret

00000532 <usb_init>:
	HW_CONFIG();
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
        USB_FREEZE();				// enable USB
 538:	80 ea       	ldi	r24, 0xA0	; 160
 53a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
        PLL_CONFIG();				// config PLL, 16 MHz xtal
 53e:	82 e1       	ldi	r24, 0x12	; 18
 540:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 542:	09 b4       	in	r0, 0x29	; 41
 544:	00 fe       	sbrs	r0, 0
 546:	fd cf       	rjmp	.-6      	; 0x542 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 548:	80 e9       	ldi	r24, 0x90	; 144
 54a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
        UDCON = 0;				// enable attach resistor
 54e:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	usb_configuration = 0;
 552:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
	cdc_line_rtsdtr = 0;
 556:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 55a:	8c e0       	ldi	r24, 0x0C	; 12
 55c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	sei();
 560:	78 94       	sei
}
 562:	08 95       	ret

00000564 <usb_configured>:
	return usb_configuration;
 564:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
}
 568:	08 95       	ret

0000056a <usb_serial_getchar>:
	intr_state = SREG;
 56a:	9f b7       	in	r25, 0x3f	; 63
	cli();
 56c:	f8 94       	cli
	if (!usb_configuration) {
 56e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 572:	81 11       	cpse	r24, r1
 574:	04 c0       	rjmp	.+8      	; 0x57e <usb_serial_getchar+0x14>
		SREG = intr_state;
 576:	9f bf       	out	0x3f, r25	; 63
		return -1;
 578:	8f ef       	ldi	r24, 0xFF	; 255
 57a:	9f ef       	ldi	r25, 0xFF	; 255
 57c:	08 95       	ret
	UENUM = CDC_RX_ENDPOINT;
 57e:	83 e0       	ldi	r24, 0x03	; 3
 580:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UEINTX = 0x6B;
 584:	2b e6       	ldi	r18, 0x6B	; 107
	c = UEINTX;
 586:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(c & (1<<RWAL))) {
 58a:	85 fd       	sbrc	r24, 5
 58c:	05 c0       	rjmp	.+10     	; 0x598 <usb_serial_getchar+0x2e>
		if (c & (1<<RXOUTI)) {
 58e:	82 ff       	sbrs	r24, 2
 590:	f2 cf       	rjmp	.-28     	; 0x576 <usb_serial_getchar+0xc>
			UEINTX = 0x6B;
 592:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			goto retry;
 596:	f7 cf       	rjmp	.-18     	; 0x586 <usb_serial_getchar+0x1c>
	c = UEDATX;
 598:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
 59c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5a0:	25 fd       	sbrc	r18, 5
 5a2:	03 c0       	rjmp	.+6      	; 0x5aa <usb_serial_getchar+0x40>
 5a4:	2b e6       	ldi	r18, 0x6B	; 107
 5a6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	SREG = intr_state;
 5aa:	9f bf       	out	0x3f, r25	; 63
	return c;
 5ac:	90 e0       	ldi	r25, 0x00	; 0
}
 5ae:	08 95       	ret

000005b0 <usb_serial_flush_input>:
	if (usb_configuration) {
 5b0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 5b4:	88 23       	and	r24, r24
 5b6:	59 f0       	breq	.+22     	; 0x5ce <usb_serial_flush_input+0x1e>
		intr_state = SREG;
 5b8:	8f b7       	in	r24, 0x3f	; 63
		cli();
 5ba:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
 5bc:	93 e0       	ldi	r25, 0x03	; 3
 5be:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UEINTX = 0x6B;
 5c2:	2b e6       	ldi	r18, 0x6B	; 107
		while ((UEINTX & (1<<RWAL))) {
 5c4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5c8:	95 fd       	sbrc	r25, 5
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <usb_serial_flush_input+0x20>
		SREG = intr_state;
 5cc:	8f bf       	out	0x3f, r24	; 63
}
 5ce:	08 95       	ret
			UEINTX = 0x6B;
 5d0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5d4:	f7 cf       	rjmp	.-18     	; 0x5c4 <usb_serial_flush_input+0x14>

000005d6 <usb_serial_putchar>:
	if (!usb_configuration) return -1;
 5d6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
 5da:	91 11       	cpse	r25, r1
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <usb_serial_putchar+0xc>
			return -1;
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	08 95       	ret
	intr_state = SREG;
 5e2:	9f b7       	in	r25, 0x3f	; 63
	cli();
 5e4:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
 5e6:	24 e0       	ldi	r18, 0x04	; 4
 5e8:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	if (transmit_previous_timeout) {
 5ec:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <transmit_previous_timeout>
 5f0:	22 23       	and	r18, r18
 5f2:	41 f0       	breq	.+16     	; 0x604 <usb_serial_putchar+0x2e>
		if (!(UEINTX & (1<<RWAL))) {
 5f4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5f8:	25 fd       	sbrc	r18, 5
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <usb_serial_putchar+0x2a>
			SREG = intr_state;
 5fc:	9f bf       	out	0x3f, r25	; 63
 5fe:	ef cf       	rjmp	.-34     	; 0x5de <usb_serial_putchar+0x8>
		transmit_previous_timeout = 0;
 600:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <transmit_previous_timeout>
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
 604:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 608:	27 5e       	subi	r18, 0xE7	; 231
		UENUM = CDC_TX_ENDPOINT;
 60a:	34 e0       	ldi	r19, 0x04	; 4
		if (UEINTX & (1<<RWAL)) break;
 60c:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 610:	45 fd       	sbrc	r20, 5
 612:	12 c0       	rjmp	.+36     	; 0x638 <usb_serial_putchar+0x62>
		SREG = intr_state;
 614:	9f bf       	out	0x3f, r25	; 63
		if (UDFNUML == timeout) {
 616:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 61a:	92 13       	cpse	r25, r18
 61c:	04 c0       	rjmp	.+8      	; 0x626 <usb_serial_putchar+0x50>
			transmit_previous_timeout = 1;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <transmit_previous_timeout>
			return -1;
 624:	dc cf       	rjmp	.-72     	; 0x5de <usb_serial_putchar+0x8>
		if (!usb_configuration) return -1;
 626:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <usb_configuration>
 62a:	99 23       	and	r25, r25
 62c:	c1 f2       	breq	.-80     	; 0x5de <usb_serial_putchar+0x8>
		intr_state = SREG;
 62e:	9f b7       	in	r25, 0x3f	; 63
		cli();
 630:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
 632:	30 93 e9 00 	sts	0x00E9, r19	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (UEINTX & (1<<RWAL)) break;
 636:	ea cf       	rjmp	.-44     	; 0x60c <usb_serial_putchar+0x36>
	UEDATX = c;
 638:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 63c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 640:	85 fd       	sbrc	r24, 5
 642:	03 c0       	rjmp	.+6      	; 0x64a <usb_serial_putchar+0x74>
 644:	8a e3       	ldi	r24, 0x3A	; 58
 646:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 64a:	85 e0       	ldi	r24, 0x05	; 5
 64c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
	SREG = intr_state;
 650:	9f bf       	out	0x3f, r25	; 63
	return 0;
 652:	80 e0       	ldi	r24, 0x00	; 0
}
 654:	08 95       	ret

00000656 <usb_serial_get_control>:
}
 656:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 65a:	08 95       	ret

0000065c <__vector_10>:
{
 65c:	1f 92       	push	r1
 65e:	1f b6       	in	r1, 0x3f	; 63
 660:	1f 92       	push	r1
 662:	11 24       	eor	r1, r1
 664:	8f 93       	push	r24
 666:	9f 93       	push	r25
        intbits = UDINT;
 668:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
 66c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
 670:	83 ff       	sbrs	r24, 3
 672:	11 c0       	rjmp	.+34     	; 0x696 <__vector_10+0x3a>
		UENUM = 0;
 674:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
 67e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 682:	92 e1       	ldi	r25, 0x12	; 18
 684:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
 688:	98 e0       	ldi	r25, 0x08	; 8
 68a:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
 68e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <usb_configuration>
		cdc_line_rtsdtr = 0;
 692:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
	if (intbits & (1<<SOFI)) {
 696:	82 ff       	sbrs	r24, 2
 698:	13 c0       	rjmp	.+38     	; 0x6c0 <__vector_10+0x64>
		if (usb_configuration) {
 69a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 69e:	88 23       	and	r24, r24
 6a0:	79 f0       	breq	.+30     	; 0x6c0 <__vector_10+0x64>
			t = transmit_flush_timer;
 6a2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <transmit_flush_timer>
			if (t) {
 6a6:	88 23       	and	r24, r24
 6a8:	59 f0       	breq	.+22     	; 0x6c0 <__vector_10+0x64>
				transmit_flush_timer = --t;
 6aa:	81 50       	subi	r24, 0x01	; 1
 6ac:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <transmit_flush_timer>
				if (!t) {
 6b0:	81 11       	cpse	r24, r1
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <__vector_10+0x64>
					UENUM = CDC_TX_ENDPOINT;
 6b4:	84 e0       	ldi	r24, 0x04	; 4
 6b6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
 6ba:	8a e3       	ldi	r24, 0x3A	; 58
 6bc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
 6c0:	9f 91       	pop	r25
 6c2:	8f 91       	pop	r24
 6c4:	1f 90       	pop	r1
 6c6:	1f be       	out	0x3f, r1	; 63
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 6cc:	1f 92       	push	r1
 6ce:	0f 92       	push	r0
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	0f 92       	push	r0
 6d4:	11 24       	eor	r1, r1
 6d6:	ef 92       	push	r14
 6d8:	ff 92       	push	r15
 6da:	0f 93       	push	r16
 6dc:	1f 93       	push	r17
 6de:	2f 93       	push	r18
 6e0:	3f 93       	push	r19
 6e2:	4f 93       	push	r20
 6e4:	5f 93       	push	r21
 6e6:	6f 93       	push	r22
 6e8:	7f 93       	push	r23
 6ea:	8f 93       	push	r24
 6ec:	9f 93       	push	r25
 6ee:	af 93       	push	r26
 6f0:	bf 93       	push	r27
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	ef 93       	push	r30
 6f8:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 6fa:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        intbits = UEINTX;
 6fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
 702:	83 ff       	sbrs	r24, 3
 704:	72 c0       	rjmp	.+228    	; 0x7ea <__vector_11+0x11e>
                bmRequestType = UEDATX;
 706:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                bRequest = UEDATX;
 70a:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue = UEDATX;
 70e:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue |= (UEDATX << 8);
 712:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 716:	f8 2e       	mov	r15, r24
                wIndex = UEDATX;
 718:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wIndex |= (UEDATX << 8);
 71c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 720:	18 2f       	mov	r17, r24
                wLength = UEDATX;
 722:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wLength |= (UEDATX << 8);
 726:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 72a:	22 ef       	ldi	r18, 0xF2	; 242
 72c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
 730:	c6 30       	cpi	r28, 0x06	; 6
 732:	09 f0       	breq	.+2      	; 0x736 <__vector_11+0x6a>
 734:	66 c0       	rjmp	.+204    	; 0x802 <__vector_11+0x136>
 736:	2a e2       	ldi	r18, 0x2A	; 42
 738:	32 e0       	ldi	r19, 0x02	; 2
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 73a:	f9 01       	movw	r30, r18
 73c:	45 91       	lpm	r20, Z+
 73e:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
 740:	e4 16       	cp	r14, r20
 742:	f5 06       	cpc	r15, r21
 744:	09 f0       	breq	.+2      	; 0x748 <__vector_11+0x7c>
 746:	4a c0       	rjmp	.+148    	; 0x7dc <__vector_11+0x110>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 748:	f9 01       	movw	r30, r18
 74a:	32 96       	adiw	r30, 0x02	; 2
 74c:	45 91       	lpm	r20, Z+
 74e:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
 750:	04 17       	cp	r16, r20
 752:	15 07       	cpc	r17, r21
 754:	09 f0       	breq	.+2      	; 0x758 <__vector_11+0x8c>
 756:	42 c0       	rjmp	.+132    	; 0x7dc <__vector_11+0x110>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 758:	f9 01       	movw	r30, r18
 75a:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 75c:	45 91       	lpm	r20, Z+
 75e:	54 91       	lpm	r21, Z
				list += 2;
 760:	f9 01       	movw	r30, r18
 762:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 764:	e4 91       	lpm	r30, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 766:	8f 3f       	cpi	r24, 0xFF	; 255
 768:	91 05       	cpc	r25, r1
 76a:	19 f0       	breq	.+6      	; 0x772 <__vector_11+0xa6>
 76c:	10 f0       	brcs	.+4      	; 0x772 <__vector_11+0xa6>
 76e:	8f ef       	ldi	r24, 0xFF	; 255
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	e8 17       	cp	r30, r24
 774:	08 f4       	brcc	.+2      	; 0x778 <__vector_11+0xac>
 776:	8e 2f       	mov	r24, r30
	UEINTX = ~(1<<TXINI);
 778:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 77a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 77e:	29 2f       	mov	r18, r25
 780:	25 70       	andi	r18, 0x05	; 5
 782:	d9 f3       	breq	.-10     	; 0x77a <__vector_11+0xae>
				if (i & (1<<RXOUTI)) return;	// abort
 784:	92 fd       	sbrc	r25, 2
 786:	13 c0       	rjmp	.+38     	; 0x7ae <__vector_11+0xe2>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 788:	98 2f       	mov	r25, r24
 78a:	81 31       	cpi	r24, 0x11	; 17
 78c:	08 f0       	brcs	.+2      	; 0x790 <__vector_11+0xc4>
 78e:	90 e1       	ldi	r25, 0x10	; 16
				for (i = n; i; i--) {
 790:	fa 01       	movw	r30, r20
 792:	29 2f       	mov	r18, r25
 794:	21 11       	cpse	r18, r1
 796:	2f c0       	rjmp	.+94     	; 0x7f6 <__vector_11+0x12a>
 798:	49 0f       	add	r20, r25
 79a:	51 1d       	adc	r21, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 79c:	e8 2f       	mov	r30, r24
 79e:	e9 1b       	sub	r30, r25
 7a0:	9e 2f       	mov	r25, r30
	UEINTX = ~(1<<TXINI);
 7a2:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 7a6:	e1 11       	cpse	r30, r1
 7a8:	24 c0       	rjmp	.+72     	; 0x7f2 <__vector_11+0x126>
 7aa:	80 31       	cpi	r24, 0x10	; 16
 7ac:	10 f5       	brcc	.+68     	; 0x7f2 <__vector_11+0x126>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 7ae:	ff 91       	pop	r31
 7b0:	ef 91       	pop	r30
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	bf 91       	pop	r27
 7b8:	af 91       	pop	r26
 7ba:	9f 91       	pop	r25
 7bc:	8f 91       	pop	r24
 7be:	7f 91       	pop	r23
 7c0:	6f 91       	pop	r22
 7c2:	5f 91       	pop	r21
 7c4:	4f 91       	pop	r20
 7c6:	3f 91       	pop	r19
 7c8:	2f 91       	pop	r18
 7ca:	1f 91       	pop	r17
 7cc:	0f 91       	pop	r16
 7ce:	ff 90       	pop	r15
 7d0:	ef 90       	pop	r14
 7d2:	0f 90       	pop	r0
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	0f 90       	pop	r0
 7d8:	1f 90       	pop	r1
 7da:	18 95       	reti
				if (i >= NUM_DESC_LIST) {
 7dc:	29 5f       	subi	r18, 0xF9	; 249
 7de:	3f 4f       	sbci	r19, 0xFF	; 255
 7e0:	42 e0       	ldi	r20, 0x02	; 2
 7e2:	24 35       	cpi	r18, 0x54	; 84
 7e4:	34 07       	cpc	r19, r20
 7e6:	09 f0       	breq	.+2      	; 0x7ea <__vector_11+0x11e>
 7e8:	a8 cf       	rjmp	.-176    	; 0x73a <__vector_11+0x6e>
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 7ea:	81 e2       	ldi	r24, 0x21	; 33
 7ec:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 7f0:	de cf       	rjmp	.-68     	; 0x7ae <__vector_11+0xe2>
{
 7f2:	89 2f       	mov	r24, r25
 7f4:	c2 cf       	rjmp	.-124    	; 0x77a <__vector_11+0xae>
					UEDATX = pgm_read_byte(desc_addr++);
 7f6:	64 91       	lpm	r22, Z
 7f8:	60 93 f1 00 	sts	0x00F1, r22	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				for (i = n; i; i--) {
 7fc:	21 50       	subi	r18, 0x01	; 1
 7fe:	31 96       	adiw	r30, 0x01	; 1
 800:	c9 cf       	rjmp	.-110    	; 0x794 <__vector_11+0xc8>
		if (bRequest == SET_ADDRESS) {
 802:	c5 30       	cpi	r28, 0x05	; 5
 804:	49 f4       	brne	.+18     	; 0x818 <__vector_11+0x14c>
	UEINTX = ~(1<<TXINI);
 806:	8e ef       	ldi	r24, 0xFE	; 254
 808:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_wait_in_ready();
 80c:	8d de       	rcall	.-742    	; 0x528 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
 80e:	8e 2d       	mov	r24, r14
 810:	80 68       	ori	r24, 0x80	; 128
 812:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
 816:	cb cf       	rjmp	.-106    	; 0x7ae <__vector_11+0xe2>
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 818:	c9 30       	cpi	r28, 0x09	; 9
 81a:	69 f5       	brne	.+90     	; 0x876 <__vector_11+0x1aa>
 81c:	d1 11       	cpse	r29, r1
 81e:	e5 cf       	rjmp	.-54     	; 0x7ea <__vector_11+0x11e>
			usb_configuration = wValue;
 820:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <usb_configuration>
			cdc_line_rtsdtr = 0;
 824:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
			transmit_flush_timer = 0;
 828:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <transmit_flush_timer>
	UEINTX = ~(1<<TXINI);
 82c:	8e ef       	ldi	r24, 0xFE	; 254
 82e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			for (i=1; i<5; i++) {
 832:	21 e0       	ldi	r18, 0x01	; 1
			cfg = endpoint_config_table;
 834:	89 ee       	ldi	r24, 0xE9	; 233
 836:	92 e0       	ldi	r25, 0x02	; 2
				UENUM = i;
 838:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				en = pgm_read_byte(cfg++);
 83c:	ac 01       	movw	r20, r24
 83e:	4f 5f       	subi	r20, 0xFF	; 255
 840:	5f 4f       	sbci	r21, 0xFF	; 255
 842:	fc 01       	movw	r30, r24
 844:	34 91       	lpm	r19, Z
				UECONX = en;
 846:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
 84a:	33 23       	and	r19, r19
 84c:	91 f0       	breq	.+36     	; 0x872 <__vector_11+0x1a6>
					UECFG0X = pgm_read_byte(cfg++);
 84e:	fa 01       	movw	r30, r20
 850:	44 91       	lpm	r20, Z
 852:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					UECFG1X = pgm_read_byte(cfg++);
 856:	31 96       	adiw	r30, 0x01	; 1
 858:	e4 91       	lpm	r30, Z
 85a:	03 96       	adiw	r24, 0x03	; 3
 85c:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			for (i=1; i<5; i++) {
 860:	2f 5f       	subi	r18, 0xFF	; 255
 862:	25 30       	cpi	r18, 0x05	; 5
 864:	49 f7       	brne	.-46     	; 0x838 <__vector_11+0x16c>
        		UERST = 0x1E;
 866:	8e e1       	ldi	r24, 0x1E	; 30
					UERST = (1 << i);
 868:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
 86c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
 870:	9e cf       	rjmp	.-196    	; 0x7ae <__vector_11+0xe2>
				en = pgm_read_byte(cfg++);
 872:	ca 01       	movw	r24, r20
 874:	f5 cf       	rjmp	.-22     	; 0x860 <__vector_11+0x194>
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 876:	c8 30       	cpi	r28, 0x08	; 8
 878:	61 f4       	brne	.+24     	; 0x892 <__vector_11+0x1c6>
 87a:	d0 38       	cpi	r29, 0x80	; 128
 87c:	09 f0       	breq	.+2      	; 0x880 <__vector_11+0x1b4>
			usb_wait_in_ready();
 87e:	b5 cf       	rjmp	.-150    	; 0x7ea <__vector_11+0x11e>
 880:	53 de       	rcall	.-858    	; 0x528 <usb_wait_in_ready>
			UEDATX = usb_configuration;
 882:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <usb_configuration>
 886:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	UEINTX = ~(1<<TXINI);
 88a:	8e ef       	ldi	r24, 0xFE	; 254
 88c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			return;
 890:	8e cf       	rjmp	.-228    	; 0x7ae <__vector_11+0xe2>
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 892:	c1 32       	cpi	r28, 0x21	; 33
 894:	81 f4       	brne	.+32     	; 0x8b6 <__vector_11+0x1ea>
 896:	d1 3a       	cpi	r29, 0xA1	; 161
 898:	09 f0       	breq	.+2      	; 0x89c <__vector_11+0x1d0>
			usb_wait_in_ready();
 89a:	a7 cf       	rjmp	.-178    	; 0x7ea <__vector_11+0x11e>
 89c:	45 de       	rcall	.-886    	; 0x528 <usb_wait_in_ready>
			p = cdc_line_coding;
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	91 e0       	ldi	r25, 0x01	; 1
				UEDATX = *p++;
 8a2:	fc 01       	movw	r30, r24
 8a4:	21 91       	ld	r18, Z+
 8a6:	cf 01       	movw	r24, r30
 8a8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			for (i=0; i<7; i++) {
 8ac:	f1 e0       	ldi	r31, 0x01	; 1
 8ae:	87 30       	cpi	r24, 0x07	; 7
 8b0:	9f 07       	cpc	r25, r31
 8b2:	b9 f7       	brne	.-18     	; 0x8a2 <__vector_11+0x1d6>
 8b4:	ea cf       	rjmp	.-44     	; 0x88a <__vector_11+0x1be>
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 8b6:	c0 32       	cpi	r28, 0x20	; 32
 8b8:	b1 f4       	brne	.+44     	; 0x8e6 <__vector_11+0x21a>
 8ba:	d1 32       	cpi	r29, 0x21	; 33
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <__vector_11+0x1f4>
 8be:	95 cf       	rjmp	.-214    	; 0x7ea <__vector_11+0x11e>
	while (!(UEINTX & (1<<RXOUTI))) ;
 8c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8c4:	82 ff       	sbrs	r24, 2
 8c6:	fc cf       	rjmp	.-8      	; 0x8c0 <__vector_11+0x1f4>
			p = cdc_line_coding;
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	91 e0       	ldi	r25, 0x01	; 1
				*p++ = UEDATX;
 8cc:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 8d0:	fc 01       	movw	r30, r24
 8d2:	21 93       	st	Z+, r18
 8d4:	cf 01       	movw	r24, r30
			for (i=0; i<7; i++) {
 8d6:	f1 e0       	ldi	r31, 0x01	; 1
 8d8:	87 30       	cpi	r24, 0x07	; 7
 8da:	9f 07       	cpc	r25, r31
 8dc:	b9 f7       	brne	.-18     	; 0x8cc <__vector_11+0x200>
	UEINTX = ~(1<<RXOUTI);
 8de:	8b ef       	ldi	r24, 0xFB	; 251
 8e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	UEINTX = ~(1<<TXINI);
 8e4:	d2 cf       	rjmp	.-92     	; 0x88a <__vector_11+0x1be>
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 8e6:	c2 32       	cpi	r28, 0x22	; 34
 8e8:	39 f4       	brne	.+14     	; 0x8f8 <__vector_11+0x22c>
 8ea:	d1 32       	cpi	r29, 0x21	; 33
 8ec:	09 f0       	breq	.+2      	; 0x8f0 <__vector_11+0x224>
			cdc_line_rtsdtr = wValue;
 8ee:	7d cf       	rjmp	.-262    	; 0x7ea <__vector_11+0x11e>
 8f0:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <__data_end>
	UEINTX = ~(1<<TXINI);
 8f4:	19 de       	rcall	.-974    	; 0x528 <usb_wait_in_ready>
		if (bRequest == GET_STATUS) {
 8f6:	c9 cf       	rjmp	.-110    	; 0x88a <__vector_11+0x1be>
 8f8:	c1 11       	cpse	r28, r1
			usb_wait_in_ready();
 8fa:	11 c0       	rjmp	.+34     	; 0x91e <__vector_11+0x252>
 8fc:	15 de       	rcall	.-982    	; 0x528 <usb_wait_in_ready>
			if (bmRequestType == 0x82) {
 8fe:	d2 38       	cpi	r29, 0x82	; 130
 900:	49 f4       	brne	.+18     	; 0x914 <__vector_11+0x248>
				UENUM = wIndex;
 902:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
 906:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 90a:	c5 fb       	bst	r28, 5
 90c:	cc 27       	eor	r28, r28
 90e:	c0 f9       	bld	r28, 0
				UENUM = 0;
 910:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UEDATX = i;
 914:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
 918:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 91c:	b6 cf       	rjmp	.-148    	; 0x88a <__vector_11+0x1be>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 91e:	8c 2f       	mov	r24, r28
 920:	8d 7f       	andi	r24, 0xFD	; 253
 922:	81 30       	cpi	r24, 0x01	; 1
 924:	09 f0       	breq	.+2      	; 0x928 <__vector_11+0x25c>
 926:	61 cf       	rjmp	.-318    	; 0x7ea <__vector_11+0x11e>
		  && bmRequestType == 0x02 && wValue == 0) {
 928:	d2 30       	cpi	r29, 0x02	; 2
 92a:	09 f0       	breq	.+2      	; 0x92e <__vector_11+0x262>
 92c:	5e cf       	rjmp	.-324    	; 0x7ea <__vector_11+0x11e>
 92e:	ef 28       	or	r14, r15
 930:	09 f0       	breq	.+2      	; 0x934 <__vector_11+0x268>
 932:	5b cf       	rjmp	.-330    	; 0x7ea <__vector_11+0x11e>
			i = wIndex & 0x7F;
 934:	0f 77       	andi	r16, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 936:	8f ef       	ldi	r24, 0xFF	; 255
 938:	80 0f       	add	r24, r16
 93a:	84 30       	cpi	r24, 0x04	; 4
 93c:	08 f0       	brcs	.+2      	; 0x940 <__vector_11+0x274>
 93e:	55 cf       	rjmp	.-342    	; 0x7ea <__vector_11+0x11e>
	UEINTX = ~(1<<TXINI);
 940:	8e ef       	ldi	r24, 0xFE	; 254
 942:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UENUM = i;
 946:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
 94a:	c3 30       	cpi	r28, 0x03	; 3
 94c:	09 f4       	brne	.+2      	; 0x950 <__vector_11+0x284>
 94e:	4d cf       	rjmp	.-358    	; 0x7ea <__vector_11+0x11e>
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 950:	89 e1       	ldi	r24, 0x19	; 25
 952:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	01 c0       	rjmp	.+2      	; 0x95e <__vector_11+0x292>
 95c:	88 0f       	add	r24, r24
 95e:	0a 95       	dec	r16
 960:	ea f7       	brpl	.-6      	; 0x95c <__vector_11+0x290>
 962:	82 cf       	rjmp	.-252    	; 0x868 <__vector_11+0x19c>

00000964 <_exit>:
 964:	f8 94       	cli

00000966 <__stop_program>:
 966:	ff cf       	rjmp	.-2      	; 0x966 <__stop_program>
