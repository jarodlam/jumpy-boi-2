   1               		.file	"usb_serial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.usb_wait_in_ready,"ax",@progbits
  12               	usb_wait_in_ready:
  13               	.LFB17:
  14               		.file 1 "usb_serial.c"
   1:usb_serial.c  **** /* USB Serial Example for Teensy USB Development Board
   2:usb_serial.c  ****  * http://www.pjrc.com/teensy/usb_serial.html
   3:usb_serial.c  ****  * Copyright (c) 2008,2010,2011 PJRC.COM, LLC
   4:usb_serial.c  ****  *
   5:usb_serial.c  ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   6:usb_serial.c  ****  * of this software and associated documentation files (the "Software"), to deal
   7:usb_serial.c  ****  * in the Software without restriction, including without limitation the rights
   8:usb_serial.c  ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:usb_serial.c  ****  * copies of the Software, and to permit persons to whom the Software is
  10:usb_serial.c  ****  * furnished to do so, subject to the following conditions:
  11:usb_serial.c  ****  *
  12:usb_serial.c  ****  * The above copyright notice and this permission notice shall be included in
  13:usb_serial.c  ****  * all copies or substantial portions of the Software.
  14:usb_serial.c  ****  *
  15:usb_serial.c  ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:usb_serial.c  ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:usb_serial.c  ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:usb_serial.c  ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:usb_serial.c  ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:usb_serial.c  ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:usb_serial.c  ****  * THE SOFTWARE.
  22:usb_serial.c  ****  */
  23:usb_serial.c  **** 
  24:usb_serial.c  **** // Version 1.0: Initial Release
  25:usb_serial.c  **** // Version 1.1: support Teensy++
  26:usb_serial.c  **** // Version 1.2: fixed usb_serial_available
  27:usb_serial.c  **** // Version 1.3: added transmit bandwidth test
  28:usb_serial.c  **** // Version 1.4: added usb_serial_write
  29:usb_serial.c  **** // Version 1.5: add support for Teensy 2.0
  30:usb_serial.c  **** // Version 1.6: fix zero length packet bug
  31:usb_serial.c  **** // Version 1.7: fix usb_serial_set_control
  32:usb_serial.c  **** 
  33:usb_serial.c  **** #define USB_SERIAL_PRIVATE_INCLUDE
  34:usb_serial.c  **** #include "usb_serial.h"
  35:usb_serial.c  **** 
  36:usb_serial.c  **** 
  37:usb_serial.c  **** /**************************************************************************
  38:usb_serial.c  ****  *
  39:usb_serial.c  ****  *  Configurable Options
  40:usb_serial.c  ****  *
  41:usb_serial.c  ****  **************************************************************************/
  42:usb_serial.c  **** 
  43:usb_serial.c  **** // You can change these to give your code its own name.  On Windows,
  44:usb_serial.c  **** // these are only used before an INF file (driver install) is loaded.
  45:usb_serial.c  **** #define STR_MANUFACTURER	L"Your Name"
  46:usb_serial.c  **** #define STR_PRODUCT		L"USB Serial"
  47:usb_serial.c  **** 
  48:usb_serial.c  **** // All USB serial devices are supposed to have a serial number
  49:usb_serial.c  **** // (according to Microsoft).  On windows, a new COM port is created
  50:usb_serial.c  **** // for every unique serial/vendor/product number combination.  If
  51:usb_serial.c  **** // you program 2 identical boards with 2 different serial numbers
  52:usb_serial.c  **** // and they are assigned COM7 and COM8, each will always get the
  53:usb_serial.c  **** // same COM port number because Windows remembers serial numbers.
  54:usb_serial.c  **** //
  55:usb_serial.c  **** // On Mac OS-X, a device file is created automatically which
  56:usb_serial.c  **** // incorperates the serial number, eg, /dev/cu-usbmodem12341
  57:usb_serial.c  **** //
  58:usb_serial.c  **** // Linux by default ignores the serial number, and creates device
  59:usb_serial.c  **** // files named /dev/ttyACM0, /dev/ttyACM1... in the order connected.
  60:usb_serial.c  **** // Udev rules (in /etc/udev/rules.d) can define persistent device
  61:usb_serial.c  **** // names linked to this serial number, as well as permissions, owner
  62:usb_serial.c  **** // and group settings.
  63:usb_serial.c  **** #define STR_SERIAL_NUMBER	L"12345"
  64:usb_serial.c  **** 
  65:usb_serial.c  **** // Mac OS-X and Linux automatically load the correct drivers.  On
  66:usb_serial.c  **** // Windows, even though the driver is supplied by Microsoft, an
  67:usb_serial.c  **** // INF file is needed to load the driver.  These numbers need to
  68:usb_serial.c  **** // match the INF file.
  69:usb_serial.c  **** #define VENDOR_ID		0x16C0
  70:usb_serial.c  **** #define PRODUCT_ID		0x047A
  71:usb_serial.c  **** 
  72:usb_serial.c  **** // When you write data, it goes into a USB endpoint buffer, which
  73:usb_serial.c  **** // is transmitted to the PC when it becomes full, or after a timeout
  74:usb_serial.c  **** // with no more writes.  Even if you write in exactly packet-size
  75:usb_serial.c  **** // increments, this timeout is used to send a "zero length packet"
  76:usb_serial.c  **** // that tells the PC no more data is expected and it should pass
  77:usb_serial.c  **** // any buffered data to the application that may be waiting.  If
  78:usb_serial.c  **** // you want data sent immediately, call usb_serial_flush_output().
  79:usb_serial.c  **** #define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */
  80:usb_serial.c  **** 
  81:usb_serial.c  **** // If the PC is connected but not "listening", this is the length
  82:usb_serial.c  **** // of time before usb_serial_getchar() returns with an error.  This
  83:usb_serial.c  **** // is roughly equivilant to a real UART simply transmitting the
  84:usb_serial.c  **** // bits on a wire where nobody is listening, except you get an error
  85:usb_serial.c  **** // code which you can ignore for serial-like discard of data, or
  86:usb_serial.c  **** // use to know your data wasn't sent.
  87:usb_serial.c  **** #define TRANSMIT_TIMEOUT	25   /* in milliseconds */
  88:usb_serial.c  **** 
  89:usb_serial.c  **** // USB devices are supposed to implment a halt feature, which is
  90:usb_serial.c  **** // rarely (if ever) used.  If you comment this line out, the halt
  91:usb_serial.c  **** // code will be removed, saving 116 bytes of space (gcc 4.3.0).
  92:usb_serial.c  **** // This is not strictly USB compliant, but works with all major
  93:usb_serial.c  **** // operating systems.
  94:usb_serial.c  **** #define SUPPORT_ENDPOINT_HALT
  95:usb_serial.c  **** 
  96:usb_serial.c  **** 
  97:usb_serial.c  **** 
  98:usb_serial.c  **** /**************************************************************************
  99:usb_serial.c  ****  *
 100:usb_serial.c  ****  *  Endpoint Buffer Configuration
 101:usb_serial.c  ****  *
 102:usb_serial.c  ****  **************************************************************************/
 103:usb_serial.c  **** 
 104:usb_serial.c  **** // These buffer sizes are best for most applications, but perhaps if you
 105:usb_serial.c  **** // want more buffering on some endpoint at the expense of others, this
 106:usb_serial.c  **** // is where you can make such changes.  The AT90USB162 has only 176 bytes
 107:usb_serial.c  **** // of DPRAM (USB buffers) and only endpoints 3 & 4 can double buffer.
 108:usb_serial.c  **** 
 109:usb_serial.c  **** #define ENDPOINT0_SIZE		16
 110:usb_serial.c  **** #define CDC_ACM_ENDPOINT	2
 111:usb_serial.c  **** #define CDC_RX_ENDPOINT		3
 112:usb_serial.c  **** #define CDC_TX_ENDPOINT		4
 113:usb_serial.c  **** #if defined(__AVR_AT90USB162__)
 114:usb_serial.c  **** #define CDC_ACM_SIZE		16
 115:usb_serial.c  **** #define CDC_ACM_BUFFER		EP_SINGLE_BUFFER
 116:usb_serial.c  **** #define CDC_RX_SIZE		32
 117:usb_serial.c  **** #define CDC_RX_BUFFER 		EP_DOUBLE_BUFFER
 118:usb_serial.c  **** #define CDC_TX_SIZE		32
 119:usb_serial.c  **** #define CDC_TX_BUFFER		EP_DOUBLE_BUFFER
 120:usb_serial.c  **** #else
 121:usb_serial.c  **** #define CDC_ACM_SIZE		16
 122:usb_serial.c  **** #define CDC_ACM_BUFFER		EP_SINGLE_BUFFER
 123:usb_serial.c  **** #define CDC_RX_SIZE		64
 124:usb_serial.c  **** #define CDC_RX_BUFFER 		EP_DOUBLE_BUFFER
 125:usb_serial.c  **** #define CDC_TX_SIZE		64
 126:usb_serial.c  **** #define CDC_TX_BUFFER		EP_DOUBLE_BUFFER
 127:usb_serial.c  **** #endif
 128:usb_serial.c  **** 
 129:usb_serial.c  **** static const uint8_t PROGMEM endpoint_config_table[] = {
 130:usb_serial.c  **** 	0,
 131:usb_serial.c  **** 	1, EP_TYPE_INTERRUPT_IN,  EP_SIZE(CDC_ACM_SIZE) | CDC_ACM_BUFFER,
 132:usb_serial.c  **** 	1, EP_TYPE_BULK_OUT,      EP_SIZE(CDC_RX_SIZE) | CDC_RX_BUFFER,
 133:usb_serial.c  **** 	1, EP_TYPE_BULK_IN,       EP_SIZE(CDC_TX_SIZE) | CDC_TX_BUFFER
 134:usb_serial.c  **** };
 135:usb_serial.c  **** 
 136:usb_serial.c  **** 
 137:usb_serial.c  **** /**************************************************************************
 138:usb_serial.c  ****  *
 139:usb_serial.c  ****  *  Descriptor Data
 140:usb_serial.c  ****  *
 141:usb_serial.c  ****  **************************************************************************/
 142:usb_serial.c  **** 
 143:usb_serial.c  **** // Descriptors are the data that your computer reads when it auto-detects
 144:usb_serial.c  **** // this USB device (called "enumeration" in USB lingo).  The most commonly
 145:usb_serial.c  **** // changed items are editable at the top of this file.  Changing things
 146:usb_serial.c  **** // in here should only be done by those who've read chapter 9 of the USB
 147:usb_serial.c  **** // spec and relevant portions of any USB class specifications!
 148:usb_serial.c  **** 
 149:usb_serial.c  **** static const uint8_t PROGMEM device_descriptor[] = {
 150:usb_serial.c  **** 	18,					// bLength
 151:usb_serial.c  **** 	1,					// bDescriptorType
 152:usb_serial.c  **** 	0x00, 0x02,				// bcdUSB
 153:usb_serial.c  **** 	2,					// bDeviceClass
 154:usb_serial.c  **** 	0,					// bDeviceSubClass
 155:usb_serial.c  **** 	0,					// bDeviceProtocol
 156:usb_serial.c  **** 	ENDPOINT0_SIZE,				// bMaxPacketSize0
 157:usb_serial.c  **** 	LSB(VENDOR_ID), MSB(VENDOR_ID),		// idVendor
 158:usb_serial.c  **** 	LSB(PRODUCT_ID), MSB(PRODUCT_ID),	// idProduct
 159:usb_serial.c  **** 	0x00, 0x01,				// bcdDevice
 160:usb_serial.c  **** 	1,					// iManufacturer
 161:usb_serial.c  **** 	2,					// iProduct
 162:usb_serial.c  **** 	3,					// iSerialNumber
 163:usb_serial.c  **** 	1					// bNumConfigurations
 164:usb_serial.c  **** };
 165:usb_serial.c  **** 
 166:usb_serial.c  **** #define CONFIG1_DESC_SIZE (9+9+5+5+4+5+7+9+7+7)
 167:usb_serial.c  **** static const uint8_t PROGMEM config1_descriptor[CONFIG1_DESC_SIZE] = {
 168:usb_serial.c  **** 	// configuration descriptor, USB spec 9.6.3, page 264-266, Table 9-10
 169:usb_serial.c  **** 	9, 					// bLength;
 170:usb_serial.c  **** 	2,					// bDescriptorType;
 171:usb_serial.c  **** 	LSB(CONFIG1_DESC_SIZE),			// wTotalLength
 172:usb_serial.c  **** 	MSB(CONFIG1_DESC_SIZE),
 173:usb_serial.c  **** 	2,					// bNumInterfaces
 174:usb_serial.c  **** 	1,					// bConfigurationValue
 175:usb_serial.c  **** 	0,					// iConfiguration
 176:usb_serial.c  **** 	0xC0,					// bmAttributes
 177:usb_serial.c  **** 	50,					// bMaxPower
 178:usb_serial.c  **** 	// interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
 179:usb_serial.c  **** 	9,					// bLength
 180:usb_serial.c  **** 	4,					// bDescriptorType
 181:usb_serial.c  **** 	0,					// bInterfaceNumber
 182:usb_serial.c  **** 	0,					// bAlternateSetting
 183:usb_serial.c  **** 	1,					// bNumEndpoints
 184:usb_serial.c  **** 	0x02,					// bInterfaceClass
 185:usb_serial.c  **** 	0x02,					// bInterfaceSubClass
 186:usb_serial.c  **** 	0x01,					// bInterfaceProtocol
 187:usb_serial.c  **** 	0,					// iInterface
 188:usb_serial.c  **** 	// CDC Header Functional Descriptor, CDC Spec 5.2.3.1, Table 26
 189:usb_serial.c  **** 	5,					// bFunctionLength
 190:usb_serial.c  **** 	0x24,					// bDescriptorType
 191:usb_serial.c  **** 	0x00,					// bDescriptorSubtype
 192:usb_serial.c  **** 	0x10, 0x01,				// bcdCDC
 193:usb_serial.c  **** 	// Call Management Functional Descriptor, CDC Spec 5.2.3.2, Table 27
 194:usb_serial.c  **** 	5,					// bFunctionLength
 195:usb_serial.c  **** 	0x24,					// bDescriptorType
 196:usb_serial.c  **** 	0x01,					// bDescriptorSubtype
 197:usb_serial.c  **** 	0x01,					// bmCapabilities
 198:usb_serial.c  **** 	1,					// bDataInterface
 199:usb_serial.c  **** 	// Abstract Control Management Functional Descriptor, CDC Spec 5.2.3.3, Table 28
 200:usb_serial.c  **** 	4,					// bFunctionLength
 201:usb_serial.c  **** 	0x24,					// bDescriptorType
 202:usb_serial.c  **** 	0x02,					// bDescriptorSubtype
 203:usb_serial.c  **** 	0x06,					// bmCapabilities
 204:usb_serial.c  **** 	// Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
 205:usb_serial.c  **** 	5,					// bFunctionLength
 206:usb_serial.c  **** 	0x24,					// bDescriptorType
 207:usb_serial.c  **** 	0x06,					// bDescriptorSubtype
 208:usb_serial.c  **** 	0,					// bMasterInterface
 209:usb_serial.c  **** 	1,					// bSlaveInterface0
 210:usb_serial.c  **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 211:usb_serial.c  **** 	7,					// bLength
 212:usb_serial.c  **** 	5,					// bDescriptorType
 213:usb_serial.c  **** 	CDC_ACM_ENDPOINT | 0x80,		// bEndpointAddress
 214:usb_serial.c  **** 	0x03,					// bmAttributes (0x03=intr)
 215:usb_serial.c  **** 	CDC_ACM_SIZE, 0,			// wMaxPacketSize
 216:usb_serial.c  **** 	64,					// bInterval
 217:usb_serial.c  **** 	// interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
 218:usb_serial.c  **** 	9,					// bLength
 219:usb_serial.c  **** 	4,					// bDescriptorType
 220:usb_serial.c  **** 	1,					// bInterfaceNumber
 221:usb_serial.c  **** 	0,					// bAlternateSetting
 222:usb_serial.c  **** 	2,					// bNumEndpoints
 223:usb_serial.c  **** 	0x0A,					// bInterfaceClass
 224:usb_serial.c  **** 	0x00,					// bInterfaceSubClass
 225:usb_serial.c  **** 	0x00,					// bInterfaceProtocol
 226:usb_serial.c  **** 	0,					// iInterface
 227:usb_serial.c  **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 228:usb_serial.c  **** 	7,					// bLength
 229:usb_serial.c  **** 	5,					// bDescriptorType
 230:usb_serial.c  **** 	CDC_RX_ENDPOINT,			// bEndpointAddress
 231:usb_serial.c  **** 	0x02,					// bmAttributes (0x02=bulk)
 232:usb_serial.c  **** 	CDC_RX_SIZE, 0,				// wMaxPacketSize
 233:usb_serial.c  **** 	0,					// bInterval
 234:usb_serial.c  **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 235:usb_serial.c  **** 	7,					// bLength
 236:usb_serial.c  **** 	5,					// bDescriptorType
 237:usb_serial.c  **** 	CDC_TX_ENDPOINT | 0x80,			// bEndpointAddress
 238:usb_serial.c  **** 	0x02,					// bmAttributes (0x02=bulk)
 239:usb_serial.c  **** 	CDC_TX_SIZE, 0,				// wMaxPacketSize
 240:usb_serial.c  **** 	0					// bInterval
 241:usb_serial.c  **** };
 242:usb_serial.c  **** 
 243:usb_serial.c  **** // If you're desperate for a little extra code memory, these strings
 244:usb_serial.c  **** // can be completely removed if iManufacturer, iProduct, iSerialNumber
 245:usb_serial.c  **** // in the device desciptor are changed to zeros.
 246:usb_serial.c  **** struct usb_string_descriptor_struct {
 247:usb_serial.c  **** 	uint8_t bLength;
 248:usb_serial.c  **** 	uint8_t bDescriptorType;
 249:usb_serial.c  **** 	int16_t wString[];
 250:usb_serial.c  **** };
 251:usb_serial.c  **** static const struct usb_string_descriptor_struct PROGMEM string0 = {
 252:usb_serial.c  **** 	4,
 253:usb_serial.c  **** 	3,
 254:usb_serial.c  **** 	{0x0409}
 255:usb_serial.c  **** };
 256:usb_serial.c  **** static const struct usb_string_descriptor_struct PROGMEM string1 = {
 257:usb_serial.c  **** 	sizeof(STR_MANUFACTURER),
 258:usb_serial.c  **** 	3,
 259:usb_serial.c  **** 	STR_MANUFACTURER
 260:usb_serial.c  **** };
 261:usb_serial.c  **** static const struct usb_string_descriptor_struct PROGMEM string2 = {
 262:usb_serial.c  **** 	sizeof(STR_PRODUCT),
 263:usb_serial.c  **** 	3,
 264:usb_serial.c  **** 	STR_PRODUCT
 265:usb_serial.c  **** };
 266:usb_serial.c  **** static const struct usb_string_descriptor_struct PROGMEM string3 = {
 267:usb_serial.c  **** 	sizeof(STR_SERIAL_NUMBER),
 268:usb_serial.c  **** 	3,
 269:usb_serial.c  **** 	STR_SERIAL_NUMBER
 270:usb_serial.c  **** };
 271:usb_serial.c  **** 
 272:usb_serial.c  **** // This table defines which descriptor data is sent for each specific
 273:usb_serial.c  **** // request from the host (in wValue and wIndex).
 274:usb_serial.c  **** static const struct descriptor_list_struct {
 275:usb_serial.c  **** 	uint16_t	wValue;
 276:usb_serial.c  **** 	uint16_t	wIndex;
 277:usb_serial.c  **** 	const uint8_t	*addr;
 278:usb_serial.c  **** 	uint8_t		length;
 279:usb_serial.c  **** } PROGMEM descriptor_list[] = {
 280:usb_serial.c  **** 	{0x0100, 0x0000, device_descriptor, sizeof(device_descriptor)},
 281:usb_serial.c  **** 	{0x0200, 0x0000, config1_descriptor, sizeof(config1_descriptor)},
 282:usb_serial.c  **** 	{0x0300, 0x0000, (const uint8_t *)&string0, 4},
 283:usb_serial.c  **** 	{0x0301, 0x0409, (const uint8_t *)&string1, sizeof(STR_MANUFACTURER)},
 284:usb_serial.c  **** 	{0x0302, 0x0409, (const uint8_t *)&string2, sizeof(STR_PRODUCT)},
 285:usb_serial.c  **** 	{0x0303, 0x0409, (const uint8_t *)&string3, sizeof(STR_SERIAL_NUMBER)}
 286:usb_serial.c  **** };
 287:usb_serial.c  **** #define NUM_DESC_LIST (sizeof(descriptor_list)/sizeof(struct descriptor_list_struct))
 288:usb_serial.c  **** 
 289:usb_serial.c  **** 
 290:usb_serial.c  **** /**************************************************************************
 291:usb_serial.c  ****  *
 292:usb_serial.c  ****  *  Variables - these are the only non-stack RAM usage
 293:usb_serial.c  ****  *
 294:usb_serial.c  ****  **************************************************************************/
 295:usb_serial.c  **** 
 296:usb_serial.c  **** // zero when we are not configured, non-zero when enumerated
 297:usb_serial.c  **** static volatile uint8_t usb_configuration=0;
 298:usb_serial.c  **** 
 299:usb_serial.c  **** // the time remaining before we transmit any partially full
 300:usb_serial.c  **** // packet, or send a zero length packet.
 301:usb_serial.c  **** static volatile uint8_t transmit_flush_timer=0;
 302:usb_serial.c  **** static uint8_t transmit_previous_timeout=0;
 303:usb_serial.c  **** 
 304:usb_serial.c  **** // serial port settings (baud rate, control signals, etc) set
 305:usb_serial.c  **** // by the PC.  These are ignored, but kept in RAM.
 306:usb_serial.c  **** static uint8_t cdc_line_coding[7]={0x00, 0xE1, 0x00, 0x00, 0x00, 0x00, 0x08};
 307:usb_serial.c  **** static uint8_t cdc_line_rtsdtr=0;
 308:usb_serial.c  **** 
 309:usb_serial.c  **** 
 310:usb_serial.c  **** /**************************************************************************
 311:usb_serial.c  ****  *
 312:usb_serial.c  ****  *  Public Functions - these are the API intended for the user
 313:usb_serial.c  ****  *
 314:usb_serial.c  ****  **************************************************************************/
 315:usb_serial.c  **** 
 316:usb_serial.c  **** // initialize USB serial
 317:usb_serial.c  **** void usb_init(void)
 318:usb_serial.c  **** {
 319:usb_serial.c  **** 	HW_CONFIG();
 320:usb_serial.c  ****         USB_FREEZE();				// enable USB
 321:usb_serial.c  ****         PLL_CONFIG();				// config PLL, 16 MHz xtal
 322:usb_serial.c  ****         while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 323:usb_serial.c  ****         USB_CONFIG();				// start USB clock
 324:usb_serial.c  ****         UDCON = 0;				// enable attach resistor
 325:usb_serial.c  **** 	usb_configuration = 0;
 326:usb_serial.c  **** 	cdc_line_rtsdtr = 0;
 327:usb_serial.c  ****         UDIEN = (1<<EORSTE)|(1<<SOFE);
 328:usb_serial.c  **** 	sei();
 329:usb_serial.c  **** }
 330:usb_serial.c  **** 
 331:usb_serial.c  **** // return 0 if the USB is not configured, or the configuration
 332:usb_serial.c  **** // number selected by the HOST
 333:usb_serial.c  **** uint8_t usb_configured(void)
 334:usb_serial.c  **** {
 335:usb_serial.c  **** 	return usb_configuration;
 336:usb_serial.c  **** }
 337:usb_serial.c  **** 
 338:usb_serial.c  **** // get the next character, or -1 if nothing received
 339:usb_serial.c  **** int16_t usb_serial_getchar(void)
 340:usb_serial.c  **** {
 341:usb_serial.c  **** 	uint8_t c, intr_state;
 342:usb_serial.c  **** 
 343:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 344:usb_serial.c  **** 	// used from the main program or interrupt context,
 345:usb_serial.c  **** 	// even both in the same program!
 346:usb_serial.c  **** 	intr_state = SREG;
 347:usb_serial.c  **** 	cli();
 348:usb_serial.c  **** 	if (!usb_configuration) {
 349:usb_serial.c  **** 		SREG = intr_state;
 350:usb_serial.c  **** 		return -1;
 351:usb_serial.c  **** 	}
 352:usb_serial.c  **** 	UENUM = CDC_RX_ENDPOINT;
 353:usb_serial.c  **** 	retry:
 354:usb_serial.c  **** 	c = UEINTX;
 355:usb_serial.c  **** 	if (!(c & (1<<RWAL))) {
 356:usb_serial.c  **** 		// no data in buffer
 357:usb_serial.c  **** 		if (c & (1<<RXOUTI)) {
 358:usb_serial.c  **** 			UEINTX = 0x6B;
 359:usb_serial.c  **** 			goto retry;
 360:usb_serial.c  **** 		}
 361:usb_serial.c  **** 		SREG = intr_state;
 362:usb_serial.c  **** 		return -1;
 363:usb_serial.c  **** 	}
 364:usb_serial.c  **** 	// take one byte out of the buffer
 365:usb_serial.c  **** 	c = UEDATX;
 366:usb_serial.c  **** 	// if buffer completely used, release it
 367:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
 368:usb_serial.c  **** 	SREG = intr_state;
 369:usb_serial.c  **** 	return c;
 370:usb_serial.c  **** }
 371:usb_serial.c  **** 
 372:usb_serial.c  **** // number of bytes available in the receive buffer
 373:usb_serial.c  **** uint8_t usb_serial_available(void)
 374:usb_serial.c  **** {
 375:usb_serial.c  **** 	uint8_t n=0, i, intr_state;
 376:usb_serial.c  **** 
 377:usb_serial.c  **** 	intr_state = SREG;
 378:usb_serial.c  **** 	cli();
 379:usb_serial.c  **** 	if (usb_configuration) {
 380:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 381:usb_serial.c  **** 		n = UEBCLX;
 382:usb_serial.c  **** 		if (!n) {
 383:usb_serial.c  **** 			i = UEINTX;
 384:usb_serial.c  **** 			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
 385:usb_serial.c  **** 		}
 386:usb_serial.c  **** 	}
 387:usb_serial.c  **** 	SREG = intr_state;
 388:usb_serial.c  **** 	return n;
 389:usb_serial.c  **** }
 390:usb_serial.c  **** 
 391:usb_serial.c  **** // discard any buffered input
 392:usb_serial.c  **** void usb_serial_flush_input(void)
 393:usb_serial.c  **** {
 394:usb_serial.c  **** 	uint8_t intr_state;
 395:usb_serial.c  **** 
 396:usb_serial.c  **** 	if (usb_configuration) {
 397:usb_serial.c  **** 		intr_state = SREG;
 398:usb_serial.c  **** 		cli();
 399:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 400:usb_serial.c  **** 		while ((UEINTX & (1<<RWAL))) {
 401:usb_serial.c  **** 			UEINTX = 0x6B;
 402:usb_serial.c  **** 		}
 403:usb_serial.c  **** 		SREG = intr_state;
 404:usb_serial.c  **** 	}
 405:usb_serial.c  **** }
 406:usb_serial.c  **** 
 407:usb_serial.c  **** // transmit a character.  0 returned on success, -1 on error
 408:usb_serial.c  **** int8_t usb_serial_putchar(uint8_t c)
 409:usb_serial.c  **** {
 410:usb_serial.c  **** 	uint8_t timeout, intr_state;
 411:usb_serial.c  **** 
 412:usb_serial.c  **** 	// if we're not online (enumerated and configured), error
 413:usb_serial.c  **** 	if (!usb_configuration) return -1;
 414:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 415:usb_serial.c  **** 	// used from the main program or interrupt context,
 416:usb_serial.c  **** 	// even both in the same program!
 417:usb_serial.c  **** 	intr_state = SREG;
 418:usb_serial.c  **** 	cli();
 419:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 420:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 421:usb_serial.c  **** 	if (transmit_previous_timeout) {
 422:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 423:usb_serial.c  **** 			SREG = intr_state;
 424:usb_serial.c  **** 			return -1;
 425:usb_serial.c  **** 		}
 426:usb_serial.c  **** 		transmit_previous_timeout = 0;
 427:usb_serial.c  **** 	}
 428:usb_serial.c  **** 	// wait for the FIFO to be ready to accept data
 429:usb_serial.c  **** 	timeout = UDFNUML + TRANSMIT_TIMEOUT;
 430:usb_serial.c  **** 	while (1) {
 431:usb_serial.c  **** 		// are we ready to transmit?
 432:usb_serial.c  **** 		if (UEINTX & (1<<RWAL)) break;
 433:usb_serial.c  **** 		SREG = intr_state;
 434:usb_serial.c  **** 		// have we waited too long?  This happens if the user
 435:usb_serial.c  **** 		// is not running an application that is listening
 436:usb_serial.c  **** 		if (UDFNUML == timeout) {
 437:usb_serial.c  **** 			transmit_previous_timeout = 1;
 438:usb_serial.c  **** 			return -1;
 439:usb_serial.c  **** 		}
 440:usb_serial.c  **** 		// has the USB gone offline?
 441:usb_serial.c  **** 		if (!usb_configuration) return -1;
 442:usb_serial.c  **** 		// get ready to try checking again
 443:usb_serial.c  **** 		intr_state = SREG;
 444:usb_serial.c  **** 		cli();
 445:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 446:usb_serial.c  **** 	}
 447:usb_serial.c  **** 	// actually write the byte into the FIFO
 448:usb_serial.c  **** 	UEDATX = c;
 449:usb_serial.c  **** 	// if this completed a packet, transmit it now!
 450:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 451:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 452:usb_serial.c  **** 	SREG = intr_state;
 453:usb_serial.c  **** 	return 0;
 454:usb_serial.c  **** }
 455:usb_serial.c  **** 
 456:usb_serial.c  **** 
 457:usb_serial.c  **** // transmit a character, but do not wait if the buffer is full,
 458:usb_serial.c  **** //   0 returned on success, -1 on buffer full or error
 459:usb_serial.c  **** int8_t usb_serial_putchar_nowait(uint8_t c)
 460:usb_serial.c  **** {
 461:usb_serial.c  **** 	uint8_t intr_state;
 462:usb_serial.c  **** 
 463:usb_serial.c  **** 	if (!usb_configuration) return -1;
 464:usb_serial.c  **** 	intr_state = SREG;
 465:usb_serial.c  **** 	cli();
 466:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 467:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 468:usb_serial.c  **** 		// buffer is full
 469:usb_serial.c  **** 		SREG = intr_state;
 470:usb_serial.c  **** 		return -1;
 471:usb_serial.c  **** 	}
 472:usb_serial.c  **** 	// actually write the byte into the FIFO
 473:usb_serial.c  **** 	UEDATX = c;
 474:usb_serial.c  **** 		// if this completed a packet, transmit it now!
 475:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 476:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 477:usb_serial.c  **** 	SREG = intr_state;
 478:usb_serial.c  **** 	return 0;
 479:usb_serial.c  **** }
 480:usb_serial.c  **** 
 481:usb_serial.c  **** // transmit a buffer.
 482:usb_serial.c  **** //  0 returned on success, -1 on error
 483:usb_serial.c  **** // This function is optimized for speed!  Each call takes approx 6.1 us overhead
 484:usb_serial.c  **** // plus 0.25 us per byte.  12 Mbit/sec USB has 8.67 us per-packet overhead and
 485:usb_serial.c  **** // takes 0.67 us per byte.  If called with 64 byte packet-size blocks, this function
 486:usb_serial.c  **** // can transmit at full USB speed using 43% CPU time.  The maximum theoretical speed
 487:usb_serial.c  **** // is 19 packets per USB frame, or 1216 kbytes/sec.  However, bulk endpoints have the
 488:usb_serial.c  **** // lowest priority, so any other USB devices will likely reduce the speed.  Speed
 489:usb_serial.c  **** // can also be limited by how quickly the PC-based software reads data, as the host
 490:usb_serial.c  **** // controller in the PC will not allocate bandwitdh without a pending read request.
 491:usb_serial.c  **** // (thanks to Victor Suarez for testing and feedback and initial code)
 492:usb_serial.c  **** 
 493:usb_serial.c  **** int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
 494:usb_serial.c  **** {
 495:usb_serial.c  **** 	uint8_t timeout, intr_state, write_size;
 496:usb_serial.c  **** 
 497:usb_serial.c  **** 	// if we're not online (enumerated and configured), error
 498:usb_serial.c  **** 	if (!usb_configuration) return -1;
 499:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 500:usb_serial.c  **** 	// used from the main program or interrupt context,
 501:usb_serial.c  **** 	// even both in the same program!
 502:usb_serial.c  **** 	intr_state = SREG;
 503:usb_serial.c  **** 	cli();
 504:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 505:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 506:usb_serial.c  **** 	if (transmit_previous_timeout) {
 507:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 508:usb_serial.c  **** 			SREG = intr_state;
 509:usb_serial.c  **** 			return -1;
 510:usb_serial.c  **** 		}
 511:usb_serial.c  **** 		transmit_previous_timeout = 0;
 512:usb_serial.c  **** 	}
 513:usb_serial.c  **** 	// each iteration of this loop transmits a packet
 514:usb_serial.c  **** 	while (size) {
 515:usb_serial.c  **** 		// wait for the FIFO to be ready to accept data
 516:usb_serial.c  **** 		timeout = UDFNUML + TRANSMIT_TIMEOUT;
 517:usb_serial.c  **** 		while (1) {
 518:usb_serial.c  **** 			// are we ready to transmit?
 519:usb_serial.c  **** 			if (UEINTX & (1<<RWAL)) break;
 520:usb_serial.c  **** 			SREG = intr_state;
 521:usb_serial.c  **** 			// have we waited too long?  This happens if the user
 522:usb_serial.c  **** 			// is not running an application that is listening
 523:usb_serial.c  **** 			if (UDFNUML == timeout) {
 524:usb_serial.c  **** 				transmit_previous_timeout = 1;
 525:usb_serial.c  **** 				return -1;
 526:usb_serial.c  **** 			}
 527:usb_serial.c  **** 			// has the USB gone offline?
 528:usb_serial.c  **** 			if (!usb_configuration) return -1;
 529:usb_serial.c  **** 			// get ready to try checking again
 530:usb_serial.c  **** 			intr_state = SREG;
 531:usb_serial.c  **** 			cli();
 532:usb_serial.c  **** 			UENUM = CDC_TX_ENDPOINT;
 533:usb_serial.c  **** 		}
 534:usb_serial.c  **** 
 535:usb_serial.c  **** 		// compute how many bytes will fit into the next packet
 536:usb_serial.c  **** 		write_size = CDC_TX_SIZE - UEBCLX;
 537:usb_serial.c  **** 		if (write_size > size) write_size = size;
 538:usb_serial.c  **** 		size -= write_size;
 539:usb_serial.c  **** 
 540:usb_serial.c  **** 		// write the packet
 541:usb_serial.c  **** 		switch (write_size) {
 542:usb_serial.c  **** 			#if (CDC_TX_SIZE == 64)
 543:usb_serial.c  **** 			case 64: UEDATX = *buffer++;
 544:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 545:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 546:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 547:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 548:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 549:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 550:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 551:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 552:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 553:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 554:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 555:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 556:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 557:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 558:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 559:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 560:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 561:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 562:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 563:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 564:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 565:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 566:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 567:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 568:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 569:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 570:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 571:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 572:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 573:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 574:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 575:usb_serial.c  **** 			#endif
 576:usb_serial.c  **** 			#if (CDC_TX_SIZE >= 32)
 577:usb_serial.c  **** 			case 32: UEDATX = *buffer++;
 578:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 579:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 580:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 581:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 582:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 583:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 584:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 585:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 586:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 587:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 588:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 589:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 590:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 591:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 592:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 593:usb_serial.c  **** 			#endif
 594:usb_serial.c  **** 			#if (CDC_TX_SIZE >= 16)
 595:usb_serial.c  **** 			case 16: UEDATX = *buffer++;
 596:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 597:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 598:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 599:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 600:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 601:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 602:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 603:usb_serial.c  **** 			#endif
 604:usb_serial.c  **** 			case  8: UEDATX = *buffer++;
 605:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 606:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 607:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 608:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 609:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 610:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 611:usb_serial.c  **** 			default:
 612:usb_serial.c  **** 			case  1: UEDATX = *buffer++;
 613:usb_serial.c  **** 			case  0: break;
 614:usb_serial.c  **** 		}
 615:usb_serial.c  **** 		// if this completed a packet, transmit it now!
 616:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 617:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 618:usb_serial.c  **** 		SREG = intr_state;
 619:usb_serial.c  **** 	}
 620:usb_serial.c  **** 	return 0;
 621:usb_serial.c  **** }
 622:usb_serial.c  **** 
 623:usb_serial.c  **** 
 624:usb_serial.c  **** // immediately transmit any buffered output.
 625:usb_serial.c  **** // This doesn't actually transmit the data - that is impossible!
 626:usb_serial.c  **** // USB devices only transmit when the host allows, so the best
 627:usb_serial.c  **** // we can do is release the FIFO buffer for when the host wants it
 628:usb_serial.c  **** void usb_serial_flush_output(void)
 629:usb_serial.c  **** {
 630:usb_serial.c  **** 	uint8_t intr_state;
 631:usb_serial.c  **** 
 632:usb_serial.c  **** 	intr_state = SREG;
 633:usb_serial.c  **** 	cli();
 634:usb_serial.c  **** 	if (transmit_flush_timer) {
 635:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 636:usb_serial.c  **** 		UEINTX = 0x3A;
 637:usb_serial.c  **** 		transmit_flush_timer = 0;
 638:usb_serial.c  **** 	}
 639:usb_serial.c  **** 	SREG = intr_state;
 640:usb_serial.c  **** }
 641:usb_serial.c  **** 
 642:usb_serial.c  **** // functions to read the various async serial settings.  These
 643:usb_serial.c  **** // aren't actually used by USB at all (communication is always
 644:usb_serial.c  **** // at full USB speed), but they are set by the host so we can
 645:usb_serial.c  **** // set them properly if we're converting the USB to a real serial
 646:usb_serial.c  **** // communication
 647:usb_serial.c  **** uint32_t usb_serial_get_baud(void)
 648:usb_serial.c  **** {
 649:usb_serial.c  **** 	return *(uint32_t *)cdc_line_coding;
 650:usb_serial.c  **** }
 651:usb_serial.c  **** uint8_t usb_serial_get_stopbits(void)
 652:usb_serial.c  **** {
 653:usb_serial.c  **** 	return cdc_line_coding[4];
 654:usb_serial.c  **** }
 655:usb_serial.c  **** uint8_t usb_serial_get_paritytype(void)
 656:usb_serial.c  **** {
 657:usb_serial.c  **** 	return cdc_line_coding[5];
 658:usb_serial.c  **** }
 659:usb_serial.c  **** uint8_t usb_serial_get_numbits(void)
 660:usb_serial.c  **** {
 661:usb_serial.c  **** 	return cdc_line_coding[6];
 662:usb_serial.c  **** }
 663:usb_serial.c  **** uint8_t usb_serial_get_control(void)
 664:usb_serial.c  **** {
 665:usb_serial.c  **** 	return cdc_line_rtsdtr;
 666:usb_serial.c  **** }
 667:usb_serial.c  **** // write the control signals, DCD, DSR, RI, etc
 668:usb_serial.c  **** // There is no CTS signal.  If software on the host has transmitted
 669:usb_serial.c  **** // data to you but you haven't been calling the getchar function,
 670:usb_serial.c  **** // it remains buffered (either here or on the host) and can not be
 671:usb_serial.c  **** // lost because you weren't listening at the right time, like it
 672:usb_serial.c  **** // would in real serial communication.
 673:usb_serial.c  **** int8_t usb_serial_set_control(uint8_t signals)
 674:usb_serial.c  **** {
 675:usb_serial.c  **** 	uint8_t intr_state;
 676:usb_serial.c  **** 
 677:usb_serial.c  **** 	intr_state = SREG;
 678:usb_serial.c  **** 	cli();
 679:usb_serial.c  **** 	if (!usb_configuration) {
 680:usb_serial.c  **** 		// we're not enumerated/configured
 681:usb_serial.c  **** 		SREG = intr_state;
 682:usb_serial.c  **** 		return -1;
 683:usb_serial.c  **** 	}
 684:usb_serial.c  **** 
 685:usb_serial.c  **** 	UENUM = CDC_ACM_ENDPOINT;
 686:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 687:usb_serial.c  **** 		// unable to write
 688:usb_serial.c  **** 		// TODO; should this try to abort the previously
 689:usb_serial.c  **** 		// buffered message??
 690:usb_serial.c  **** 		SREG = intr_state;
 691:usb_serial.c  **** 		return -1;
 692:usb_serial.c  **** 	}
 693:usb_serial.c  **** 	UEDATX = 0xA1;
 694:usb_serial.c  **** 	UEDATX = 0x20;
 695:usb_serial.c  **** 	UEDATX = 0;
 696:usb_serial.c  **** 	UEDATX = 0;
 697:usb_serial.c  **** 	UEDATX = 0; // 0 seems to work nicely.  what if this is 1??
 698:usb_serial.c  **** 	UEDATX = 0;
 699:usb_serial.c  **** 	UEDATX = 1;
 700:usb_serial.c  **** 	UEDATX = 0;
 701:usb_serial.c  **** 	UEDATX = signals;
 702:usb_serial.c  **** 	UEINTX = 0x3A;
 703:usb_serial.c  **** 	SREG = intr_state;
 704:usb_serial.c  **** 	return 0;
 705:usb_serial.c  **** }
 706:usb_serial.c  **** 
 707:usb_serial.c  **** 
 708:usb_serial.c  **** 
 709:usb_serial.c  **** /**************************************************************************
 710:usb_serial.c  ****  *
 711:usb_serial.c  ****  *  Private Functions - not intended for general user consumption....
 712:usb_serial.c  ****  *
 713:usb_serial.c  ****  **************************************************************************/
 714:usb_serial.c  **** 
 715:usb_serial.c  **** 
 716:usb_serial.c  **** // USB Device Interrupt - handle all device-level events
 717:usb_serial.c  **** // the transmit buffer flushing is triggered by the start of frame
 718:usb_serial.c  **** //
 719:usb_serial.c  **** ISR(USB_GEN_vect)
 720:usb_serial.c  **** {
 721:usb_serial.c  **** 	uint8_t intbits, t;
 722:usb_serial.c  **** 
 723:usb_serial.c  ****         intbits = UDINT;
 724:usb_serial.c  ****         UDINT = 0;
 725:usb_serial.c  ****         if (intbits & (1<<EORSTI)) {
 726:usb_serial.c  **** 		UENUM = 0;
 727:usb_serial.c  **** 		UECONX = 1;
 728:usb_serial.c  **** 		UECFG0X = EP_TYPE_CONTROL;
 729:usb_serial.c  **** 		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 730:usb_serial.c  **** 		UEIENX = (1<<RXSTPE);
 731:usb_serial.c  **** 		usb_configuration = 0;
 732:usb_serial.c  **** 		cdc_line_rtsdtr = 0;
 733:usb_serial.c  ****         }
 734:usb_serial.c  **** 	if (intbits & (1<<SOFI)) {
 735:usb_serial.c  **** 		if (usb_configuration) {
 736:usb_serial.c  **** 			t = transmit_flush_timer;
 737:usb_serial.c  **** 			if (t) {
 738:usb_serial.c  **** 				transmit_flush_timer = --t;
 739:usb_serial.c  **** 				if (!t) {
 740:usb_serial.c  **** 					UENUM = CDC_TX_ENDPOINT;
 741:usb_serial.c  **** 					UEINTX = 0x3A;
 742:usb_serial.c  **** 				}
 743:usb_serial.c  **** 			}
 744:usb_serial.c  **** 		}
 745:usb_serial.c  **** 	}
 746:usb_serial.c  **** }
 747:usb_serial.c  **** 
 748:usb_serial.c  **** 
 749:usb_serial.c  **** // Misc functions to wait for ready and send/receive packets
 750:usb_serial.c  **** static inline void usb_wait_in_ready(void)
 751:usb_serial.c  **** {
  15               		.loc 1 751 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.L2:
 752:usb_serial.c  **** 	while (!(UEINTX & (1<<TXINI))) ;
  22               		.loc 1 752 33 discriminator 1 view .LVU1
  23               		.loc 1 752 11 is_stmt 0 discriminator 1 view .LVU2
  24 0000 8091 E800 		lds r24,232
  25               		.loc 1 752 8 discriminator 1 view .LVU3
  26 0004 80FF      		sbrs r24,0
  27 0006 00C0      		rjmp .L2
  28               	/* epilogue start */
 753:usb_serial.c  **** }
  29               		.loc 1 753 1 view .LVU4
  30 0008 0895      		ret
  31               		.cfi_endproc
  32               	.LFE17:
  34               		.section	.text.usb_init,"ax",@progbits
  35               	.global	usb_init
  37               	usb_init:
  38               	.LFB1:
 318:usb_serial.c  **** 	HW_CONFIG();
  39               		.loc 1 318 1 is_stmt 1 view -0
  40               		.cfi_startproc
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
 319:usb_serial.c  ****         USB_FREEZE();				// enable USB
  45               		.loc 1 319 2 view .LVU6
  46 0000 81E0      		ldi r24,lo8(1)
  47 0002 8093 D700 		sts 215,r24
 320:usb_serial.c  ****         PLL_CONFIG();				// config PLL, 16 MHz xtal
  48               		.loc 1 320 9 view .LVU7
  49 0006 80EA      		ldi r24,lo8(-96)
  50 0008 8093 D800 		sts 216,r24
 321:usb_serial.c  ****         while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
  51               		.loc 1 321 9 view .LVU8
  52 000c 82E1      		ldi r24,lo8(18)
  53 000e 89BD      		out 0x29,r24
 322:usb_serial.c  ****         USB_CONFIG();				// start USB clock
  54               		.loc 1 322 9 view .LVU9
  55               	.L6:
 322:usb_serial.c  ****         USB_CONFIG();				// start USB clock
  56               		.loc 1 322 40 discriminator 1 view .LVU10
 322:usb_serial.c  ****         USB_CONFIG();				// start USB clock
  57               		.loc 1 322 15 is_stmt 0 discriminator 1 view .LVU11
  58 0010 09B4      		in __tmp_reg__,0x29
  59 0012 00FE      		sbrs __tmp_reg__,0
  60 0014 00C0      		rjmp .L6
 323:usb_serial.c  ****         UDCON = 0;				// enable attach resistor
  61               		.loc 1 323 9 is_stmt 1 view .LVU12
  62 0016 80E9      		ldi r24,lo8(-112)
  63 0018 8093 D800 		sts 216,r24
 324:usb_serial.c  **** 	usb_configuration = 0;
  64               		.loc 1 324 9 view .LVU13
 324:usb_serial.c  **** 	usb_configuration = 0;
  65               		.loc 1 324 15 is_stmt 0 view .LVU14
  66 001c 1092 E000 		sts 224,__zero_reg__
 325:usb_serial.c  **** 	cdc_line_rtsdtr = 0;
  67               		.loc 1 325 2 is_stmt 1 view .LVU15
 325:usb_serial.c  **** 	cdc_line_rtsdtr = 0;
  68               		.loc 1 325 20 is_stmt 0 view .LVU16
  69 0020 1092 0000 		sts usb_configuration,__zero_reg__
 326:usb_serial.c  ****         UDIEN = (1<<EORSTE)|(1<<SOFE);
  70               		.loc 1 326 2 is_stmt 1 view .LVU17
 326:usb_serial.c  ****         UDIEN = (1<<EORSTE)|(1<<SOFE);
  71               		.loc 1 326 18 is_stmt 0 view .LVU18
  72 0024 1092 0000 		sts cdc_line_rtsdtr,__zero_reg__
 327:usb_serial.c  **** 	sei();
  73               		.loc 1 327 9 is_stmt 1 view .LVU19
 327:usb_serial.c  **** 	sei();
  74               		.loc 1 327 15 is_stmt 0 view .LVU20
  75 0028 8CE0      		ldi r24,lo8(12)
  76 002a 8093 E200 		sts 226,r24
 328:usb_serial.c  **** }
  77               		.loc 1 328 2 is_stmt 1 view .LVU21
  78               	/* #APP */
  79               	 ;  328 "usb_serial.c" 1
  80 002e 7894      		sei
  81               	 ;  0 "" 2
  82               	/* #NOAPP */
  83               	/* epilogue start */
 329:usb_serial.c  **** 
  84               		.loc 1 329 1 is_stmt 0 view .LVU22
  85 0030 0895      		ret
  86               		.cfi_endproc
  87               	.LFE1:
  89               		.section	.text.usb_configured,"ax",@progbits
  90               	.global	usb_configured
  92               	usb_configured:
  93               	.LFB2:
 334:usb_serial.c  **** 	return usb_configuration;
  94               		.loc 1 334 1 is_stmt 1 view -0
  95               		.cfi_startproc
  96               	/* prologue: function */
  97               	/* frame size = 0 */
  98               	/* stack size = 0 */
  99               	.L__stack_usage = 0
 335:usb_serial.c  **** }
 100               		.loc 1 335 2 view .LVU24
 335:usb_serial.c  **** }
 101               		.loc 1 335 9 is_stmt 0 view .LVU25
 102 0000 8091 0000 		lds r24,usb_configuration
 103               	/* epilogue start */
 336:usb_serial.c  **** 
 104               		.loc 1 336 1 view .LVU26
 105 0004 0895      		ret
 106               		.cfi_endproc
 107               	.LFE2:
 109               		.section	.text.usb_serial_getchar,"ax",@progbits
 110               	.global	usb_serial_getchar
 112               	usb_serial_getchar:
 113               	.LFB3:
 340:usb_serial.c  **** 	uint8_t c, intr_state;
 114               		.loc 1 340 1 is_stmt 1 view -0
 115               		.cfi_startproc
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
 341:usb_serial.c  **** 
 120               		.loc 1 341 2 view .LVU28
 346:usb_serial.c  **** 	cli();
 121               		.loc 1 346 2 view .LVU29
 346:usb_serial.c  **** 	cli();
 122               		.loc 1 346 13 is_stmt 0 view .LVU30
 123 0000 9FB7      		in r25,__SREG__
 124               	.LVL0:
 347:usb_serial.c  **** 	if (!usb_configuration) {
 125               		.loc 1 347 2 is_stmt 1 view .LVU31
 126               	/* #APP */
 127               	 ;  347 "usb_serial.c" 1
 128 0002 F894      		cli
 129               	 ;  0 "" 2
 348:usb_serial.c  **** 		SREG = intr_state;
 130               		.loc 1 348 2 view .LVU32
 348:usb_serial.c  **** 		SREG = intr_state;
 131               		.loc 1 348 6 is_stmt 0 view .LVU33
 132               	/* #NOAPP */
 133 0004 8091 0000 		lds r24,usb_configuration
 348:usb_serial.c  **** 		SREG = intr_state;
 134               		.loc 1 348 5 view .LVU34
 135 0008 8111      		cpse r24,__zero_reg__
 136 000a 00C0      		rjmp .L11
 137               	.L15:
 361:usb_serial.c  **** 		return -1;
 138               		.loc 1 361 3 is_stmt 1 view .LVU35
 361:usb_serial.c  **** 		return -1;
 139               		.loc 1 361 8 is_stmt 0 view .LVU36
 140 000c 9FBF      		out __SREG__,r25
 362:usb_serial.c  **** 	}
 141               		.loc 1 362 3 is_stmt 1 view .LVU37
 362:usb_serial.c  **** 	}
 142               		.loc 1 362 10 is_stmt 0 view .LVU38
 143 000e 8FEF      		ldi r24,lo8(-1)
 144 0010 9FEF      		ldi r25,lo8(-1)
 145 0012 0895      		ret
 146               	.L11:
 352:usb_serial.c  **** 	retry:
 147               		.loc 1 352 2 is_stmt 1 view .LVU39
 352:usb_serial.c  **** 	retry:
 148               		.loc 1 352 8 is_stmt 0 view .LVU40
 149 0014 83E0      		ldi r24,lo8(3)
 150 0016 8093 E900 		sts 233,r24
 358:usb_serial.c  **** 			goto retry;
 151               		.loc 1 358 11 view .LVU41
 152 001a 2BE6      		ldi r18,lo8(107)
 153               	.L13:
 354:usb_serial.c  **** 	if (!(c & (1<<RWAL))) {
 154               		.loc 1 354 2 is_stmt 1 view .LVU42
 354:usb_serial.c  **** 	if (!(c & (1<<RWAL))) {
 155               		.loc 1 354 4 is_stmt 0 view .LVU43
 156 001c 8091 E800 		lds r24,232
 157               	.LVL1:
 355:usb_serial.c  **** 		// no data in buffer
 158               		.loc 1 355 2 is_stmt 1 view .LVU44
 355:usb_serial.c  **** 		// no data in buffer
 159               		.loc 1 355 5 is_stmt 0 view .LVU45
 160 0020 85FD      		sbrc r24,5
 161 0022 00C0      		rjmp .L14
 357:usb_serial.c  **** 			UEINTX = 0x6B;
 162               		.loc 1 357 3 is_stmt 1 view .LVU46
 357:usb_serial.c  **** 			UEINTX = 0x6B;
 163               		.loc 1 357 6 is_stmt 0 view .LVU47
 164 0024 82FF      		sbrs r24,2
 165 0026 00C0      		rjmp .L15
 358:usb_serial.c  **** 			goto retry;
 166               		.loc 1 358 4 is_stmt 1 view .LVU48
 358:usb_serial.c  **** 			goto retry;
 167               		.loc 1 358 11 is_stmt 0 view .LVU49
 168 0028 2093 E800 		sts 232,r18
 359:usb_serial.c  **** 		}
 169               		.loc 1 359 4 is_stmt 1 view .LVU50
 170 002c 00C0      		rjmp .L13
 171               	.L14:
 365:usb_serial.c  **** 	// if buffer completely used, release it
 172               		.loc 1 365 2 view .LVU51
 365:usb_serial.c  **** 	// if buffer completely used, release it
 173               		.loc 1 365 4 is_stmt 0 view .LVU52
 174 002e 8091 F100 		lds r24,241
 175               	.LVL2:
 367:usb_serial.c  **** 	SREG = intr_state;
 176               		.loc 1 367 2 is_stmt 1 view .LVU53
 367:usb_serial.c  **** 	SREG = intr_state;
 177               		.loc 1 367 8 is_stmt 0 view .LVU54
 178 0032 2091 E800 		lds r18,232
 367:usb_serial.c  **** 	SREG = intr_state;
 179               		.loc 1 367 5 view .LVU55
 180 0036 25FD      		sbrc r18,5
 181 0038 00C0      		rjmp .L16
 367:usb_serial.c  **** 	SREG = intr_state;
 182               		.loc 1 367 29 is_stmt 1 discriminator 1 view .LVU56
 367:usb_serial.c  **** 	SREG = intr_state;
 183               		.loc 1 367 36 is_stmt 0 discriminator 1 view .LVU57
 184 003a 2BE6      		ldi r18,lo8(107)
 185 003c 2093 E800 		sts 232,r18
 186               	.L16:
 368:usb_serial.c  **** 	return c;
 187               		.loc 1 368 2 is_stmt 1 view .LVU58
 368:usb_serial.c  **** 	return c;
 188               		.loc 1 368 7 is_stmt 0 view .LVU59
 189 0040 9FBF      		out __SREG__,r25
 369:usb_serial.c  **** }
 190               		.loc 1 369 2 is_stmt 1 view .LVU60
 369:usb_serial.c  **** }
 191               		.loc 1 369 9 is_stmt 0 view .LVU61
 192 0042 90E0      		ldi r25,0
 193               	.LVL3:
 194               	/* epilogue start */
 370:usb_serial.c  **** 
 195               		.loc 1 370 1 view .LVU62
 196 0044 0895      		ret
 197               		.cfi_endproc
 198               	.LFE3:
 200               		.section	.text.usb_serial_available,"ax",@progbits
 201               	.global	usb_serial_available
 203               	usb_serial_available:
 204               	.LFB4:
 374:usb_serial.c  **** 	uint8_t n=0, i, intr_state;
 205               		.loc 1 374 1 is_stmt 1 view -0
 206               		.cfi_startproc
 207               	/* prologue: function */
 208               	/* frame size = 0 */
 209               	/* stack size = 0 */
 210               	.L__stack_usage = 0
 375:usb_serial.c  **** 
 211               		.loc 1 375 2 view .LVU64
 212               	.LVL4:
 377:usb_serial.c  **** 	cli();
 213               		.loc 1 377 2 view .LVU65
 377:usb_serial.c  **** 	cli();
 214               		.loc 1 377 13 is_stmt 0 view .LVU66
 215 0000 2FB7      		in r18,__SREG__
 216               	.LVL5:
 378:usb_serial.c  **** 	if (usb_configuration) {
 217               		.loc 1 378 2 is_stmt 1 view .LVU67
 218               	/* #APP */
 219               	 ;  378 "usb_serial.c" 1
 220 0002 F894      		cli
 221               	 ;  0 "" 2
 379:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 222               		.loc 1 379 2 view .LVU68
 379:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 223               		.loc 1 379 6 is_stmt 0 view .LVU69
 224               	/* #NOAPP */
 225 0004 8091 0000 		lds r24,usb_configuration
 379:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 226               		.loc 1 379 5 view .LVU70
 227 0008 8111      		cpse r24,__zero_reg__
 228 000a 00C0      		rjmp .L18
 229               	.LVL6:
 230               	.L20:
 375:usb_serial.c  **** 
 231               		.loc 1 375 10 view .LVU71
 232 000c 80E0      		ldi r24,0
 233               	.L19:
 234               	.LVL7:
 387:usb_serial.c  **** 	return n;
 235               		.loc 1 387 2 is_stmt 1 view .LVU72
 387:usb_serial.c  **** 	return n;
 236               		.loc 1 387 7 is_stmt 0 view .LVU73
 237 000e 2FBF      		out __SREG__,r18
 388:usb_serial.c  **** }
 238               		.loc 1 388 2 is_stmt 1 view .LVU74
 239               	/* epilogue start */
 389:usb_serial.c  **** 
 240               		.loc 1 389 1 is_stmt 0 view .LVU75
 241 0010 0895      		ret
 242               	.LVL8:
 243               	.L18:
 380:usb_serial.c  **** 		n = UEBCLX;
 244               		.loc 1 380 3 is_stmt 1 view .LVU76
 380:usb_serial.c  **** 		n = UEBCLX;
 245               		.loc 1 380 9 is_stmt 0 view .LVU77
 246 0012 83E0      		ldi r24,lo8(3)
 247 0014 8093 E900 		sts 233,r24
 381:usb_serial.c  **** 		if (!n) {
 248               		.loc 1 381 3 is_stmt 1 view .LVU78
 381:usb_serial.c  **** 		if (!n) {
 249               		.loc 1 381 5 is_stmt 0 view .LVU79
 250 0018 8091 F200 		lds r24,242
 251               	.LVL9:
 382:usb_serial.c  **** 			i = UEINTX;
 252               		.loc 1 382 3 is_stmt 1 view .LVU80
 382:usb_serial.c  **** 			i = UEINTX;
 253               		.loc 1 382 6 is_stmt 0 view .LVU81
 254 001c 8111      		cpse r24,__zero_reg__
 255 001e 00C0      		rjmp .L19
 383:usb_serial.c  **** 			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
 256               		.loc 1 383 4 is_stmt 1 view .LVU82
 383:usb_serial.c  **** 			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
 257               		.loc 1 383 6 is_stmt 0 view .LVU83
 258 0020 9091 E800 		lds r25,232
 259               	.LVL10:
 384:usb_serial.c  **** 		}
 260               		.loc 1 384 4 is_stmt 1 view .LVU84
 384:usb_serial.c  **** 		}
 261               		.loc 1 384 7 is_stmt 0 view .LVU85
 262 0024 92FF      		sbrs r25,2
 263 0026 00C0      		rjmp .L20
 384:usb_serial.c  **** 		}
 264               		.loc 1 384 24 discriminator 1 view .LVU86
 265 0028 95FD      		sbrc r25,5
 266 002a 00C0      		rjmp .L20
 384:usb_serial.c  **** 		}
 267               		.loc 1 384 45 is_stmt 1 discriminator 2 view .LVU87
 384:usb_serial.c  **** 		}
 268               		.loc 1 384 52 is_stmt 0 discriminator 2 view .LVU88
 269 002c 9BE6      		ldi r25,lo8(107)
 270               	.LVL11:
 384:usb_serial.c  **** 		}
 271               		.loc 1 384 52 discriminator 2 view .LVU89
 272 002e 9093 E800 		sts 232,r25
 273 0032 00C0      		rjmp .L19
 274               		.cfi_endproc
 275               	.LFE4:
 277               		.section	.text.usb_serial_flush_input,"ax",@progbits
 278               	.global	usb_serial_flush_input
 280               	usb_serial_flush_input:
 281               	.LFB5:
 393:usb_serial.c  **** 	uint8_t intr_state;
 282               		.loc 1 393 1 is_stmt 1 view -0
 283               		.cfi_startproc
 284               	/* prologue: function */
 285               	/* frame size = 0 */
 286               	/* stack size = 0 */
 287               	.L__stack_usage = 0
 394:usb_serial.c  **** 
 288               		.loc 1 394 2 view .LVU91
 396:usb_serial.c  **** 		intr_state = SREG;
 289               		.loc 1 396 2 view .LVU92
 396:usb_serial.c  **** 		intr_state = SREG;
 290               		.loc 1 396 6 is_stmt 0 view .LVU93
 291 0000 8091 0000 		lds r24,usb_configuration
 396:usb_serial.c  **** 		intr_state = SREG;
 292               		.loc 1 396 5 view .LVU94
 293 0004 8823      		tst r24
 294 0006 01F0      		breq .L24
 397:usb_serial.c  **** 		cli();
 295               		.loc 1 397 3 is_stmt 1 view .LVU95
 397:usb_serial.c  **** 		cli();
 296               		.loc 1 397 14 is_stmt 0 view .LVU96
 297 0008 8FB7      		in r24,__SREG__
 298               	.LVL12:
 398:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 299               		.loc 1 398 3 is_stmt 1 view .LVU97
 300               	/* #APP */
 301               	 ;  398 "usb_serial.c" 1
 302 000a F894      		cli
 303               	 ;  0 "" 2
 399:usb_serial.c  **** 		while ((UEINTX & (1<<RWAL))) {
 304               		.loc 1 399 3 view .LVU98
 399:usb_serial.c  **** 		while ((UEINTX & (1<<RWAL))) {
 305               		.loc 1 399 9 is_stmt 0 view .LVU99
 306               	/* #NOAPP */
 307 000c 93E0      		ldi r25,lo8(3)
 308 000e 9093 E900 		sts 233,r25
 400:usb_serial.c  **** 			UEINTX = 0x6B;
 309               		.loc 1 400 3 is_stmt 1 view .LVU100
 401:usb_serial.c  **** 		}
 310               		.loc 1 401 11 is_stmt 0 view .LVU101
 311 0012 2BE6      		ldi r18,lo8(107)
 312               	.L26:
 400:usb_serial.c  **** 			UEINTX = 0x6B;
 313               		.loc 1 400 11 view .LVU102
 314 0014 9091 E800 		lds r25,232
 400:usb_serial.c  **** 			UEINTX = 0x6B;
 315               		.loc 1 400 9 view .LVU103
 316 0018 95FD      		sbrc r25,5
 317 001a 00C0      		rjmp .L27
 403:usb_serial.c  **** 	}
 318               		.loc 1 403 3 is_stmt 1 view .LVU104
 403:usb_serial.c  **** 	}
 319               		.loc 1 403 8 is_stmt 0 view .LVU105
 320 001c 8FBF      		out __SREG__,r24
 321               	.LVL13:
 322               	.L24:
 323               	/* epilogue start */
 405:usb_serial.c  **** 
 324               		.loc 1 405 1 view .LVU106
 325 001e 0895      		ret
 326               	.LVL14:
 327               	.L27:
 401:usb_serial.c  **** 		}
 328               		.loc 1 401 4 is_stmt 1 view .LVU107
 401:usb_serial.c  **** 		}
 329               		.loc 1 401 11 is_stmt 0 view .LVU108
 330 0020 2093 E800 		sts 232,r18
 331 0024 00C0      		rjmp .L26
 332               		.cfi_endproc
 333               	.LFE5:
 335               		.section	.text.usb_serial_putchar,"ax",@progbits
 336               	.global	usb_serial_putchar
 338               	usb_serial_putchar:
 339               	.LVL15:
 340               	.LFB6:
 409:usb_serial.c  **** 	uint8_t timeout, intr_state;
 341               		.loc 1 409 1 is_stmt 1 view -0
 342               		.cfi_startproc
 343               	/* prologue: function */
 344               	/* frame size = 0 */
 345               	/* stack size = 0 */
 346               	.L__stack_usage = 0
 410:usb_serial.c  **** 
 347               		.loc 1 410 2 view .LVU110
 413:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 348               		.loc 1 413 2 view .LVU111
 413:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 349               		.loc 1 413 6 is_stmt 0 view .LVU112
 350 0000 9091 0000 		lds r25,usb_configuration
 413:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 351               		.loc 1 413 5 view .LVU113
 352 0004 9111      		cpse r25,__zero_reg__
 353 0006 00C0      		rjmp .L32
 354               	.LVL16:
 355               	.L47:
 424:usb_serial.c  **** 		}
 356               		.loc 1 424 4 is_stmt 1 view .LVU114
 424:usb_serial.c  **** 		}
 357               		.loc 1 424 11 is_stmt 0 view .LVU115
 358 0008 8FEF      		ldi r24,lo8(-1)
 359 000a 0895      		ret
 360               	.LVL17:
 361               	.L32:
 417:usb_serial.c  **** 	cli();
 362               		.loc 1 417 2 is_stmt 1 view .LVU116
 417:usb_serial.c  **** 	cli();
 363               		.loc 1 417 13 is_stmt 0 view .LVU117
 364 000c 9FB7      		in r25,__SREG__
 365               	.LVL18:
 418:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 366               		.loc 1 418 2 is_stmt 1 view .LVU118
 367               	/* #APP */
 368               	 ;  418 "usb_serial.c" 1
 369 000e F894      		cli
 370               	 ;  0 "" 2
 419:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 371               		.loc 1 419 2 view .LVU119
 419:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 372               		.loc 1 419 8 is_stmt 0 view .LVU120
 373               	/* #NOAPP */
 374 0010 24E0      		ldi r18,lo8(4)
 375 0012 2093 E900 		sts 233,r18
 421:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 376               		.loc 1 421 2 is_stmt 1 view .LVU121
 421:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 377               		.loc 1 421 5 is_stmt 0 view .LVU122
 378 0016 2091 0000 		lds r18,transmit_previous_timeout
 379 001a 2223      		tst r18
 380 001c 01F0      		breq .L34
 422:usb_serial.c  **** 			SREG = intr_state;
 381               		.loc 1 422 3 is_stmt 1 view .LVU123
 422:usb_serial.c  **** 			SREG = intr_state;
 382               		.loc 1 422 9 is_stmt 0 view .LVU124
 383 001e 2091 E800 		lds r18,232
 422:usb_serial.c  **** 			SREG = intr_state;
 384               		.loc 1 422 6 view .LVU125
 385 0022 25FD      		sbrc r18,5
 386 0024 00C0      		rjmp .L35
 423:usb_serial.c  **** 			return -1;
 387               		.loc 1 423 4 is_stmt 1 view .LVU126
 423:usb_serial.c  **** 			return -1;
 388               		.loc 1 423 9 is_stmt 0 view .LVU127
 389 0026 9FBF      		out __SREG__,r25
 390 0028 00C0      		rjmp .L47
 391               	.L35:
 426:usb_serial.c  **** 	}
 392               		.loc 1 426 3 is_stmt 1 view .LVU128
 426:usb_serial.c  **** 	}
 393               		.loc 1 426 29 is_stmt 0 view .LVU129
 394 002a 1092 0000 		sts transmit_previous_timeout,__zero_reg__
 395               	.L34:
 429:usb_serial.c  **** 	while (1) {
 396               		.loc 1 429 2 is_stmt 1 view .LVU130
 429:usb_serial.c  **** 	while (1) {
 397               		.loc 1 429 12 is_stmt 0 view .LVU131
 398 002e 2091 E400 		lds r18,228
 429:usb_serial.c  **** 	while (1) {
 399               		.loc 1 429 10 view .LVU132
 400 0032 275E      		subi r18,lo8(-(25))
 401               	.LVL19:
 445:usb_serial.c  **** 	}
 402               		.loc 1 445 9 view .LVU133
 403 0034 34E0      		ldi r19,lo8(4)
 404               	.L39:
 430:usb_serial.c  **** 		// are we ready to transmit?
 405               		.loc 1 430 2 is_stmt 1 view .LVU134
 432:usb_serial.c  **** 		SREG = intr_state;
 406               		.loc 1 432 3 view .LVU135
 432:usb_serial.c  **** 		SREG = intr_state;
 407               		.loc 1 432 7 is_stmt 0 view .LVU136
 408 0036 4091 E800 		lds r20,232
 432:usb_serial.c  **** 		SREG = intr_state;
 409               		.loc 1 432 6 view .LVU137
 410 003a 45FD      		sbrc r20,5
 411 003c 00C0      		rjmp .L36
 433:usb_serial.c  **** 		// have we waited too long?  This happens if the user
 412               		.loc 1 433 3 is_stmt 1 view .LVU138
 433:usb_serial.c  **** 		// have we waited too long?  This happens if the user
 413               		.loc 1 433 8 is_stmt 0 view .LVU139
 414 003e 9FBF      		out __SREG__,r25
 436:usb_serial.c  **** 			transmit_previous_timeout = 1;
 415               		.loc 1 436 3 is_stmt 1 view .LVU140
 436:usb_serial.c  **** 			transmit_previous_timeout = 1;
 416               		.loc 1 436 7 is_stmt 0 view .LVU141
 417 0040 9091 E400 		lds r25,228
 418               	.LVL20:
 436:usb_serial.c  **** 			transmit_previous_timeout = 1;
 419               		.loc 1 436 6 view .LVU142
 420 0044 9213      		cpse r25,r18
 421 0046 00C0      		rjmp .L37
 437:usb_serial.c  **** 			return -1;
 422               		.loc 1 437 4 is_stmt 1 view .LVU143
 437:usb_serial.c  **** 			return -1;
 423               		.loc 1 437 30 is_stmt 0 view .LVU144
 424 0048 81E0      		ldi r24,lo8(1)
 425               	.LVL21:
 437:usb_serial.c  **** 			return -1;
 426               		.loc 1 437 30 view .LVU145
 427 004a 8093 0000 		sts transmit_previous_timeout,r24
 428               	.LVL22:
 438:usb_serial.c  **** 		}
 429               		.loc 1 438 4 is_stmt 1 view .LVU146
 430 004e 00C0      		rjmp .L47
 431               	.LVL23:
 432               	.L37:
 441:usb_serial.c  **** 		// get ready to try checking again
 433               		.loc 1 441 3 view .LVU147
 441:usb_serial.c  **** 		// get ready to try checking again
 434               		.loc 1 441 7 is_stmt 0 view .LVU148
 435 0050 9091 0000 		lds r25,usb_configuration
 441:usb_serial.c  **** 		// get ready to try checking again
 436               		.loc 1 441 6 view .LVU149
 437 0054 9923      		tst r25
 438 0056 01F0      		breq .L47
 443:usb_serial.c  **** 		cli();
 439               		.loc 1 443 3 is_stmt 1 view .LVU150
 443:usb_serial.c  **** 		cli();
 440               		.loc 1 443 14 is_stmt 0 view .LVU151
 441 0058 9FB7      		in r25,__SREG__
 442               	.LVL24:
 444:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 443               		.loc 1 444 3 is_stmt 1 view .LVU152
 444               	/* #APP */
 445               	 ;  444 "usb_serial.c" 1
 446 005a F894      		cli
 447               	 ;  0 "" 2
 445:usb_serial.c  **** 	}
 448               		.loc 1 445 3 view .LVU153
 445:usb_serial.c  **** 	}
 449               		.loc 1 445 9 is_stmt 0 view .LVU154
 450               	/* #NOAPP */
 451 005c 3093 E900 		sts 233,r19
 432:usb_serial.c  **** 		SREG = intr_state;
 452               		.loc 1 432 6 view .LVU155
 453 0060 00C0      		rjmp .L39
 454               	.L36:
 448:usb_serial.c  **** 	// if this completed a packet, transmit it now!
 455               		.loc 1 448 2 is_stmt 1 view .LVU156
 448:usb_serial.c  **** 	// if this completed a packet, transmit it now!
 456               		.loc 1 448 9 is_stmt 0 view .LVU157
 457 0062 8093 F100 		sts 241,r24
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 458               		.loc 1 450 2 is_stmt 1 view .LVU158
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 459               		.loc 1 450 8 is_stmt 0 view .LVU159
 460 0066 8091 E800 		lds r24,232
 461               	.LVL25:
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 462               		.loc 1 450 5 view .LVU160
 463 006a 85FD      		sbrc r24,5
 464 006c 00C0      		rjmp .L40
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 465               		.loc 1 450 29 is_stmt 1 discriminator 1 view .LVU161
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 466               		.loc 1 450 36 is_stmt 0 discriminator 1 view .LVU162
 467 006e 8AE3      		ldi r24,lo8(58)
 468 0070 8093 E800 		sts 232,r24
 469               	.LVL26:
 470               	.L40:
 451:usb_serial.c  **** 	SREG = intr_state;
 471               		.loc 1 451 2 is_stmt 1 view .LVU163
 451:usb_serial.c  **** 	SREG = intr_state;
 472               		.loc 1 451 23 is_stmt 0 view .LVU164
 473 0074 85E0      		ldi r24,lo8(5)
 474 0076 8093 0000 		sts transmit_flush_timer,r24
 452:usb_serial.c  **** 	return 0;
 475               		.loc 1 452 2 is_stmt 1 view .LVU165
 452:usb_serial.c  **** 	return 0;
 476               		.loc 1 452 7 is_stmt 0 view .LVU166
 477 007a 9FBF      		out __SREG__,r25
 453:usb_serial.c  **** }
 478               		.loc 1 453 2 is_stmt 1 view .LVU167
 453:usb_serial.c  **** }
 479               		.loc 1 453 9 is_stmt 0 view .LVU168
 480 007c 80E0      		ldi r24,0
 481               	/* epilogue start */
 454:usb_serial.c  **** 
 482               		.loc 1 454 1 view .LVU169
 483 007e 0895      		ret
 484               		.cfi_endproc
 485               	.LFE6:
 487               		.section	.text.usb_serial_putchar_nowait,"ax",@progbits
 488               	.global	usb_serial_putchar_nowait
 490               	usb_serial_putchar_nowait:
 491               	.LVL27:
 492               	.LFB7:
 460:usb_serial.c  **** 	uint8_t intr_state;
 493               		.loc 1 460 1 is_stmt 1 view -0
 494               		.cfi_startproc
 495               	/* prologue: function */
 496               	/* frame size = 0 */
 497               	/* stack size = 0 */
 498               	.L__stack_usage = 0
 461:usb_serial.c  **** 
 499               		.loc 1 461 2 view .LVU171
 463:usb_serial.c  **** 	intr_state = SREG;
 500               		.loc 1 463 2 view .LVU172
 463:usb_serial.c  **** 	intr_state = SREG;
 501               		.loc 1 463 6 is_stmt 0 view .LVU173
 502 0000 9091 0000 		lds r25,usb_configuration
 463:usb_serial.c  **** 	intr_state = SREG;
 503               		.loc 1 463 5 view .LVU174
 504 0004 9923      		tst r25
 505 0006 01F0      		breq .L52
 464:usb_serial.c  **** 	cli();
 506               		.loc 1 464 2 is_stmt 1 view .LVU175
 464:usb_serial.c  **** 	cli();
 507               		.loc 1 464 13 is_stmt 0 view .LVU176
 508 0008 9FB7      		in r25,__SREG__
 509               	.LVL28:
 465:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 510               		.loc 1 465 2 is_stmt 1 view .LVU177
 511               	/* #APP */
 512               	 ;  465 "usb_serial.c" 1
 513 000a F894      		cli
 514               	 ;  0 "" 2
 466:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 515               		.loc 1 466 2 view .LVU178
 466:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 516               		.loc 1 466 8 is_stmt 0 view .LVU179
 517               	/* #NOAPP */
 518 000c 24E0      		ldi r18,lo8(4)
 519 000e 2093 E900 		sts 233,r18
 467:usb_serial.c  **** 		// buffer is full
 520               		.loc 1 467 2 is_stmt 1 view .LVU180
 467:usb_serial.c  **** 		// buffer is full
 521               		.loc 1 467 8 is_stmt 0 view .LVU181
 522 0012 2091 E800 		lds r18,232
 467:usb_serial.c  **** 		// buffer is full
 523               		.loc 1 467 5 view .LVU182
 524 0016 25FD      		sbrc r18,5
 525 0018 00C0      		rjmp .L50
 469:usb_serial.c  **** 		return -1;
 526               		.loc 1 469 3 is_stmt 1 view .LVU183
 469:usb_serial.c  **** 		return -1;
 527               		.loc 1 469 8 is_stmt 0 view .LVU184
 528 001a 9FBF      		out __SREG__,r25
 470:usb_serial.c  **** 	}
 529               		.loc 1 470 3 is_stmt 1 view .LVU185
 530               	.LVL29:
 531               	.L52:
 463:usb_serial.c  **** 	intr_state = SREG;
 532               		.loc 1 463 33 is_stmt 0 view .LVU186
 533 001c 8FEF      		ldi r24,lo8(-1)
 534               	.LVL30:
 535               	/* epilogue start */
 479:usb_serial.c  **** 
 536               		.loc 1 479 1 view .LVU187
 537 001e 0895      		ret
 538               	.LVL31:
 539               	.L50:
 473:usb_serial.c  **** 		// if this completed a packet, transmit it now!
 540               		.loc 1 473 2 is_stmt 1 view .LVU188
 473:usb_serial.c  **** 		// if this completed a packet, transmit it now!
 541               		.loc 1 473 9 is_stmt 0 view .LVU189
 542 0020 8093 F100 		sts 241,r24
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 543               		.loc 1 475 2 is_stmt 1 view .LVU190
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 544               		.loc 1 475 8 is_stmt 0 view .LVU191
 545 0024 8091 E800 		lds r24,232
 546               	.LVL32:
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 547               		.loc 1 475 5 view .LVU192
 548 0028 85FD      		sbrc r24,5
 549 002a 00C0      		rjmp .L51
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 550               		.loc 1 475 29 is_stmt 1 discriminator 1 view .LVU193
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 551               		.loc 1 475 36 is_stmt 0 discriminator 1 view .LVU194
 552 002c 8AE3      		ldi r24,lo8(58)
 553 002e 8093 E800 		sts 232,r24
 554               	.LVL33:
 555               	.L51:
 476:usb_serial.c  **** 	SREG = intr_state;
 556               		.loc 1 476 2 is_stmt 1 view .LVU195
 476:usb_serial.c  **** 	SREG = intr_state;
 557               		.loc 1 476 23 is_stmt 0 view .LVU196
 558 0032 85E0      		ldi r24,lo8(5)
 559 0034 8093 0000 		sts transmit_flush_timer,r24
 477:usb_serial.c  **** 	return 0;
 560               		.loc 1 477 2 is_stmt 1 view .LVU197
 477:usb_serial.c  **** 	return 0;
 561               		.loc 1 477 7 is_stmt 0 view .LVU198
 562 0038 9FBF      		out __SREG__,r25
 478:usb_serial.c  **** }
 563               		.loc 1 478 2 is_stmt 1 view .LVU199
 478:usb_serial.c  **** }
 564               		.loc 1 478 9 is_stmt 0 view .LVU200
 565 003a 80E0      		ldi r24,0
 566 003c 0895      		ret
 567               		.cfi_endproc
 568               	.LFE7:
 570               		.section	.text.usb_serial_write,"ax",@progbits
 571               	.global	usb_serial_write
 573               	usb_serial_write:
 574               	.LVL34:
 575               	.LFB8:
 494:usb_serial.c  **** 	uint8_t timeout, intr_state, write_size;
 576               		.loc 1 494 1 is_stmt 1 view -0
 577               		.cfi_startproc
 578               	/* prologue: function */
 579               	/* frame size = 0 */
 580               	/* stack size = 0 */
 581               	.L__stack_usage = 0
 495:usb_serial.c  **** 
 582               		.loc 1 495 2 view .LVU202
 498:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 583               		.loc 1 498 2 view .LVU203
 498:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 584               		.loc 1 498 6 is_stmt 0 view .LVU204
 585 0000 2091 0000 		lds r18,usb_configuration
 498:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 586               		.loc 1 498 5 view .LVU205
 587 0004 2111      		cpse r18,__zero_reg__
 588 0006 00C0      		rjmp .L54
 589               	.LVL35:
 590               	.L138:
 509:usb_serial.c  **** 		}
 591               		.loc 1 509 4 is_stmt 1 view .LVU206
 509:usb_serial.c  **** 		}
 592               		.loc 1 509 11 is_stmt 0 view .LVU207
 593 0008 8FEF      		ldi r24,lo8(-1)
 594 000a 0895      		ret
 595               	.LVL36:
 596               	.L54:
 502:usb_serial.c  **** 	cli();
 597               		.loc 1 502 2 is_stmt 1 view .LVU208
 502:usb_serial.c  **** 	cli();
 598               		.loc 1 502 13 is_stmt 0 view .LVU209
 599 000c 2FB7      		in r18,__SREG__
 600               	.LVL37:
 503:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 601               		.loc 1 503 2 is_stmt 1 view .LVU210
 602               	/* #APP */
 603               	 ;  503 "usb_serial.c" 1
 604 000e F894      		cli
 605               	 ;  0 "" 2
 504:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 606               		.loc 1 504 2 view .LVU211
 504:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 607               		.loc 1 504 8 is_stmt 0 view .LVU212
 608               	/* #NOAPP */
 609 0010 34E0      		ldi r19,lo8(4)
 610 0012 3093 E900 		sts 233,r19
 506:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 611               		.loc 1 506 2 is_stmt 1 view .LVU213
 506:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 612               		.loc 1 506 5 is_stmt 0 view .LVU214
 613 0016 3091 0000 		lds r19,transmit_previous_timeout
 614 001a 3323      		tst r19
 615 001c 01F0      		breq .L56
 507:usb_serial.c  **** 			SREG = intr_state;
 616               		.loc 1 507 3 is_stmt 1 view .LVU215
 507:usb_serial.c  **** 			SREG = intr_state;
 617               		.loc 1 507 9 is_stmt 0 view .LVU216
 618 001e 3091 E800 		lds r19,232
 507:usb_serial.c  **** 			SREG = intr_state;
 619               		.loc 1 507 6 view .LVU217
 620 0022 35FD      		sbrc r19,5
 621 0024 00C0      		rjmp .L57
 508:usb_serial.c  **** 			return -1;
 622               		.loc 1 508 4 is_stmt 1 view .LVU218
 508:usb_serial.c  **** 			return -1;
 623               		.loc 1 508 9 is_stmt 0 view .LVU219
 624 0026 2FBF      		out __SREG__,r18
 625 0028 00C0      		rjmp .L138
 626               	.L57:
 511:usb_serial.c  **** 	}
 627               		.loc 1 511 3 is_stmt 1 view .LVU220
 511:usb_serial.c  **** 	}
 628               		.loc 1 511 29 is_stmt 0 view .LVU221
 629 002a 1092 0000 		sts transmit_previous_timeout,__zero_reg__
 630               	.L56:
 532:usb_serial.c  **** 		}
 631               		.loc 1 532 10 view .LVU222
 632 002e 34E0      		ldi r19,lo8(4)
 536:usb_serial.c  **** 		if (write_size > size) write_size = size;
 633               		.loc 1 536 14 view .LVU223
 634 0030 40E4      		ldi r20,lo8(64)
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 635               		.loc 1 616 37 view .LVU224
 636 0032 5AE3      		ldi r21,lo8(58)
 617:usb_serial.c  **** 		SREG = intr_state;
 637               		.loc 1 617 24 view .LVU225
 638 0034 A5E0      		ldi r26,lo8(5)
 639               	.LVL38:
 640               	.L58:
 514:usb_serial.c  **** 		// wait for the FIFO to be ready to accept data
 641               		.loc 1 514 8 view .LVU226
 642 0036 6115      		cp r22,__zero_reg__
 643 0038 7105      		cpc r23,__zero_reg__
 644 003a 01F4      		brne .L131
 620:usb_serial.c  **** }
 645               		.loc 1 620 9 view .LVU227
 646 003c 80E0      		ldi r24,0
 647               	.LVL39:
 648               	/* epilogue start */
 621:usb_serial.c  **** 
 649               		.loc 1 621 1 view .LVU228
 650 003e 0895      		ret
 651               	.LVL40:
 652               	.L131:
 516:usb_serial.c  **** 		while (1) {
 653               		.loc 1 516 3 is_stmt 1 view .LVU229
 516:usb_serial.c  **** 		while (1) {
 654               		.loc 1 516 13 is_stmt 0 view .LVU230
 655 0040 E091 E400 		lds r30,228
 516:usb_serial.c  **** 		while (1) {
 656               		.loc 1 516 11 view .LVU231
 657 0044 E75E      		subi r30,lo8(-(25))
 658               	.LVL41:
 659               	.L62:
 517:usb_serial.c  **** 			// are we ready to transmit?
 660               		.loc 1 517 3 is_stmt 1 view .LVU232
 519:usb_serial.c  **** 			SREG = intr_state;
 661               		.loc 1 519 4 view .LVU233
 519:usb_serial.c  **** 			SREG = intr_state;
 662               		.loc 1 519 8 is_stmt 0 view .LVU234
 663 0046 F091 E800 		lds r31,232
 519:usb_serial.c  **** 			SREG = intr_state;
 664               		.loc 1 519 7 view .LVU235
 665 004a F5FD      		sbrc r31,5
 666 004c 00C0      		rjmp .L59
 520:usb_serial.c  **** 			// have we waited too long?  This happens if the user
 667               		.loc 1 520 4 is_stmt 1 view .LVU236
 520:usb_serial.c  **** 			// have we waited too long?  This happens if the user
 668               		.loc 1 520 9 is_stmt 0 view .LVU237
 669 004e 2FBF      		out __SREG__,r18
 523:usb_serial.c  **** 				transmit_previous_timeout = 1;
 670               		.loc 1 523 4 is_stmt 1 view .LVU238
 523:usb_serial.c  **** 				transmit_previous_timeout = 1;
 671               		.loc 1 523 8 is_stmt 0 view .LVU239
 672 0050 2091 E400 		lds r18,228
 673               	.LVL42:
 523:usb_serial.c  **** 				transmit_previous_timeout = 1;
 674               		.loc 1 523 7 view .LVU240
 675 0054 2E13      		cpse r18,r30
 676 0056 00C0      		rjmp .L60
 524:usb_serial.c  **** 				return -1;
 677               		.loc 1 524 5 is_stmt 1 view .LVU241
 524:usb_serial.c  **** 				return -1;
 678               		.loc 1 524 31 is_stmt 0 view .LVU242
 679 0058 81E0      		ldi r24,lo8(1)
 680               	.LVL43:
 524:usb_serial.c  **** 				return -1;
 681               		.loc 1 524 31 view .LVU243
 682 005a 8093 0000 		sts transmit_previous_timeout,r24
 683               	.LVL44:
 525:usb_serial.c  **** 			}
 684               		.loc 1 525 5 is_stmt 1 view .LVU244
 685 005e 00C0      		rjmp .L138
 686               	.LVL45:
 687               	.L60:
 528:usb_serial.c  **** 			// get ready to try checking again
 688               		.loc 1 528 4 view .LVU245
 528:usb_serial.c  **** 			// get ready to try checking again
 689               		.loc 1 528 8 is_stmt 0 view .LVU246
 690 0060 2091 0000 		lds r18,usb_configuration
 528:usb_serial.c  **** 			// get ready to try checking again
 691               		.loc 1 528 7 view .LVU247
 692 0064 2223      		tst r18
 693 0066 01F0      		breq .L138
 530:usb_serial.c  **** 			cli();
 694               		.loc 1 530 4 is_stmt 1 view .LVU248
 530:usb_serial.c  **** 			cli();
 695               		.loc 1 530 15 is_stmt 0 view .LVU249
 696 0068 2FB7      		in r18,__SREG__
 697               	.LVL46:
 531:usb_serial.c  **** 			UENUM = CDC_TX_ENDPOINT;
 698               		.loc 1 531 4 is_stmt 1 view .LVU250
 699               	/* #APP */
 700               	 ;  531 "usb_serial.c" 1
 701 006a F894      		cli
 702               	 ;  0 "" 2
 532:usb_serial.c  **** 		}
 703               		.loc 1 532 4 view .LVU251
 532:usb_serial.c  **** 		}
 704               		.loc 1 532 10 is_stmt 0 view .LVU252
 705               	/* #NOAPP */
 706 006c 3093 E900 		sts 233,r19
 519:usb_serial.c  **** 			SREG = intr_state;
 707               		.loc 1 519 7 view .LVU253
 708 0070 00C0      		rjmp .L62
 709               	.L59:
 536:usb_serial.c  **** 		if (write_size > size) write_size = size;
 710               		.loc 1 536 3 is_stmt 1 view .LVU254
 536:usb_serial.c  **** 		if (write_size > size) write_size = size;
 711               		.loc 1 536 30 is_stmt 0 view .LVU255
 712 0072 E091 F200 		lds r30,242
 713               	.LVL47:
 536:usb_serial.c  **** 		if (write_size > size) write_size = size;
 714               		.loc 1 536 14 view .LVU256
 715 0076 B42F      		mov r27,r20
 716 0078 BE1B      		sub r27,r30
 717               	.LVL48:
 537:usb_serial.c  **** 		size -= write_size;
 718               		.loc 1 537 3 is_stmt 1 view .LVU257
 537:usb_serial.c  **** 		size -= write_size;
 719               		.loc 1 537 6 is_stmt 0 view .LVU258
 720 007a B617      		cp r27,r22
 721 007c 1706      		cpc __zero_reg__,r23
 722 007e 01F0      		breq .L63
 723 0080 00F0      		brlo .L63
 537:usb_serial.c  **** 		size -= write_size;
 724               		.loc 1 537 26 is_stmt 1 discriminator 1 view .LVU259
 537:usb_serial.c  **** 		size -= write_size;
 725               		.loc 1 537 37 is_stmt 0 discriminator 1 view .LVU260
 726 0082 B62F      		mov r27,r22
 727               	.LVL49:
 728               	.L63:
 538:usb_serial.c  **** 
 729               		.loc 1 538 3 is_stmt 1 view .LVU261
 538:usb_serial.c  **** 
 730               		.loc 1 538 8 is_stmt 0 view .LVU262
 731 0084 EB2F      		mov r30,r27
 732 0086 F0E0      		ldi r31,0
 733 0088 6E1B      		sub r22,r30
 734 008a 7F0B      		sbc r23,r31
 735               	.LVL50:
 541:usb_serial.c  **** 			#if (CDC_TX_SIZE == 64)
 736               		.loc 1 541 3 is_stmt 1 view .LVU263
 737 008c B134      		cpi r27,lo8(65)
 738 008e 00F0      		brlo .+2
 739 0090 00C0      		rjmp .L64
 740 0092 E050      		subi r30,lo8(-(gs(.L66)))
 741 0094 F040      		sbci r31,hi8(-(gs(.L66)))
 742 0096 0C94 0000 		jmp __tablejump2__
 743               		.section	.jumptables.gcc.usb_serial_write,"a",@progbits
 744               		.p2align	1
 745               	.L66:
 746 0000 0000      		.word gs(.L129)
 747 0002 0000      		.word gs(.L64)
 748 0004 0000      		.word gs(.L128)
 749 0006 0000      		.word gs(.L127)
 750 0008 0000      		.word gs(.L126)
 751 000a 0000      		.word gs(.L125)
 752 000c 0000      		.word gs(.L124)
 753 000e 0000      		.word gs(.L123)
 754 0010 0000      		.word gs(.L122)
 755 0012 0000      		.word gs(.L121)
 756 0014 0000      		.word gs(.L120)
 757 0016 0000      		.word gs(.L119)
 758 0018 0000      		.word gs(.L118)
 759 001a 0000      		.word gs(.L117)
 760 001c 0000      		.word gs(.L116)
 761 001e 0000      		.word gs(.L115)
 762 0020 0000      		.word gs(.L114)
 763 0022 0000      		.word gs(.L113)
 764 0024 0000      		.word gs(.L112)
 765 0026 0000      		.word gs(.L111)
 766 0028 0000      		.word gs(.L110)
 767 002a 0000      		.word gs(.L109)
 768 002c 0000      		.word gs(.L108)
 769 002e 0000      		.word gs(.L107)
 770 0030 0000      		.word gs(.L106)
 771 0032 0000      		.word gs(.L105)
 772 0034 0000      		.word gs(.L104)
 773 0036 0000      		.word gs(.L103)
 774 0038 0000      		.word gs(.L102)
 775 003a 0000      		.word gs(.L101)
 776 003c 0000      		.word gs(.L100)
 777 003e 0000      		.word gs(.L99)
 778 0040 0000      		.word gs(.L98)
 779 0042 0000      		.word gs(.L97)
 780 0044 0000      		.word gs(.L96)
 781 0046 0000      		.word gs(.L95)
 782 0048 0000      		.word gs(.L94)
 783 004a 0000      		.word gs(.L93)
 784 004c 0000      		.word gs(.L92)
 785 004e 0000      		.word gs(.L91)
 786 0050 0000      		.word gs(.L90)
 787 0052 0000      		.word gs(.L89)
 788 0054 0000      		.word gs(.L88)
 789 0056 0000      		.word gs(.L87)
 790 0058 0000      		.word gs(.L86)
 791 005a 0000      		.word gs(.L85)
 792 005c 0000      		.word gs(.L84)
 793 005e 0000      		.word gs(.L83)
 794 0060 0000      		.word gs(.L82)
 795 0062 0000      		.word gs(.L81)
 796 0064 0000      		.word gs(.L80)
 797 0066 0000      		.word gs(.L79)
 798 0068 0000      		.word gs(.L78)
 799 006a 0000      		.word gs(.L77)
 800 006c 0000      		.word gs(.L76)
 801 006e 0000      		.word gs(.L75)
 802 0070 0000      		.word gs(.L74)
 803 0072 0000      		.word gs(.L73)
 804 0074 0000      		.word gs(.L72)
 805 0076 0000      		.word gs(.L71)
 806 0078 0000      		.word gs(.L70)
 807 007a 0000      		.word gs(.L69)
 808 007c 0000      		.word gs(.L68)
 809 007e 0000      		.word gs(.L67)
 810 0080 0000      		.word gs(.L65)
 811               		.section	.text.usb_serial_write
 812               	.L65:
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 813               		.loc 1 543 13 view .LVU264
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 814               		.loc 1 543 29 is_stmt 0 view .LVU265
 815 009a FC01      		movw r30,r24
 816               	.LVL51:
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 817               		.loc 1 543 22 view .LVU266
 818 009c 8191      		ld r24,Z+
 819               	.LVL52:
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 820               		.loc 1 543 20 view .LVU267
 821 009e 8093 F100 		sts 241,r24
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 822               		.loc 1 543 29 view .LVU268
 823 00a2 CF01      		movw r24,r30
 824               	.LVL53:
 825               	.L67:
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 826               		.loc 1 544 13 is_stmt 1 view .LVU269
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 827               		.loc 1 544 29 is_stmt 0 view .LVU270
 828 00a4 FC01      		movw r30,r24
 829               	.LVL54:
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 830               		.loc 1 544 22 view .LVU271
 831 00a6 8191      		ld r24,Z+
 832               	.LVL55:
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 833               		.loc 1 544 20 view .LVU272
 834 00a8 8093 F100 		sts 241,r24
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 835               		.loc 1 544 29 view .LVU273
 836 00ac CF01      		movw r24,r30
 837               	.LVL56:
 838               	.L68:
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 839               		.loc 1 545 13 is_stmt 1 view .LVU274
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 840               		.loc 1 545 29 is_stmt 0 view .LVU275
 841 00ae FC01      		movw r30,r24
 842               	.LVL57:
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 843               		.loc 1 545 22 view .LVU276
 844 00b0 8191      		ld r24,Z+
 845               	.LVL58:
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 846               		.loc 1 545 20 view .LVU277
 847 00b2 8093 F100 		sts 241,r24
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 848               		.loc 1 545 29 view .LVU278
 849 00b6 CF01      		movw r24,r30
 850               	.LVL59:
 851               	.L69:
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 852               		.loc 1 546 13 is_stmt 1 view .LVU279
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 853               		.loc 1 546 29 is_stmt 0 view .LVU280
 854 00b8 FC01      		movw r30,r24
 855               	.LVL60:
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 856               		.loc 1 546 22 view .LVU281
 857 00ba 8191      		ld r24,Z+
 858               	.LVL61:
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 859               		.loc 1 546 20 view .LVU282
 860 00bc 8093 F100 		sts 241,r24
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 861               		.loc 1 546 29 view .LVU283
 862 00c0 CF01      		movw r24,r30
 863               	.LVL62:
 864               	.L70:
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 865               		.loc 1 547 13 is_stmt 1 view .LVU284
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 866               		.loc 1 547 29 is_stmt 0 view .LVU285
 867 00c2 FC01      		movw r30,r24
 868               	.LVL63:
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 869               		.loc 1 547 22 view .LVU286
 870 00c4 8191      		ld r24,Z+
 871               	.LVL64:
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 872               		.loc 1 547 20 view .LVU287
 873 00c6 8093 F100 		sts 241,r24
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 874               		.loc 1 547 29 view .LVU288
 875 00ca CF01      		movw r24,r30
 876               	.LVL65:
 877               	.L71:
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 878               		.loc 1 548 13 is_stmt 1 view .LVU289
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 879               		.loc 1 548 29 is_stmt 0 view .LVU290
 880 00cc FC01      		movw r30,r24
 881               	.LVL66:
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 882               		.loc 1 548 22 view .LVU291
 883 00ce 8191      		ld r24,Z+
 884               	.LVL67:
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 885               		.loc 1 548 20 view .LVU292
 886 00d0 8093 F100 		sts 241,r24
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 887               		.loc 1 548 29 view .LVU293
 888 00d4 CF01      		movw r24,r30
 889               	.LVL68:
 890               	.L72:
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 891               		.loc 1 549 13 is_stmt 1 view .LVU294
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 892               		.loc 1 549 29 is_stmt 0 view .LVU295
 893 00d6 FC01      		movw r30,r24
 894               	.LVL69:
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 895               		.loc 1 549 22 view .LVU296
 896 00d8 8191      		ld r24,Z+
 897               	.LVL70:
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 898               		.loc 1 549 20 view .LVU297
 899 00da 8093 F100 		sts 241,r24
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 900               		.loc 1 549 29 view .LVU298
 901 00de CF01      		movw r24,r30
 902               	.LVL71:
 903               	.L73:
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 904               		.loc 1 550 13 is_stmt 1 view .LVU299
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 905               		.loc 1 550 29 is_stmt 0 view .LVU300
 906 00e0 FC01      		movw r30,r24
 907               	.LVL72:
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 908               		.loc 1 550 22 view .LVU301
 909 00e2 8191      		ld r24,Z+
 910               	.LVL73:
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 911               		.loc 1 550 20 view .LVU302
 912 00e4 8093 F100 		sts 241,r24
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 913               		.loc 1 550 29 view .LVU303
 914 00e8 CF01      		movw r24,r30
 915               	.LVL74:
 916               	.L74:
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 917               		.loc 1 551 13 is_stmt 1 view .LVU304
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 918               		.loc 1 551 29 is_stmt 0 view .LVU305
 919 00ea FC01      		movw r30,r24
 920               	.LVL75:
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 921               		.loc 1 551 22 view .LVU306
 922 00ec 8191      		ld r24,Z+
 923               	.LVL76:
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 924               		.loc 1 551 20 view .LVU307
 925 00ee 8093 F100 		sts 241,r24
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 926               		.loc 1 551 29 view .LVU308
 927 00f2 CF01      		movw r24,r30
 928               	.LVL77:
 929               	.L75:
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 930               		.loc 1 552 13 is_stmt 1 view .LVU309
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 931               		.loc 1 552 29 is_stmt 0 view .LVU310
 932 00f4 FC01      		movw r30,r24
 933               	.LVL78:
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 934               		.loc 1 552 22 view .LVU311
 935 00f6 8191      		ld r24,Z+
 936               	.LVL79:
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 937               		.loc 1 552 20 view .LVU312
 938 00f8 8093 F100 		sts 241,r24
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 939               		.loc 1 552 29 view .LVU313
 940 00fc CF01      		movw r24,r30
 941               	.LVL80:
 942               	.L76:
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 943               		.loc 1 553 13 is_stmt 1 view .LVU314
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 944               		.loc 1 553 29 is_stmt 0 view .LVU315
 945 00fe FC01      		movw r30,r24
 946               	.LVL81:
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 947               		.loc 1 553 22 view .LVU316
 948 0100 8191      		ld r24,Z+
 949               	.LVL82:
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 950               		.loc 1 553 20 view .LVU317
 951 0102 8093 F100 		sts 241,r24
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 952               		.loc 1 553 29 view .LVU318
 953 0106 CF01      		movw r24,r30
 954               	.LVL83:
 955               	.L77:
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 956               		.loc 1 554 13 is_stmt 1 view .LVU319
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 957               		.loc 1 554 29 is_stmt 0 view .LVU320
 958 0108 FC01      		movw r30,r24
 959               	.LVL84:
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 960               		.loc 1 554 22 view .LVU321
 961 010a 8191      		ld r24,Z+
 962               	.LVL85:
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 963               		.loc 1 554 20 view .LVU322
 964 010c 8093 F100 		sts 241,r24
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 965               		.loc 1 554 29 view .LVU323
 966 0110 CF01      		movw r24,r30
 967               	.LVL86:
 968               	.L78:
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 969               		.loc 1 555 13 is_stmt 1 view .LVU324
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 970               		.loc 1 555 29 is_stmt 0 view .LVU325
 971 0112 FC01      		movw r30,r24
 972               	.LVL87:
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 973               		.loc 1 555 22 view .LVU326
 974 0114 8191      		ld r24,Z+
 975               	.LVL88:
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 976               		.loc 1 555 20 view .LVU327
 977 0116 8093 F100 		sts 241,r24
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 978               		.loc 1 555 29 view .LVU328
 979 011a CF01      		movw r24,r30
 980               	.LVL89:
 981               	.L79:
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 982               		.loc 1 556 13 is_stmt 1 view .LVU329
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 983               		.loc 1 556 29 is_stmt 0 view .LVU330
 984 011c FC01      		movw r30,r24
 985               	.LVL90:
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 986               		.loc 1 556 22 view .LVU331
 987 011e 8191      		ld r24,Z+
 988               	.LVL91:
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 989               		.loc 1 556 20 view .LVU332
 990 0120 8093 F100 		sts 241,r24
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 991               		.loc 1 556 29 view .LVU333
 992 0124 CF01      		movw r24,r30
 993               	.LVL92:
 994               	.L80:
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 995               		.loc 1 557 13 is_stmt 1 view .LVU334
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 996               		.loc 1 557 29 is_stmt 0 view .LVU335
 997 0126 FC01      		movw r30,r24
 998               	.LVL93:
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 999               		.loc 1 557 22 view .LVU336
 1000 0128 8191      		ld r24,Z+
 1001               	.LVL94:
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 1002               		.loc 1 557 20 view .LVU337
 1003 012a 8093 F100 		sts 241,r24
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 1004               		.loc 1 557 29 view .LVU338
 1005 012e CF01      		movw r24,r30
 1006               	.LVL95:
 1007               	.L81:
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1008               		.loc 1 558 13 is_stmt 1 view .LVU339
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1009               		.loc 1 558 29 is_stmt 0 view .LVU340
 1010 0130 FC01      		movw r30,r24
 1011               	.LVL96:
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1012               		.loc 1 558 22 view .LVU341
 1013 0132 8191      		ld r24,Z+
 1014               	.LVL97:
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1015               		.loc 1 558 20 view .LVU342
 1016 0134 8093 F100 		sts 241,r24
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1017               		.loc 1 558 29 view .LVU343
 1018 0138 CF01      		movw r24,r30
 1019               	.LVL98:
 1020               	.L82:
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1021               		.loc 1 559 13 is_stmt 1 view .LVU344
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1022               		.loc 1 559 29 is_stmt 0 view .LVU345
 1023 013a FC01      		movw r30,r24
 1024               	.LVL99:
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1025               		.loc 1 559 22 view .LVU346
 1026 013c 8191      		ld r24,Z+
 1027               	.LVL100:
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1028               		.loc 1 559 20 view .LVU347
 1029 013e 8093 F100 		sts 241,r24
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1030               		.loc 1 559 29 view .LVU348
 1031 0142 CF01      		movw r24,r30
 1032               	.LVL101:
 1033               	.L83:
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1034               		.loc 1 560 13 is_stmt 1 view .LVU349
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1035               		.loc 1 560 29 is_stmt 0 view .LVU350
 1036 0144 FC01      		movw r30,r24
 1037               	.LVL102:
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1038               		.loc 1 560 22 view .LVU351
 1039 0146 8191      		ld r24,Z+
 1040               	.LVL103:
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1041               		.loc 1 560 20 view .LVU352
 1042 0148 8093 F100 		sts 241,r24
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1043               		.loc 1 560 29 view .LVU353
 1044 014c CF01      		movw r24,r30
 1045               	.LVL104:
 1046               	.L84:
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1047               		.loc 1 561 13 is_stmt 1 view .LVU354
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1048               		.loc 1 561 29 is_stmt 0 view .LVU355
 1049 014e FC01      		movw r30,r24
 1050               	.LVL105:
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1051               		.loc 1 561 22 view .LVU356
 1052 0150 8191      		ld r24,Z+
 1053               	.LVL106:
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1054               		.loc 1 561 20 view .LVU357
 1055 0152 8093 F100 		sts 241,r24
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1056               		.loc 1 561 29 view .LVU358
 1057 0156 CF01      		movw r24,r30
 1058               	.LVL107:
 1059               	.L85:
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1060               		.loc 1 562 13 is_stmt 1 view .LVU359
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1061               		.loc 1 562 29 is_stmt 0 view .LVU360
 1062 0158 FC01      		movw r30,r24
 1063               	.LVL108:
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1064               		.loc 1 562 22 view .LVU361
 1065 015a 8191      		ld r24,Z+
 1066               	.LVL109:
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1067               		.loc 1 562 20 view .LVU362
 1068 015c 8093 F100 		sts 241,r24
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1069               		.loc 1 562 29 view .LVU363
 1070 0160 CF01      		movw r24,r30
 1071               	.LVL110:
 1072               	.L86:
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1073               		.loc 1 563 13 is_stmt 1 view .LVU364
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1074               		.loc 1 563 29 is_stmt 0 view .LVU365
 1075 0162 FC01      		movw r30,r24
 1076               	.LVL111:
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1077               		.loc 1 563 22 view .LVU366
 1078 0164 8191      		ld r24,Z+
 1079               	.LVL112:
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1080               		.loc 1 563 20 view .LVU367
 1081 0166 8093 F100 		sts 241,r24
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1082               		.loc 1 563 29 view .LVU368
 1083 016a CF01      		movw r24,r30
 1084               	.LVL113:
 1085               	.L87:
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1086               		.loc 1 564 13 is_stmt 1 view .LVU369
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1087               		.loc 1 564 29 is_stmt 0 view .LVU370
 1088 016c FC01      		movw r30,r24
 1089               	.LVL114:
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1090               		.loc 1 564 22 view .LVU371
 1091 016e 8191      		ld r24,Z+
 1092               	.LVL115:
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1093               		.loc 1 564 20 view .LVU372
 1094 0170 8093 F100 		sts 241,r24
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1095               		.loc 1 564 29 view .LVU373
 1096 0174 CF01      		movw r24,r30
 1097               	.LVL116:
 1098               	.L88:
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1099               		.loc 1 565 13 is_stmt 1 view .LVU374
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1100               		.loc 1 565 29 is_stmt 0 view .LVU375
 1101 0176 FC01      		movw r30,r24
 1102               	.LVL117:
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1103               		.loc 1 565 22 view .LVU376
 1104 0178 8191      		ld r24,Z+
 1105               	.LVL118:
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1106               		.loc 1 565 20 view .LVU377
 1107 017a 8093 F100 		sts 241,r24
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1108               		.loc 1 565 29 view .LVU378
 1109 017e CF01      		movw r24,r30
 1110               	.LVL119:
 1111               	.L89:
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1112               		.loc 1 566 13 is_stmt 1 view .LVU379
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1113               		.loc 1 566 29 is_stmt 0 view .LVU380
 1114 0180 FC01      		movw r30,r24
 1115               	.LVL120:
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1116               		.loc 1 566 22 view .LVU381
 1117 0182 8191      		ld r24,Z+
 1118               	.LVL121:
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1119               		.loc 1 566 20 view .LVU382
 1120 0184 8093 F100 		sts 241,r24
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1121               		.loc 1 566 29 view .LVU383
 1122 0188 CF01      		movw r24,r30
 1123               	.LVL122:
 1124               	.L90:
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1125               		.loc 1 567 13 is_stmt 1 view .LVU384
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1126               		.loc 1 567 29 is_stmt 0 view .LVU385
 1127 018a FC01      		movw r30,r24
 1128               	.LVL123:
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1129               		.loc 1 567 22 view .LVU386
 1130 018c 8191      		ld r24,Z+
 1131               	.LVL124:
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1132               		.loc 1 567 20 view .LVU387
 1133 018e 8093 F100 		sts 241,r24
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1134               		.loc 1 567 29 view .LVU388
 1135 0192 CF01      		movw r24,r30
 1136               	.LVL125:
 1137               	.L91:
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1138               		.loc 1 568 13 is_stmt 1 view .LVU389
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1139               		.loc 1 568 29 is_stmt 0 view .LVU390
 1140 0194 FC01      		movw r30,r24
 1141               	.LVL126:
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1142               		.loc 1 568 22 view .LVU391
 1143 0196 8191      		ld r24,Z+
 1144               	.LVL127:
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1145               		.loc 1 568 20 view .LVU392
 1146 0198 8093 F100 		sts 241,r24
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1147               		.loc 1 568 29 view .LVU393
 1148 019c CF01      		movw r24,r30
 1149               	.LVL128:
 1150               	.L92:
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1151               		.loc 1 569 13 is_stmt 1 view .LVU394
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1152               		.loc 1 569 29 is_stmt 0 view .LVU395
 1153 019e FC01      		movw r30,r24
 1154               	.LVL129:
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1155               		.loc 1 569 22 view .LVU396
 1156 01a0 8191      		ld r24,Z+
 1157               	.LVL130:
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1158               		.loc 1 569 20 view .LVU397
 1159 01a2 8093 F100 		sts 241,r24
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1160               		.loc 1 569 29 view .LVU398
 1161 01a6 CF01      		movw r24,r30
 1162               	.LVL131:
 1163               	.L93:
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1164               		.loc 1 570 13 is_stmt 1 view .LVU399
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1165               		.loc 1 570 29 is_stmt 0 view .LVU400
 1166 01a8 FC01      		movw r30,r24
 1167               	.LVL132:
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1168               		.loc 1 570 22 view .LVU401
 1169 01aa 8191      		ld r24,Z+
 1170               	.LVL133:
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1171               		.loc 1 570 20 view .LVU402
 1172 01ac 8093 F100 		sts 241,r24
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1173               		.loc 1 570 29 view .LVU403
 1174 01b0 CF01      		movw r24,r30
 1175               	.LVL134:
 1176               	.L94:
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1177               		.loc 1 571 13 is_stmt 1 view .LVU404
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1178               		.loc 1 571 29 is_stmt 0 view .LVU405
 1179 01b2 FC01      		movw r30,r24
 1180               	.LVL135:
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1181               		.loc 1 571 22 view .LVU406
 1182 01b4 8191      		ld r24,Z+
 1183               	.LVL136:
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1184               		.loc 1 571 20 view .LVU407
 1185 01b6 8093 F100 		sts 241,r24
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1186               		.loc 1 571 29 view .LVU408
 1187 01ba CF01      		movw r24,r30
 1188               	.LVL137:
 1189               	.L95:
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1190               		.loc 1 572 13 is_stmt 1 view .LVU409
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1191               		.loc 1 572 29 is_stmt 0 view .LVU410
 1192 01bc FC01      		movw r30,r24
 1193               	.LVL138:
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1194               		.loc 1 572 22 view .LVU411
 1195 01be 8191      		ld r24,Z+
 1196               	.LVL139:
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1197               		.loc 1 572 20 view .LVU412
 1198 01c0 8093 F100 		sts 241,r24
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1199               		.loc 1 572 29 view .LVU413
 1200 01c4 CF01      		movw r24,r30
 1201               	.LVL140:
 1202               	.L96:
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1203               		.loc 1 573 13 is_stmt 1 view .LVU414
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1204               		.loc 1 573 29 is_stmt 0 view .LVU415
 1205 01c6 FC01      		movw r30,r24
 1206               	.LVL141:
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1207               		.loc 1 573 22 view .LVU416
 1208 01c8 8191      		ld r24,Z+
 1209               	.LVL142:
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1210               		.loc 1 573 20 view .LVU417
 1211 01ca 8093 F100 		sts 241,r24
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1212               		.loc 1 573 29 view .LVU418
 1213 01ce CF01      		movw r24,r30
 1214               	.LVL143:
 1215               	.L97:
 574:usb_serial.c  **** 			#endif
 1216               		.loc 1 574 13 is_stmt 1 view .LVU419
 574:usb_serial.c  **** 			#endif
 1217               		.loc 1 574 29 is_stmt 0 view .LVU420
 1218 01d0 FC01      		movw r30,r24
 1219               	.LVL144:
 574:usb_serial.c  **** 			#endif
 1220               		.loc 1 574 22 view .LVU421
 1221 01d2 8191      		ld r24,Z+
 1222               	.LVL145:
 574:usb_serial.c  **** 			#endif
 1223               		.loc 1 574 20 view .LVU422
 1224 01d4 8093 F100 		sts 241,r24
 574:usb_serial.c  **** 			#endif
 1225               		.loc 1 574 29 view .LVU423
 1226 01d8 CF01      		movw r24,r30
 1227               	.LVL146:
 1228               	.L98:
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1229               		.loc 1 577 13 is_stmt 1 view .LVU424
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1230               		.loc 1 577 29 is_stmt 0 view .LVU425
 1231 01da FC01      		movw r30,r24
 1232               	.LVL147:
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1233               		.loc 1 577 22 view .LVU426
 1234 01dc 8191      		ld r24,Z+
 1235               	.LVL148:
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1236               		.loc 1 577 20 view .LVU427
 1237 01de 8093 F100 		sts 241,r24
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1238               		.loc 1 577 29 view .LVU428
 1239 01e2 CF01      		movw r24,r30
 1240               	.LVL149:
 1241               	.L99:
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1242               		.loc 1 578 13 is_stmt 1 view .LVU429
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1243               		.loc 1 578 29 is_stmt 0 view .LVU430
 1244 01e4 FC01      		movw r30,r24
 1245               	.LVL150:
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1246               		.loc 1 578 22 view .LVU431
 1247 01e6 8191      		ld r24,Z+
 1248               	.LVL151:
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1249               		.loc 1 578 20 view .LVU432
 1250 01e8 8093 F100 		sts 241,r24
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1251               		.loc 1 578 29 view .LVU433
 1252 01ec CF01      		movw r24,r30
 1253               	.LVL152:
 1254               	.L100:
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1255               		.loc 1 579 13 is_stmt 1 view .LVU434
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1256               		.loc 1 579 29 is_stmt 0 view .LVU435
 1257 01ee FC01      		movw r30,r24
 1258               	.LVL153:
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1259               		.loc 1 579 22 view .LVU436
 1260 01f0 8191      		ld r24,Z+
 1261               	.LVL154:
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1262               		.loc 1 579 20 view .LVU437
 1263 01f2 8093 F100 		sts 241,r24
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1264               		.loc 1 579 29 view .LVU438
 1265 01f6 CF01      		movw r24,r30
 1266               	.LVL155:
 1267               	.L101:
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1268               		.loc 1 580 13 is_stmt 1 view .LVU439
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1269               		.loc 1 580 29 is_stmt 0 view .LVU440
 1270 01f8 FC01      		movw r30,r24
 1271               	.LVL156:
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1272               		.loc 1 580 22 view .LVU441
 1273 01fa 8191      		ld r24,Z+
 1274               	.LVL157:
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1275               		.loc 1 580 20 view .LVU442
 1276 01fc 8093 F100 		sts 241,r24
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1277               		.loc 1 580 29 view .LVU443
 1278 0200 CF01      		movw r24,r30
 1279               	.LVL158:
 1280               	.L102:
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1281               		.loc 1 581 13 is_stmt 1 view .LVU444
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1282               		.loc 1 581 29 is_stmt 0 view .LVU445
 1283 0202 FC01      		movw r30,r24
 1284               	.LVL159:
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1285               		.loc 1 581 22 view .LVU446
 1286 0204 8191      		ld r24,Z+
 1287               	.LVL160:
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1288               		.loc 1 581 20 view .LVU447
 1289 0206 8093 F100 		sts 241,r24
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1290               		.loc 1 581 29 view .LVU448
 1291 020a CF01      		movw r24,r30
 1292               	.LVL161:
 1293               	.L103:
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1294               		.loc 1 582 13 is_stmt 1 view .LVU449
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1295               		.loc 1 582 29 is_stmt 0 view .LVU450
 1296 020c FC01      		movw r30,r24
 1297               	.LVL162:
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1298               		.loc 1 582 22 view .LVU451
 1299 020e 8191      		ld r24,Z+
 1300               	.LVL163:
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1301               		.loc 1 582 20 view .LVU452
 1302 0210 8093 F100 		sts 241,r24
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1303               		.loc 1 582 29 view .LVU453
 1304 0214 CF01      		movw r24,r30
 1305               	.LVL164:
 1306               	.L104:
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1307               		.loc 1 583 13 is_stmt 1 view .LVU454
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1308               		.loc 1 583 29 is_stmt 0 view .LVU455
 1309 0216 FC01      		movw r30,r24
 1310               	.LVL165:
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1311               		.loc 1 583 22 view .LVU456
 1312 0218 8191      		ld r24,Z+
 1313               	.LVL166:
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1314               		.loc 1 583 20 view .LVU457
 1315 021a 8093 F100 		sts 241,r24
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1316               		.loc 1 583 29 view .LVU458
 1317 021e CF01      		movw r24,r30
 1318               	.LVL167:
 1319               	.L105:
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1320               		.loc 1 584 13 is_stmt 1 view .LVU459
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1321               		.loc 1 584 29 is_stmt 0 view .LVU460
 1322 0220 FC01      		movw r30,r24
 1323               	.LVL168:
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1324               		.loc 1 584 22 view .LVU461
 1325 0222 8191      		ld r24,Z+
 1326               	.LVL169:
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1327               		.loc 1 584 20 view .LVU462
 1328 0224 8093 F100 		sts 241,r24
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1329               		.loc 1 584 29 view .LVU463
 1330 0228 CF01      		movw r24,r30
 1331               	.LVL170:
 1332               	.L106:
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1333               		.loc 1 585 13 is_stmt 1 view .LVU464
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1334               		.loc 1 585 29 is_stmt 0 view .LVU465
 1335 022a FC01      		movw r30,r24
 1336               	.LVL171:
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1337               		.loc 1 585 22 view .LVU466
 1338 022c 8191      		ld r24,Z+
 1339               	.LVL172:
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1340               		.loc 1 585 20 view .LVU467
 1341 022e 8093 F100 		sts 241,r24
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1342               		.loc 1 585 29 view .LVU468
 1343 0232 CF01      		movw r24,r30
 1344               	.LVL173:
 1345               	.L107:
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1346               		.loc 1 586 13 is_stmt 1 view .LVU469
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1347               		.loc 1 586 29 is_stmt 0 view .LVU470
 1348 0234 FC01      		movw r30,r24
 1349               	.LVL174:
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1350               		.loc 1 586 22 view .LVU471
 1351 0236 8191      		ld r24,Z+
 1352               	.LVL175:
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1353               		.loc 1 586 20 view .LVU472
 1354 0238 8093 F100 		sts 241,r24
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1355               		.loc 1 586 29 view .LVU473
 1356 023c CF01      		movw r24,r30
 1357               	.LVL176:
 1358               	.L108:
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1359               		.loc 1 587 13 is_stmt 1 view .LVU474
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1360               		.loc 1 587 29 is_stmt 0 view .LVU475
 1361 023e FC01      		movw r30,r24
 1362               	.LVL177:
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1363               		.loc 1 587 22 view .LVU476
 1364 0240 8191      		ld r24,Z+
 1365               	.LVL178:
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1366               		.loc 1 587 20 view .LVU477
 1367 0242 8093 F100 		sts 241,r24
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1368               		.loc 1 587 29 view .LVU478
 1369 0246 CF01      		movw r24,r30
 1370               	.LVL179:
 1371               	.L109:
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1372               		.loc 1 588 13 is_stmt 1 view .LVU479
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1373               		.loc 1 588 29 is_stmt 0 view .LVU480
 1374 0248 FC01      		movw r30,r24
 1375               	.LVL180:
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1376               		.loc 1 588 22 view .LVU481
 1377 024a 8191      		ld r24,Z+
 1378               	.LVL181:
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1379               		.loc 1 588 20 view .LVU482
 1380 024c 8093 F100 		sts 241,r24
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1381               		.loc 1 588 29 view .LVU483
 1382 0250 CF01      		movw r24,r30
 1383               	.LVL182:
 1384               	.L110:
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1385               		.loc 1 589 13 is_stmt 1 view .LVU484
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1386               		.loc 1 589 29 is_stmt 0 view .LVU485
 1387 0252 FC01      		movw r30,r24
 1388               	.LVL183:
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1389               		.loc 1 589 22 view .LVU486
 1390 0254 8191      		ld r24,Z+
 1391               	.LVL184:
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1392               		.loc 1 589 20 view .LVU487
 1393 0256 8093 F100 		sts 241,r24
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1394               		.loc 1 589 29 view .LVU488
 1395 025a CF01      		movw r24,r30
 1396               	.LVL185:
 1397               	.L111:
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1398               		.loc 1 590 13 is_stmt 1 view .LVU489
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1399               		.loc 1 590 29 is_stmt 0 view .LVU490
 1400 025c FC01      		movw r30,r24
 1401               	.LVL186:
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1402               		.loc 1 590 22 view .LVU491
 1403 025e 8191      		ld r24,Z+
 1404               	.LVL187:
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1405               		.loc 1 590 20 view .LVU492
 1406 0260 8093 F100 		sts 241,r24
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1407               		.loc 1 590 29 view .LVU493
 1408 0264 CF01      		movw r24,r30
 1409               	.LVL188:
 1410               	.L112:
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1411               		.loc 1 591 13 is_stmt 1 view .LVU494
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1412               		.loc 1 591 29 is_stmt 0 view .LVU495
 1413 0266 FC01      		movw r30,r24
 1414               	.LVL189:
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1415               		.loc 1 591 22 view .LVU496
 1416 0268 8191      		ld r24,Z+
 1417               	.LVL190:
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1418               		.loc 1 591 20 view .LVU497
 1419 026a 8093 F100 		sts 241,r24
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1420               		.loc 1 591 29 view .LVU498
 1421 026e CF01      		movw r24,r30
 1422               	.LVL191:
 1423               	.L113:
 592:usb_serial.c  **** 			#endif
 1424               		.loc 1 592 13 is_stmt 1 view .LVU499
 592:usb_serial.c  **** 			#endif
 1425               		.loc 1 592 29 is_stmt 0 view .LVU500
 1426 0270 FC01      		movw r30,r24
 1427               	.LVL192:
 592:usb_serial.c  **** 			#endif
 1428               		.loc 1 592 22 view .LVU501
 1429 0272 8191      		ld r24,Z+
 1430               	.LVL193:
 592:usb_serial.c  **** 			#endif
 1431               		.loc 1 592 20 view .LVU502
 1432 0274 8093 F100 		sts 241,r24
 592:usb_serial.c  **** 			#endif
 1433               		.loc 1 592 29 view .LVU503
 1434 0278 CF01      		movw r24,r30
 1435               	.LVL194:
 1436               	.L114:
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1437               		.loc 1 595 13 is_stmt 1 view .LVU504
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1438               		.loc 1 595 29 is_stmt 0 view .LVU505
 1439 027a FC01      		movw r30,r24
 1440               	.LVL195:
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1441               		.loc 1 595 22 view .LVU506
 1442 027c 8191      		ld r24,Z+
 1443               	.LVL196:
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1444               		.loc 1 595 20 view .LVU507
 1445 027e 8093 F100 		sts 241,r24
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1446               		.loc 1 595 29 view .LVU508
 1447 0282 CF01      		movw r24,r30
 1448               	.LVL197:
 1449               	.L115:
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1450               		.loc 1 596 13 is_stmt 1 view .LVU509
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1451               		.loc 1 596 29 is_stmt 0 view .LVU510
 1452 0284 FC01      		movw r30,r24
 1453               	.LVL198:
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1454               		.loc 1 596 22 view .LVU511
 1455 0286 8191      		ld r24,Z+
 1456               	.LVL199:
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1457               		.loc 1 596 20 view .LVU512
 1458 0288 8093 F100 		sts 241,r24
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1459               		.loc 1 596 29 view .LVU513
 1460 028c CF01      		movw r24,r30
 1461               	.LVL200:
 1462               	.L116:
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1463               		.loc 1 597 13 is_stmt 1 view .LVU514
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1464               		.loc 1 597 29 is_stmt 0 view .LVU515
 1465 028e FC01      		movw r30,r24
 1466               	.LVL201:
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1467               		.loc 1 597 22 view .LVU516
 1468 0290 8191      		ld r24,Z+
 1469               	.LVL202:
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1470               		.loc 1 597 20 view .LVU517
 1471 0292 8093 F100 		sts 241,r24
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1472               		.loc 1 597 29 view .LVU518
 1473 0296 CF01      		movw r24,r30
 1474               	.LVL203:
 1475               	.L117:
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1476               		.loc 1 598 13 is_stmt 1 view .LVU519
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1477               		.loc 1 598 29 is_stmt 0 view .LVU520
 1478 0298 FC01      		movw r30,r24
 1479               	.LVL204:
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1480               		.loc 1 598 22 view .LVU521
 1481 029a 8191      		ld r24,Z+
 1482               	.LVL205:
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1483               		.loc 1 598 20 view .LVU522
 1484 029c 8093 F100 		sts 241,r24
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1485               		.loc 1 598 29 view .LVU523
 1486 02a0 CF01      		movw r24,r30
 1487               	.LVL206:
 1488               	.L118:
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1489               		.loc 1 599 13 is_stmt 1 view .LVU524
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1490               		.loc 1 599 29 is_stmt 0 view .LVU525
 1491 02a2 FC01      		movw r30,r24
 1492               	.LVL207:
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1493               		.loc 1 599 22 view .LVU526
 1494 02a4 8191      		ld r24,Z+
 1495               	.LVL208:
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1496               		.loc 1 599 20 view .LVU527
 1497 02a6 8093 F100 		sts 241,r24
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1498               		.loc 1 599 29 view .LVU528
 1499 02aa CF01      		movw r24,r30
 1500               	.LVL209:
 1501               	.L119:
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1502               		.loc 1 600 13 is_stmt 1 view .LVU529
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1503               		.loc 1 600 29 is_stmt 0 view .LVU530
 1504 02ac FC01      		movw r30,r24
 1505               	.LVL210:
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1506               		.loc 1 600 22 view .LVU531
 1507 02ae 8191      		ld r24,Z+
 1508               	.LVL211:
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1509               		.loc 1 600 20 view .LVU532
 1510 02b0 8093 F100 		sts 241,r24
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1511               		.loc 1 600 29 view .LVU533
 1512 02b4 CF01      		movw r24,r30
 1513               	.LVL212:
 1514               	.L120:
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1515               		.loc 1 601 13 is_stmt 1 view .LVU534
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1516               		.loc 1 601 29 is_stmt 0 view .LVU535
 1517 02b6 FC01      		movw r30,r24
 1518               	.LVL213:
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1519               		.loc 1 601 22 view .LVU536
 1520 02b8 8191      		ld r24,Z+
 1521               	.LVL214:
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1522               		.loc 1 601 20 view .LVU537
 1523 02ba 8093 F100 		sts 241,r24
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1524               		.loc 1 601 29 view .LVU538
 1525 02be CF01      		movw r24,r30
 1526               	.LVL215:
 1527               	.L121:
 602:usb_serial.c  **** 			#endif
 1528               		.loc 1 602 13 is_stmt 1 view .LVU539
 602:usb_serial.c  **** 			#endif
 1529               		.loc 1 602 29 is_stmt 0 view .LVU540
 1530 02c0 FC01      		movw r30,r24
 1531               	.LVL216:
 602:usb_serial.c  **** 			#endif
 1532               		.loc 1 602 22 view .LVU541
 1533 02c2 8191      		ld r24,Z+
 1534               	.LVL217:
 602:usb_serial.c  **** 			#endif
 1535               		.loc 1 602 20 view .LVU542
 1536 02c4 8093 F100 		sts 241,r24
 602:usb_serial.c  **** 			#endif
 1537               		.loc 1 602 29 view .LVU543
 1538 02c8 CF01      		movw r24,r30
 1539               	.LVL218:
 1540               	.L122:
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1541               		.loc 1 604 13 is_stmt 1 view .LVU544
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1542               		.loc 1 604 29 is_stmt 0 view .LVU545
 1543 02ca FC01      		movw r30,r24
 1544               	.LVL219:
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1545               		.loc 1 604 22 view .LVU546
 1546 02cc 8191      		ld r24,Z+
 1547               	.LVL220:
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1548               		.loc 1 604 20 view .LVU547
 1549 02ce 8093 F100 		sts 241,r24
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1550               		.loc 1 604 29 view .LVU548
 1551 02d2 CF01      		movw r24,r30
 1552               	.LVL221:
 1553               	.L123:
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1554               		.loc 1 605 13 is_stmt 1 view .LVU549
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1555               		.loc 1 605 29 is_stmt 0 view .LVU550
 1556 02d4 FC01      		movw r30,r24
 1557               	.LVL222:
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1558               		.loc 1 605 22 view .LVU551
 1559 02d6 8191      		ld r24,Z+
 1560               	.LVL223:
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1561               		.loc 1 605 20 view .LVU552
 1562 02d8 8093 F100 		sts 241,r24
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1563               		.loc 1 605 29 view .LVU553
 1564 02dc CF01      		movw r24,r30
 1565               	.LVL224:
 1566               	.L124:
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1567               		.loc 1 606 13 is_stmt 1 view .LVU554
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1568               		.loc 1 606 29 is_stmt 0 view .LVU555
 1569 02de FC01      		movw r30,r24
 1570               	.LVL225:
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1571               		.loc 1 606 22 view .LVU556
 1572 02e0 8191      		ld r24,Z+
 1573               	.LVL226:
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1574               		.loc 1 606 20 view .LVU557
 1575 02e2 8093 F100 		sts 241,r24
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1576               		.loc 1 606 29 view .LVU558
 1577 02e6 CF01      		movw r24,r30
 1578               	.LVL227:
 1579               	.L125:
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1580               		.loc 1 607 13 is_stmt 1 view .LVU559
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1581               		.loc 1 607 29 is_stmt 0 view .LVU560
 1582 02e8 FC01      		movw r30,r24
 1583               	.LVL228:
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1584               		.loc 1 607 22 view .LVU561
 1585 02ea 8191      		ld r24,Z+
 1586               	.LVL229:
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1587               		.loc 1 607 20 view .LVU562
 1588 02ec 8093 F100 		sts 241,r24
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1589               		.loc 1 607 29 view .LVU563
 1590 02f0 CF01      		movw r24,r30
 1591               	.LVL230:
 1592               	.L126:
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1593               		.loc 1 608 13 is_stmt 1 view .LVU564
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1594               		.loc 1 608 29 is_stmt 0 view .LVU565
 1595 02f2 FC01      		movw r30,r24
 1596               	.LVL231:
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1597               		.loc 1 608 22 view .LVU566
 1598 02f4 8191      		ld r24,Z+
 1599               	.LVL232:
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1600               		.loc 1 608 20 view .LVU567
 1601 02f6 8093 F100 		sts 241,r24
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1602               		.loc 1 608 29 view .LVU568
 1603 02fa CF01      		movw r24,r30
 1604               	.LVL233:
 1605               	.L127:
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1606               		.loc 1 609 13 is_stmt 1 view .LVU569
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1607               		.loc 1 609 29 is_stmt 0 view .LVU570
 1608 02fc FC01      		movw r30,r24
 1609               	.LVL234:
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1610               		.loc 1 609 22 view .LVU571
 1611 02fe 8191      		ld r24,Z+
 1612               	.LVL235:
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1613               		.loc 1 609 20 view .LVU572
 1614 0300 8093 F100 		sts 241,r24
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1615               		.loc 1 609 29 view .LVU573
 1616 0304 CF01      		movw r24,r30
 1617               	.LVL236:
 1618               	.L128:
 610:usb_serial.c  **** 			default:
 1619               		.loc 1 610 13 is_stmt 1 view .LVU574
 610:usb_serial.c  **** 			default:
 1620               		.loc 1 610 29 is_stmt 0 view .LVU575
 1621 0306 FC01      		movw r30,r24
 1622               	.LVL237:
 610:usb_serial.c  **** 			default:
 1623               		.loc 1 610 22 view .LVU576
 1624 0308 8191      		ld r24,Z+
 1625               	.LVL238:
 610:usb_serial.c  **** 			default:
 1626               		.loc 1 610 20 view .LVU577
 1627 030a 8093 F100 		sts 241,r24
 610:usb_serial.c  **** 			default:
 1628               		.loc 1 610 29 view .LVU578
 1629 030e CF01      		movw r24,r30
 1630               	.LVL239:
 1631               	.L64:
 612:usb_serial.c  **** 			case  0: break;
 1632               		.loc 1 612 13 is_stmt 1 view .LVU579
 612:usb_serial.c  **** 			case  0: break;
 1633               		.loc 1 612 29 is_stmt 0 view .LVU580
 1634 0310 FC01      		movw r30,r24
 1635               	.LVL240:
 612:usb_serial.c  **** 			case  0: break;
 1636               		.loc 1 612 22 view .LVU581
 1637 0312 8191      		ld r24,Z+
 1638               	.LVL241:
 612:usb_serial.c  **** 			case  0: break;
 1639               		.loc 1 612 20 view .LVU582
 1640 0314 8093 F100 		sts 241,r24
 612:usb_serial.c  **** 			case  0: break;
 1641               		.loc 1 612 29 view .LVU583
 1642 0318 CF01      		movw r24,r30
 1643               	.LVL242:
 1644               	.L129:
 613:usb_serial.c  **** 		}
 1645               		.loc 1 613 13 is_stmt 1 view .LVU584
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1646               		.loc 1 616 3 view .LVU585
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1647               		.loc 1 616 9 is_stmt 0 view .LVU586
 1648 031a E091 E800 		lds r30,232
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1649               		.loc 1 616 6 view .LVU587
 1650 031e E5FF      		sbrs r30,5
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1651               		.loc 1 616 30 is_stmt 1 discriminator 1 view .LVU588
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1652               		.loc 1 616 37 is_stmt 0 discriminator 1 view .LVU589
 1653 0320 5093 E800 		sts 232,r21
 1654               	.L130:
 617:usb_serial.c  **** 		SREG = intr_state;
 1655               		.loc 1 617 3 is_stmt 1 view .LVU590
 617:usb_serial.c  **** 		SREG = intr_state;
 1656               		.loc 1 617 24 is_stmt 0 view .LVU591
 1657 0324 A093 0000 		sts transmit_flush_timer,r26
 618:usb_serial.c  **** 	}
 1658               		.loc 1 618 3 is_stmt 1 view .LVU592
 618:usb_serial.c  **** 	}
 1659               		.loc 1 618 8 is_stmt 0 view .LVU593
 1660 0328 2FBF      		out __SREG__,r18
 1661 032a 00C0      		rjmp .L58
 1662               		.cfi_endproc
 1663               	.LFE8:
 1665               		.section	.text.usb_serial_flush_output,"ax",@progbits
 1666               	.global	usb_serial_flush_output
 1668               	usb_serial_flush_output:
 1669               	.LFB9:
 629:usb_serial.c  **** 	uint8_t intr_state;
 1670               		.loc 1 629 1 is_stmt 1 view -0
 1671               		.cfi_startproc
 1672               	/* prologue: function */
 1673               	/* frame size = 0 */
 1674               	/* stack size = 0 */
 1675               	.L__stack_usage = 0
 630:usb_serial.c  **** 
 1676               		.loc 1 630 2 view .LVU595
 632:usb_serial.c  **** 	cli();
 1677               		.loc 1 632 2 view .LVU596
 632:usb_serial.c  **** 	cli();
 1678               		.loc 1 632 13 is_stmt 0 view .LVU597
 1679 0000 8FB7      		in r24,__SREG__
 1680               	.LVL243:
 633:usb_serial.c  **** 	if (transmit_flush_timer) {
 1681               		.loc 1 633 2 is_stmt 1 view .LVU598
 1682               	/* #APP */
 1683               	 ;  633 "usb_serial.c" 1
 1684 0002 F894      		cli
 1685               	 ;  0 "" 2
 634:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 1686               		.loc 1 634 2 view .LVU599
 634:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 1687               		.loc 1 634 6 is_stmt 0 view .LVU600
 1688               	/* #NOAPP */
 1689 0004 9091 0000 		lds r25,transmit_flush_timer
 634:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 1690               		.loc 1 634 5 view .LVU601
 1691 0008 9923      		tst r25
 1692 000a 01F0      		breq .L140
 635:usb_serial.c  **** 		UEINTX = 0x3A;
 1693               		.loc 1 635 3 is_stmt 1 view .LVU602
 635:usb_serial.c  **** 		UEINTX = 0x3A;
 1694               		.loc 1 635 9 is_stmt 0 view .LVU603
 1695 000c 94E0      		ldi r25,lo8(4)
 1696 000e 9093 E900 		sts 233,r25
 636:usb_serial.c  **** 		transmit_flush_timer = 0;
 1697               		.loc 1 636 3 is_stmt 1 view .LVU604
 636:usb_serial.c  **** 		transmit_flush_timer = 0;
 1698               		.loc 1 636 10 is_stmt 0 view .LVU605
 1699 0012 9AE3      		ldi r25,lo8(58)
 1700 0014 9093 E800 		sts 232,r25
 637:usb_serial.c  **** 	}
 1701               		.loc 1 637 3 is_stmt 1 view .LVU606
 637:usb_serial.c  **** 	}
 1702               		.loc 1 637 24 is_stmt 0 view .LVU607
 1703 0018 1092 0000 		sts transmit_flush_timer,__zero_reg__
 1704               	.L140:
 639:usb_serial.c  **** }
 1705               		.loc 1 639 2 is_stmt 1 view .LVU608
 639:usb_serial.c  **** }
 1706               		.loc 1 639 7 is_stmt 0 view .LVU609
 1707 001c 8FBF      		out __SREG__,r24
 1708               	/* epilogue start */
 640:usb_serial.c  **** 
 1709               		.loc 1 640 1 view .LVU610
 1710 001e 0895      		ret
 1711               		.cfi_endproc
 1712               	.LFE9:
 1714               		.section	.text.usb_serial_get_baud,"ax",@progbits
 1715               	.global	usb_serial_get_baud
 1717               	usb_serial_get_baud:
 1718               	.LFB10:
 648:usb_serial.c  **** 	return *(uint32_t *)cdc_line_coding;
 1719               		.loc 1 648 1 is_stmt 1 view -0
 1720               		.cfi_startproc
 1721               	/* prologue: function */
 1722               	/* frame size = 0 */
 1723               	/* stack size = 0 */
 1724               	.L__stack_usage = 0
 649:usb_serial.c  **** }
 1725               		.loc 1 649 2 view .LVU612
 649:usb_serial.c  **** }
 1726               		.loc 1 649 9 is_stmt 0 view .LVU613
 1727 0000 6091 0000 		lds r22,cdc_line_coding
 1728 0004 7091 0000 		lds r23,cdc_line_coding+1
 1729 0008 8091 0000 		lds r24,cdc_line_coding+2
 1730 000c 9091 0000 		lds r25,cdc_line_coding+3
 1731               	/* epilogue start */
 650:usb_serial.c  **** uint8_t usb_serial_get_stopbits(void)
 1732               		.loc 1 650 1 view .LVU614
 1733 0010 0895      		ret
 1734               		.cfi_endproc
 1735               	.LFE10:
 1737               		.section	.text.usb_serial_get_stopbits,"ax",@progbits
 1738               	.global	usb_serial_get_stopbits
 1740               	usb_serial_get_stopbits:
 1741               	.LFB11:
 652:usb_serial.c  **** 	return cdc_line_coding[4];
 1742               		.loc 1 652 1 is_stmt 1 view -0
 1743               		.cfi_startproc
 1744               	/* prologue: function */
 1745               	/* frame size = 0 */
 1746               	/* stack size = 0 */
 1747               	.L__stack_usage = 0
 653:usb_serial.c  **** }
 1748               		.loc 1 653 2 view .LVU616
 654:usb_serial.c  **** uint8_t usb_serial_get_paritytype(void)
 1749               		.loc 1 654 1 is_stmt 0 view .LVU617
 1750 0000 8091 0000 		lds r24,cdc_line_coding+4
 1751               	/* epilogue start */
 1752 0004 0895      		ret
 1753               		.cfi_endproc
 1754               	.LFE11:
 1756               		.section	.text.usb_serial_get_paritytype,"ax",@progbits
 1757               	.global	usb_serial_get_paritytype
 1759               	usb_serial_get_paritytype:
 1760               	.LFB12:
 656:usb_serial.c  **** 	return cdc_line_coding[5];
 1761               		.loc 1 656 1 is_stmt 1 view -0
 1762               		.cfi_startproc
 1763               	/* prologue: function */
 1764               	/* frame size = 0 */
 1765               	/* stack size = 0 */
 1766               	.L__stack_usage = 0
 657:usb_serial.c  **** }
 1767               		.loc 1 657 2 view .LVU619
 658:usb_serial.c  **** uint8_t usb_serial_get_numbits(void)
 1768               		.loc 1 658 1 is_stmt 0 view .LVU620
 1769 0000 8091 0000 		lds r24,cdc_line_coding+5
 1770               	/* epilogue start */
 1771 0004 0895      		ret
 1772               		.cfi_endproc
 1773               	.LFE12:
 1775               		.section	.text.usb_serial_get_numbits,"ax",@progbits
 1776               	.global	usb_serial_get_numbits
 1778               	usb_serial_get_numbits:
 1779               	.LFB13:
 660:usb_serial.c  **** 	return cdc_line_coding[6];
 1780               		.loc 1 660 1 is_stmt 1 view -0
 1781               		.cfi_startproc
 1782               	/* prologue: function */
 1783               	/* frame size = 0 */
 1784               	/* stack size = 0 */
 1785               	.L__stack_usage = 0
 661:usb_serial.c  **** }
 1786               		.loc 1 661 2 view .LVU622
 662:usb_serial.c  **** uint8_t usb_serial_get_control(void)
 1787               		.loc 1 662 1 is_stmt 0 view .LVU623
 1788 0000 8091 0000 		lds r24,cdc_line_coding+6
 1789               	/* epilogue start */
 1790 0004 0895      		ret
 1791               		.cfi_endproc
 1792               	.LFE13:
 1794               		.section	.text.usb_serial_get_control,"ax",@progbits
 1795               	.global	usb_serial_get_control
 1797               	usb_serial_get_control:
 1798               	.LFB14:
 664:usb_serial.c  **** 	return cdc_line_rtsdtr;
 1799               		.loc 1 664 1 is_stmt 1 view -0
 1800               		.cfi_startproc
 1801               	/* prologue: function */
 1802               	/* frame size = 0 */
 1803               	/* stack size = 0 */
 1804               	.L__stack_usage = 0
 665:usb_serial.c  **** }
 1805               		.loc 1 665 2 view .LVU625
 666:usb_serial.c  **** // write the control signals, DCD, DSR, RI, etc
 1806               		.loc 1 666 1 is_stmt 0 view .LVU626
 1807 0000 8091 0000 		lds r24,cdc_line_rtsdtr
 1808               	/* epilogue start */
 1809 0004 0895      		ret
 1810               		.cfi_endproc
 1811               	.LFE14:
 1813               		.section	.text.usb_serial_set_control,"ax",@progbits
 1814               	.global	usb_serial_set_control
 1816               	usb_serial_set_control:
 1817               	.LVL244:
 1818               	.LFB15:
 674:usb_serial.c  **** 	uint8_t intr_state;
 1819               		.loc 1 674 1 is_stmt 1 view -0
 1820               		.cfi_startproc
 1821               	/* prologue: function */
 1822               	/* frame size = 0 */
 1823               	/* stack size = 0 */
 1824               	.L__stack_usage = 0
 675:usb_serial.c  **** 
 1825               		.loc 1 675 2 view .LVU628
 677:usb_serial.c  **** 	cli();
 1826               		.loc 1 677 2 view .LVU629
 677:usb_serial.c  **** 	cli();
 1827               		.loc 1 677 13 is_stmt 0 view .LVU630
 1828 0000 9FB7      		in r25,__SREG__
 1829               	.LVL245:
 678:usb_serial.c  **** 	if (!usb_configuration) {
 1830               		.loc 1 678 2 is_stmt 1 view .LVU631
 1831               	/* #APP */
 1832               	 ;  678 "usb_serial.c" 1
 1833 0002 F894      		cli
 1834               	 ;  0 "" 2
 679:usb_serial.c  **** 		// we're not enumerated/configured
 1835               		.loc 1 679 2 view .LVU632
 679:usb_serial.c  **** 		// we're not enumerated/configured
 1836               		.loc 1 679 6 is_stmt 0 view .LVU633
 1837               	/* #NOAPP */
 1838 0004 2091 0000 		lds r18,usb_configuration
 679:usb_serial.c  **** 		// we're not enumerated/configured
 1839               		.loc 1 679 5 view .LVU634
 1840 0008 2111      		cpse r18,__zero_reg__
 1841 000a 00C0      		rjmp .L150
 1842               	.L153:
 690:usb_serial.c  **** 		return -1;
 1843               		.loc 1 690 3 is_stmt 1 view .LVU635
 690:usb_serial.c  **** 		return -1;
 1844               		.loc 1 690 8 is_stmt 0 view .LVU636
 1845 000c 9FBF      		out __SREG__,r25
 691:usb_serial.c  **** 	}
 1846               		.loc 1 691 3 is_stmt 1 view .LVU637
 691:usb_serial.c  **** 	}
 1847               		.loc 1 691 10 is_stmt 0 view .LVU638
 1848 000e 8FEF      		ldi r24,lo8(-1)
 1849               	.LVL246:
 691:usb_serial.c  **** 	}
 1850               		.loc 1 691 10 view .LVU639
 1851 0010 0895      		ret
 1852               	.LVL247:
 1853               	.L150:
 685:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 1854               		.loc 1 685 2 is_stmt 1 view .LVU640
 685:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 1855               		.loc 1 685 8 is_stmt 0 view .LVU641
 1856 0012 22E0      		ldi r18,lo8(2)
 1857 0014 2093 E900 		sts 233,r18
 686:usb_serial.c  **** 		// unable to write
 1858               		.loc 1 686 2 is_stmt 1 view .LVU642
 686:usb_serial.c  **** 		// unable to write
 1859               		.loc 1 686 8 is_stmt 0 view .LVU643
 1860 0018 2091 E800 		lds r18,232
 686:usb_serial.c  **** 		// unable to write
 1861               		.loc 1 686 5 view .LVU644
 1862 001c 25FF      		sbrs r18,5
 1863 001e 00C0      		rjmp .L153
 693:usb_serial.c  **** 	UEDATX = 0x20;
 1864               		.loc 1 693 2 is_stmt 1 view .LVU645
 693:usb_serial.c  **** 	UEDATX = 0x20;
 1865               		.loc 1 693 9 is_stmt 0 view .LVU646
 1866 0020 21EA      		ldi r18,lo8(-95)
 1867 0022 2093 F100 		sts 241,r18
 694:usb_serial.c  **** 	UEDATX = 0;
 1868               		.loc 1 694 2 is_stmt 1 view .LVU647
 694:usb_serial.c  **** 	UEDATX = 0;
 1869               		.loc 1 694 9 is_stmt 0 view .LVU648
 1870 0026 20E2      		ldi r18,lo8(32)
 1871 0028 2093 F100 		sts 241,r18
 695:usb_serial.c  **** 	UEDATX = 0;
 1872               		.loc 1 695 2 is_stmt 1 view .LVU649
 695:usb_serial.c  **** 	UEDATX = 0;
 1873               		.loc 1 695 9 is_stmt 0 view .LVU650
 1874 002c 1092 F100 		sts 241,__zero_reg__
 696:usb_serial.c  **** 	UEDATX = 0; // 0 seems to work nicely.  what if this is 1??
 1875               		.loc 1 696 2 is_stmt 1 view .LVU651
 696:usb_serial.c  **** 	UEDATX = 0; // 0 seems to work nicely.  what if this is 1??
 1876               		.loc 1 696 9 is_stmt 0 view .LVU652
 1877 0030 1092 F100 		sts 241,__zero_reg__
 697:usb_serial.c  **** 	UEDATX = 0;
 1878               		.loc 1 697 2 is_stmt 1 view .LVU653
 697:usb_serial.c  **** 	UEDATX = 0;
 1879               		.loc 1 697 9 is_stmt 0 view .LVU654
 1880 0034 1092 F100 		sts 241,__zero_reg__
 698:usb_serial.c  **** 	UEDATX = 1;
 1881               		.loc 1 698 2 is_stmt 1 view .LVU655
 698:usb_serial.c  **** 	UEDATX = 1;
 1882               		.loc 1 698 9 is_stmt 0 view .LVU656
 1883 0038 1092 F100 		sts 241,__zero_reg__
 699:usb_serial.c  **** 	UEDATX = 0;
 1884               		.loc 1 699 2 is_stmt 1 view .LVU657
 699:usb_serial.c  **** 	UEDATX = 0;
 1885               		.loc 1 699 9 is_stmt 0 view .LVU658
 1886 003c 21E0      		ldi r18,lo8(1)
 1887 003e 2093 F100 		sts 241,r18
 700:usb_serial.c  **** 	UEDATX = signals;
 1888               		.loc 1 700 2 is_stmt 1 view .LVU659
 700:usb_serial.c  **** 	UEDATX = signals;
 1889               		.loc 1 700 9 is_stmt 0 view .LVU660
 1890 0042 1092 F100 		sts 241,__zero_reg__
 701:usb_serial.c  **** 	UEINTX = 0x3A;
 1891               		.loc 1 701 2 is_stmt 1 view .LVU661
 701:usb_serial.c  **** 	UEINTX = 0x3A;
 1892               		.loc 1 701 9 is_stmt 0 view .LVU662
 1893 0046 8093 F100 		sts 241,r24
 702:usb_serial.c  **** 	SREG = intr_state;
 1894               		.loc 1 702 2 is_stmt 1 view .LVU663
 702:usb_serial.c  **** 	SREG = intr_state;
 1895               		.loc 1 702 9 is_stmt 0 view .LVU664
 1896 004a 8AE3      		ldi r24,lo8(58)
 1897               	.LVL248:
 702:usb_serial.c  **** 	SREG = intr_state;
 1898               		.loc 1 702 9 view .LVU665
 1899 004c 8093 E800 		sts 232,r24
 1900               	.LVL249:
 703:usb_serial.c  **** 	return 0;
 1901               		.loc 1 703 2 is_stmt 1 view .LVU666
 703:usb_serial.c  **** 	return 0;
 1902               		.loc 1 703 7 is_stmt 0 view .LVU667
 1903 0050 9FBF      		out __SREG__,r25
 704:usb_serial.c  **** }
 1904               		.loc 1 704 2 is_stmt 1 view .LVU668
 704:usb_serial.c  **** }
 1905               		.loc 1 704 9 is_stmt 0 view .LVU669
 1906 0052 80E0      		ldi r24,0
 1907               	/* epilogue start */
 705:usb_serial.c  **** 
 1908               		.loc 1 705 1 view .LVU670
 1909 0054 0895      		ret
 1910               		.cfi_endproc
 1911               	.LFE15:
 1913               		.section	.text.__vector_10,"ax",@progbits
 1914               	.global	__vector_10
 1916               	__vector_10:
 1917               	.LFB16:
 720:usb_serial.c  **** 	uint8_t intbits, t;
 1918               		.loc 1 720 1 is_stmt 1 view -0
 1919               		.cfi_startproc
 1920 0000 1F92 1FB6 		__gcc_isr 1
 1920      1F92 1124 
 1920      8F93 
 1921 000a 9F93      		push r25
 1922               	.LCFI0:
 1923               		.cfi_def_cfa_offset 3
 1924               		.cfi_offset 25, -2
 1925               	/* prologue: Signal */
 1926               	/* frame size = 0 */
 1927               	/* stack size = 1...5 */
 1928               	.L__stack_usage = 1 + __gcc_isr.n_pushed
 721:usb_serial.c  **** 
 1929               		.loc 1 721 2 view .LVU672
 723:usb_serial.c  ****         UDINT = 0;
 1930               		.loc 1 723 9 view .LVU673
 723:usb_serial.c  ****         UDINT = 0;
 1931               		.loc 1 723 17 is_stmt 0 view .LVU674
 1932 000c 8091 E100 		lds r24,225
 1933               	.LVL250:
 724:usb_serial.c  ****         if (intbits & (1<<EORSTI)) {
 1934               		.loc 1 724 9 is_stmt 1 view .LVU675
 724:usb_serial.c  ****         if (intbits & (1<<EORSTI)) {
 1935               		.loc 1 724 15 is_stmt 0 view .LVU676
 1936 0010 1092 E100 		sts 225,__zero_reg__
 725:usb_serial.c  **** 		UENUM = 0;
 1937               		.loc 1 725 9 is_stmt 1 view .LVU677
 725:usb_serial.c  **** 		UENUM = 0;
 1938               		.loc 1 725 12 is_stmt 0 view .LVU678
 1939 0014 83FF      		sbrs r24,3
 1940 0016 00C0      		rjmp .L155
 726:usb_serial.c  **** 		UECONX = 1;
 1941               		.loc 1 726 3 is_stmt 1 view .LVU679
 726:usb_serial.c  **** 		UECONX = 1;
 1942               		.loc 1 726 9 is_stmt 0 view .LVU680
 1943 0018 1092 E900 		sts 233,__zero_reg__
 727:usb_serial.c  **** 		UECFG0X = EP_TYPE_CONTROL;
 1944               		.loc 1 727 3 is_stmt 1 view .LVU681
 727:usb_serial.c  **** 		UECFG0X = EP_TYPE_CONTROL;
 1945               		.loc 1 727 10 is_stmt 0 view .LVU682
 1946 001c 91E0      		ldi r25,lo8(1)
 1947 001e 9093 EB00 		sts 235,r25
 728:usb_serial.c  **** 		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 1948               		.loc 1 728 3 is_stmt 1 view .LVU683
 728:usb_serial.c  **** 		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 1949               		.loc 1 728 11 is_stmt 0 view .LVU684
 1950 0022 1092 EC00 		sts 236,__zero_reg__
 729:usb_serial.c  **** 		UEIENX = (1<<RXSTPE);
 1951               		.loc 1 729 3 is_stmt 1 view .LVU685
 729:usb_serial.c  **** 		UEIENX = (1<<RXSTPE);
 1952               		.loc 1 729 11 is_stmt 0 view .LVU686
 1953 0026 92E1      		ldi r25,lo8(18)
 1954 0028 9093 ED00 		sts 237,r25
 730:usb_serial.c  **** 		usb_configuration = 0;
 1955               		.loc 1 730 3 is_stmt 1 view .LVU687
 730:usb_serial.c  **** 		usb_configuration = 0;
 1956               		.loc 1 730 10 is_stmt 0 view .LVU688
 1957 002c 98E0      		ldi r25,lo8(8)
 1958 002e 9093 F000 		sts 240,r25
 731:usb_serial.c  **** 		cdc_line_rtsdtr = 0;
 1959               		.loc 1 731 3 is_stmt 1 view .LVU689
 731:usb_serial.c  **** 		cdc_line_rtsdtr = 0;
 1960               		.loc 1 731 21 is_stmt 0 view .LVU690
 1961 0032 1092 0000 		sts usb_configuration,__zero_reg__
 732:usb_serial.c  ****         }
 1962               		.loc 1 732 3 is_stmt 1 view .LVU691
 732:usb_serial.c  ****         }
 1963               		.loc 1 732 19 is_stmt 0 view .LVU692
 1964 0036 1092 0000 		sts cdc_line_rtsdtr,__zero_reg__
 1965               	.L155:
 734:usb_serial.c  **** 		if (usb_configuration) {
 1966               		.loc 1 734 2 is_stmt 1 view .LVU693
 734:usb_serial.c  **** 		if (usb_configuration) {
 1967               		.loc 1 734 5 is_stmt 0 view .LVU694
 1968 003a 82FF      		sbrs r24,2
 1969 003c 00C0      		rjmp .L154
 735:usb_serial.c  **** 			t = transmit_flush_timer;
 1970               		.loc 1 735 3 is_stmt 1 view .LVU695
 735:usb_serial.c  **** 			t = transmit_flush_timer;
 1971               		.loc 1 735 7 is_stmt 0 view .LVU696
 1972 003e 8091 0000 		lds r24,usb_configuration
 1973               	.LVL251:
 735:usb_serial.c  **** 			t = transmit_flush_timer;
 1974               		.loc 1 735 6 view .LVU697
 1975 0042 8823      		tst r24
 1976 0044 01F0      		breq .L154
 736:usb_serial.c  **** 			if (t) {
 1977               		.loc 1 736 4 is_stmt 1 view .LVU698
 736:usb_serial.c  **** 			if (t) {
 1978               		.loc 1 736 6 is_stmt 0 view .LVU699
 1979 0046 8091 0000 		lds r24,transmit_flush_timer
 1980               	.LVL252:
 737:usb_serial.c  **** 				transmit_flush_timer = --t;
 1981               		.loc 1 737 4 is_stmt 1 view .LVU700
 737:usb_serial.c  **** 				transmit_flush_timer = --t;
 1982               		.loc 1 737 7 is_stmt 0 view .LVU701
 1983 004a 8823      		tst r24
 1984 004c 01F0      		breq .L154
 738:usb_serial.c  **** 				if (!t) {
 1985               		.loc 1 738 5 is_stmt 1 view .LVU702
 738:usb_serial.c  **** 				if (!t) {
 1986               		.loc 1 738 26 is_stmt 0 view .LVU703
 1987 004e 8150      		subi r24,lo8(-(-1))
 1988               	.LVL253:
 738:usb_serial.c  **** 				if (!t) {
 1989               		.loc 1 738 26 view .LVU704
 1990 0050 8093 0000 		sts transmit_flush_timer,r24
 739:usb_serial.c  **** 					UENUM = CDC_TX_ENDPOINT;
 1991               		.loc 1 739 5 is_stmt 1 view .LVU705
 739:usb_serial.c  **** 					UENUM = CDC_TX_ENDPOINT;
 1992               		.loc 1 739 8 is_stmt 0 view .LVU706
 1993 0054 8111      		cpse r24,__zero_reg__
 1994 0056 00C0      		rjmp .L154
 740:usb_serial.c  **** 					UEINTX = 0x3A;
 1995               		.loc 1 740 6 is_stmt 1 view .LVU707
 740:usb_serial.c  **** 					UEINTX = 0x3A;
 1996               		.loc 1 740 12 is_stmt 0 view .LVU708
 1997 0058 84E0      		ldi r24,lo8(4)
 1998               	.LVL254:
 740:usb_serial.c  **** 					UEINTX = 0x3A;
 1999               		.loc 1 740 12 view .LVU709
 2000 005a 8093 E900 		sts 233,r24
 2001               	.LVL255:
 741:usb_serial.c  **** 				}
 2002               		.loc 1 741 6 is_stmt 1 view .LVU710
 741:usb_serial.c  **** 				}
 2003               		.loc 1 741 13 is_stmt 0 view .LVU711
 2004 005e 8AE3      		ldi r24,lo8(58)
 2005 0060 8093 E800 		sts 232,r24
 2006               	.L154:
 2007               	/* epilogue start */
 746:usb_serial.c  **** 
 2008               		.loc 1 746 1 view .LVU712
 2009 0064 9F91      		pop r25
 2010 0066 8F91 1F90 		__gcc_isr 2
 2010      1FBE 1F90 
 2011 006e 1895      		reti
 2012               		__gcc_isr 0,r24
 2013               		.cfi_endproc
 2014               	.LFE16:
 2016               		.section	.text.__vector_11,"ax",@progbits
 2017               	.global	__vector_11
 2019               	__vector_11:
 2020               	.LFB21:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 755:usb_serial.c  **** {
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 757:usb_serial.c  **** }
 758:usb_serial.c  **** static inline void usb_wait_receive_out(void)
 759:usb_serial.c  **** {
 760:usb_serial.c  **** 	while (!(UEINTX & (1<<RXOUTI))) ;
 761:usb_serial.c  **** }
 762:usb_serial.c  **** static inline void usb_ack_out(void)
 763:usb_serial.c  **** {
 764:usb_serial.c  **** 	UEINTX = ~(1<<RXOUTI);
 765:usb_serial.c  **** }
 766:usb_serial.c  **** 
 767:usb_serial.c  **** 
 768:usb_serial.c  **** 
 769:usb_serial.c  **** // USB Endpoint Interrupt - endpoint 0 is handled here.  The
 770:usb_serial.c  **** // other endpoints are manipulated by the user-callable
 771:usb_serial.c  **** // functions, and the start-of-frame interrupt.
 772:usb_serial.c  **** //
 773:usb_serial.c  **** ISR(USB_COM_vect)
 774:usb_serial.c  **** {
 2021               		.loc 1 774 1 is_stmt 1 view -0
 2022               		.cfi_startproc
 2023 0000 1F92      		push r1
 2024               	.LCFI1:
 2025               		.cfi_def_cfa_offset 3
 2026               		.cfi_offset 1, -2
 2027 0002 0F92      		push r0
 2028               	.LCFI2:
 2029               		.cfi_def_cfa_offset 4
 2030               		.cfi_offset 0, -3
 2031 0004 0FB6      		in r0,__SREG__
 2032 0006 0F92      		push r0
 2033 0008 1124      		clr __zero_reg__
 2034 000a EF92      		push r14
 2035               	.LCFI3:
 2036               		.cfi_def_cfa_offset 5
 2037               		.cfi_offset 14, -4
 2038 000c FF92      		push r15
 2039               	.LCFI4:
 2040               		.cfi_def_cfa_offset 6
 2041               		.cfi_offset 15, -5
 2042 000e 0F93      		push r16
 2043               	.LCFI5:
 2044               		.cfi_def_cfa_offset 7
 2045               		.cfi_offset 16, -6
 2046 0010 1F93      		push r17
 2047               	.LCFI6:
 2048               		.cfi_def_cfa_offset 8
 2049               		.cfi_offset 17, -7
 2050 0012 2F93      		push r18
 2051               	.LCFI7:
 2052               		.cfi_def_cfa_offset 9
 2053               		.cfi_offset 18, -8
 2054 0014 3F93      		push r19
 2055               	.LCFI8:
 2056               		.cfi_def_cfa_offset 10
 2057               		.cfi_offset 19, -9
 2058 0016 4F93      		push r20
 2059               	.LCFI9:
 2060               		.cfi_def_cfa_offset 11
 2061               		.cfi_offset 20, -10
 2062 0018 5F93      		push r21
 2063               	.LCFI10:
 2064               		.cfi_def_cfa_offset 12
 2065               		.cfi_offset 21, -11
 2066 001a 6F93      		push r22
 2067               	.LCFI11:
 2068               		.cfi_def_cfa_offset 13
 2069               		.cfi_offset 22, -12
 2070 001c 7F93      		push r23
 2071               	.LCFI12:
 2072               		.cfi_def_cfa_offset 14
 2073               		.cfi_offset 23, -13
 2074 001e 8F93      		push r24
 2075               	.LCFI13:
 2076               		.cfi_def_cfa_offset 15
 2077               		.cfi_offset 24, -14
 2078 0020 9F93      		push r25
 2079               	.LCFI14:
 2080               		.cfi_def_cfa_offset 16
 2081               		.cfi_offset 25, -15
 2082 0022 AF93      		push r26
 2083               	.LCFI15:
 2084               		.cfi_def_cfa_offset 17
 2085               		.cfi_offset 26, -16
 2086 0024 BF93      		push r27
 2087               	.LCFI16:
 2088               		.cfi_def_cfa_offset 18
 2089               		.cfi_offset 27, -17
 2090 0026 CF93      		push r28
 2091               	.LCFI17:
 2092               		.cfi_def_cfa_offset 19
 2093               		.cfi_offset 28, -18
 2094 0028 DF93      		push r29
 2095               	.LCFI18:
 2096               		.cfi_def_cfa_offset 20
 2097               		.cfi_offset 29, -19
 2098 002a EF93      		push r30
 2099               	.LCFI19:
 2100               		.cfi_def_cfa_offset 21
 2101               		.cfi_offset 30, -20
 2102 002c FF93      		push r31
 2103               	.LCFI20:
 2104               		.cfi_def_cfa_offset 22
 2105               		.cfi_offset 31, -21
 2106               	/* prologue: Signal */
 2107               	/* frame size = 0 */
 2108               	/* stack size = 21 */
 2109               	.L__stack_usage = 21
 775:usb_serial.c  ****         uint8_t intbits;
 2110               		.loc 1 775 9 view .LVU714
 776:usb_serial.c  **** 	const uint8_t *list;
 2111               		.loc 1 776 2 view .LVU715
 777:usb_serial.c  ****         const uint8_t *cfg;
 2112               		.loc 1 777 9 view .LVU716
 778:usb_serial.c  **** 	uint8_t i, n, len, en;
 2113               		.loc 1 778 2 view .LVU717
 779:usb_serial.c  **** 	uint8_t *p;
 2114               		.loc 1 779 2 view .LVU718
 780:usb_serial.c  **** 	uint8_t bmRequestType;
 2115               		.loc 1 780 2 view .LVU719
 781:usb_serial.c  **** 	uint8_t bRequest;
 2116               		.loc 1 781 2 view .LVU720
 782:usb_serial.c  **** 	uint16_t wValue;
 2117               		.loc 1 782 2 view .LVU721
 783:usb_serial.c  **** 	uint16_t wIndex;
 2118               		.loc 1 783 2 view .LVU722
 784:usb_serial.c  **** 	uint16_t wLength;
 2119               		.loc 1 784 2 view .LVU723
 785:usb_serial.c  **** 	uint16_t desc_val;
 2120               		.loc 1 785 2 view .LVU724
 786:usb_serial.c  **** 	const uint8_t *desc_addr;
 2121               		.loc 1 786 2 view .LVU725
 787:usb_serial.c  **** 	uint8_t	desc_length;
 2122               		.loc 1 787 2 view .LVU726
 788:usb_serial.c  **** 
 789:usb_serial.c  ****         UENUM = 0;
 2123               		.loc 1 789 9 view .LVU727
 2124               		.loc 1 789 15 is_stmt 0 view .LVU728
 2125 002e 1092 E900 		sts 233,__zero_reg__
 790:usb_serial.c  ****         intbits = UEINTX;
 2126               		.loc 1 790 9 is_stmt 1 view .LVU729
 2127               		.loc 1 790 17 is_stmt 0 view .LVU730
 2128 0032 8091 E800 		lds r24,232
 2129               	.LVL256:
 791:usb_serial.c  ****         if (intbits & (1<<RXSTPI)) {
 2130               		.loc 1 791 9 is_stmt 1 view .LVU731
 2131               		.loc 1 791 12 is_stmt 0 view .LVU732
 2132 0036 83FF      		sbrs r24,3
 2133 0038 00C0      		rjmp .L169
 792:usb_serial.c  ****                 bmRequestType = UEDATX;
 2134               		.loc 1 792 17 is_stmt 1 view .LVU733
 2135               		.loc 1 792 31 is_stmt 0 view .LVU734
 2136 003a D091 F100 		lds r29,241
 2137               	.LVL257:
 793:usb_serial.c  ****                 bRequest = UEDATX;
 2138               		.loc 1 793 17 is_stmt 1 view .LVU735
 2139               		.loc 1 793 26 is_stmt 0 view .LVU736
 2140 003e C091 F100 		lds r28,241
 2141               	.LVL258:
 794:usb_serial.c  ****                 wValue = UEDATX;
 2142               		.loc 1 794 17 is_stmt 1 view .LVU737
 2143               		.loc 1 794 26 is_stmt 0 view .LVU738
 2144 0042 E090 F100 		lds r14,241
 2145               	.LVL259:
 795:usb_serial.c  ****                 wValue |= (UEDATX << 8);
 2146               		.loc 1 795 17 is_stmt 1 view .LVU739
 2147               		.loc 1 795 28 is_stmt 0 view .LVU740
 2148 0046 8091 F100 		lds r24,241
 2149               	.LVL260:
 2150               		.loc 1 795 24 view .LVU741
 2151 004a F82E      		mov r15,r24
 2152               	.LVL261:
 796:usb_serial.c  ****                 wIndex = UEDATX;
 2153               		.loc 1 796 17 is_stmt 1 view .LVU742
 2154               		.loc 1 796 26 is_stmt 0 view .LVU743
 2155 004c 0091 F100 		lds r16,241
 2156               	.LVL262:
 797:usb_serial.c  ****                 wIndex |= (UEDATX << 8);
 2157               		.loc 1 797 17 is_stmt 1 view .LVU744
 2158               		.loc 1 797 28 is_stmt 0 view .LVU745
 2159 0050 8091 F100 		lds r24,241
 2160               		.loc 1 797 24 view .LVU746
 2161 0054 182F      		mov r17,r24
 2162               	.LVL263:
 798:usb_serial.c  ****                 wLength = UEDATX;
 2163               		.loc 1 798 17 is_stmt 1 view .LVU747
 2164               		.loc 1 798 27 is_stmt 0 view .LVU748
 2165 0056 8091 F100 		lds r24,241
 2166               	.LVL264:
 799:usb_serial.c  ****                 wLength |= (UEDATX << 8);
 2167               		.loc 1 799 17 is_stmt 1 view .LVU749
 2168               		.loc 1 799 29 is_stmt 0 view .LVU750
 2169 005a 9091 F100 		lds r25,241
 2170               	.LVL265:
 800:usb_serial.c  ****                 UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 2171               		.loc 1 800 17 is_stmt 1 view .LVU751
 2172               		.loc 1 800 24 is_stmt 0 view .LVU752
 2173 005e 22EF      		ldi r18,lo8(-14)
 2174 0060 2093 E800 		sts 232,r18
 801:usb_serial.c  ****                 if (bRequest == GET_DESCRIPTOR) {
 2175               		.loc 1 801 17 is_stmt 1 view .LVU753
 2176               		.loc 1 801 20 is_stmt 0 view .LVU754
 2177 0064 C630      		cpi r28,lo8(6)
 2178 0066 01F0      		breq .+2
 2179 0068 00C0      		rjmp .L211
 2180 006a 20E0      		ldi r18,lo8(descriptor_list)
 2181 006c 30E0      		ldi r19,hi8(descriptor_list)
 2182               	.L178:
 2183               	.LVL266:
 802:usb_serial.c  **** 			list = (const uint8_t *)descriptor_list;
 803:usb_serial.c  **** 			for (i=0; ; i++) {
 804:usb_serial.c  **** 				if (i >= NUM_DESC_LIST) {
 805:usb_serial.c  **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 806:usb_serial.c  **** 					return;
 807:usb_serial.c  **** 				}
 808:usb_serial.c  **** 				desc_val = pgm_read_word(list);
 2184               		.loc 1 808 5 is_stmt 1 view .LVU755
 2185               	.LBB60:
 2186               		.loc 1 808 16 view .LVU756
 2187               		.loc 1 808 16 view .LVU757
 2188               		.loc 1 808 16 view .LVU758
 2189 006e F901      		movw r30,r18
 2190               	/* #APP */
 2191               	 ;  808 "usb_serial.c" 1
 2192 0070 4591      		lpm r20, Z+
 2193 0072 5491      		lpm r21, Z
 2194               		
 2195               	 ;  0 "" 2
 2196               	.LVL267:
 2197               		.loc 1 808 16 view .LVU759
 2198               		.loc 1 808 16 is_stmt 0 view .LVU760
 2199               	/* #NOAPP */
 2200               	.LBE60:
 809:usb_serial.c  **** 				if (desc_val != wValue) {
 2201               		.loc 1 809 5 is_stmt 1 view .LVU761
 2202               		.loc 1 809 8 is_stmt 0 view .LVU762
 2203 0074 E416      		cp r14,r20
 2204 0076 F506      		cpc r15,r21
 2205 0078 01F0      		breq .+2
 2206 007a 00C0      		rjmp .L173
 810:usb_serial.c  **** 					list += sizeof(struct descriptor_list_struct);
 811:usb_serial.c  **** 					continue;
 812:usb_serial.c  **** 				}
 813:usb_serial.c  **** 				list += 2;
 2207               		.loc 1 813 5 is_stmt 1 view .LVU763
 2208               	.LVL268:
 814:usb_serial.c  **** 				desc_val = pgm_read_word(list);
 2209               		.loc 1 814 5 view .LVU764
 2210               	.LBB61:
 2211               		.loc 1 814 16 view .LVU765
 2212               		.loc 1 814 16 view .LVU766
 2213               		.loc 1 814 16 view .LVU767
 2214 007c F901      		movw r30,r18
 2215 007e 3296      		adiw r30,2
 2216               	.LVL269:
 2217               		.loc 1 814 16 is_stmt 0 view .LVU768
 2218               	/* #APP */
 2219               	 ;  814 "usb_serial.c" 1
 2220 0080 4591      		lpm r20, Z+
 2221 0082 5491      		lpm r21, Z
 2222               		
 2223               	 ;  0 "" 2
 2224               	.LVL270:
 2225               		.loc 1 814 16 is_stmt 1 view .LVU769
 2226               		.loc 1 814 16 is_stmt 0 view .LVU770
 2227               	/* #NOAPP */
 2228               	.LBE61:
 815:usb_serial.c  **** 				if (desc_val != wIndex) {
 2229               		.loc 1 815 5 is_stmt 1 view .LVU771
 2230               		.loc 1 815 8 is_stmt 0 view .LVU772
 2231 0084 0417      		cp r16,r20
 2232 0086 1507      		cpc r17,r21
 2233 0088 01F0      		breq .+2
 2234 008a 00C0      		rjmp .L173
 816:usb_serial.c  **** 					list += sizeof(struct descriptor_list_struct)-2;
 817:usb_serial.c  **** 					continue;
 818:usb_serial.c  **** 				}
 819:usb_serial.c  **** 				list += 2;
 2235               		.loc 1 819 5 is_stmt 1 view .LVU773
 2236               	.LVL271:
 820:usb_serial.c  **** 				desc_addr = (const uint8_t *)pgm_read_word(list);
 2237               		.loc 1 820 5 view .LVU774
 2238               	.LBB62:
 2239               		.loc 1 820 34 view .LVU775
 2240               	.LBE62:
 819:usb_serial.c  **** 				desc_addr = (const uint8_t *)pgm_read_word(list);
 2241               		.loc 1 819 10 is_stmt 0 view .LVU776
 2242 008c F901      		movw r30,r18
 2243 008e 3496      		adiw r30,4
 2244               	.LVL272:
 2245               	.LBB63:
 2246               		.loc 1 820 34 is_stmt 1 view .LVU777
 2247               		.loc 1 820 34 view .LVU778
 2248               	/* #APP */
 2249               	 ;  820 "usb_serial.c" 1
 2250 0090 4591      		lpm r20, Z+
 2251 0092 5491      		lpm r21, Z
 2252               		
 2253               	 ;  0 "" 2
 2254               	.LVL273:
 2255               		.loc 1 820 34 view .LVU779
 2256               		.loc 1 820 34 is_stmt 0 view .LVU780
 2257               	/* #NOAPP */
 2258               	.LBE63:
 821:usb_serial.c  **** 				list += 2;
 2259               		.loc 1 821 5 is_stmt 1 view .LVU781
 822:usb_serial.c  **** 				desc_length = pgm_read_byte(list);
 2260               		.loc 1 822 5 view .LVU782
 2261               	.LBB64:
 2262               		.loc 1 822 19 view .LVU783
 2263               		.loc 1 822 19 view .LVU784
 2264               		.loc 1 822 19 view .LVU785
 2265               	.LBE64:
 821:usb_serial.c  **** 				list += 2;
 2266               		.loc 1 821 10 is_stmt 0 view .LVU786
 2267 0094 F901      		movw r30,r18
 2268 0096 3696      		adiw r30,6
 2269               	.LVL274:
 2270               	.LBB65:
 2271               		.loc 1 822 19 view .LVU787
 2272               	/* #APP */
 2273               	 ;  822 "usb_serial.c" 1
 2274 0098 E491      		lpm r30, Z
 2275               		
 2276               	 ;  0 "" 2
 2277               	.LVL275:
 2278               		.loc 1 822 19 is_stmt 1 view .LVU788
 2279               		.loc 1 822 19 is_stmt 0 view .LVU789
 2280               	/* #NOAPP */
 2281               	.LBE65:
 823:usb_serial.c  **** 				break;
 2282               		.loc 1 823 5 is_stmt 1 view .LVU790
 824:usb_serial.c  **** 			}
 825:usb_serial.c  **** 			len = (wLength < 256) ? wLength : 255;
 2283               		.loc 1 825 4 view .LVU791
 826:usb_serial.c  **** 			if (len > desc_length) len = desc_length;
 2284               		.loc 1 826 4 view .LVU792
 825:usb_serial.c  **** 			if (len > desc_length) len = desc_length;
 2285               		.loc 1 825 36 is_stmt 0 view .LVU793
 2286 009a 8F3F      		cpi r24,-1
 2287 009c 9105      		cpc r25,__zero_reg__
 2288 009e 01F0      		breq .L174
 2289 00a0 00F0      		brlo .L174
 2290 00a2 8FEF      		ldi r24,lo8(-1)
 2291 00a4 90E0      		ldi r25,0
 2292               	.LVL276:
 2293               	.L174:
 825:usb_serial.c  **** 			if (len > desc_length) len = desc_length;
 2294               		.loc 1 825 36 view .LVU794
 2295 00a6 E817      		cp r30,r24
 2296 00a8 00F4      		brsh .L175
 2297 00aa 8E2F      		mov r24,r30
 2298               	.L175:
 2299               	.LBB66:
 2300               	.LBB67:
 756:usb_serial.c  **** }
 2301               		.loc 1 756 9 view .LVU795
 2302 00ac 3EEF      		ldi r19,lo8(-2)
 2303               	.LVL277:
 2304               	.L179:
 756:usb_serial.c  **** }
 2305               		.loc 1 756 9 view .LVU796
 2306               	.LBE67:
 2307               	.LBE66:
 827:usb_serial.c  **** 			do {
 2308               		.loc 1 827 4 is_stmt 1 discriminator 1 view .LVU797
 828:usb_serial.c  **** 				// wait for host ready for IN packet
 829:usb_serial.c  **** 				do {
 2309               		.loc 1 829 5 discriminator 1 view .LVU798
 830:usb_serial.c  **** 					i = UEINTX;
 2310               		.loc 1 830 6 discriminator 1 view .LVU799
 2311               		.loc 1 830 8 is_stmt 0 discriminator 1 view .LVU800
 2312 00ae 9091 E800 		lds r25,232
 2313               	.LVL278:
 831:usb_serial.c  **** 				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 2314               		.loc 1 831 5 discriminator 1 view .LVU801
 2315 00b2 292F      		mov r18,r25
 2316 00b4 2570      		andi r18,lo8(5)
 2317 00b6 01F0      		breq .L179
 832:usb_serial.c  **** 				if (i & (1<<RXOUTI)) return;	// abort
 2318               		.loc 1 832 5 is_stmt 1 view .LVU802
 2319               		.loc 1 832 8 is_stmt 0 view .LVU803
 2320 00b8 92FD      		sbrc r25,2
 2321 00ba 00C0      		rjmp .L168
 833:usb_serial.c  **** 				// send IN packet
 834:usb_serial.c  **** 				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 2322               		.loc 1 834 5 is_stmt 1 view .LVU804
 2323               		.loc 1 834 7 is_stmt 0 view .LVU805
 2324 00bc 982F      		mov r25,r24
 2325               	.LVL279:
 2326               		.loc 1 834 7 view .LVU806
 2327 00be 8131      		cpi r24,lo8(17)
 2328 00c0 00F0      		brlo .L181
 2329 00c2 90E1      		ldi r25,lo8(16)
 2330               	.L181:
 2331               	.LVL280:
 835:usb_serial.c  **** 				for (i = n; i; i--) {
 2332               		.loc 1 835 5 is_stmt 1 view .LVU807
 2333               		.loc 1 835 5 is_stmt 0 view .LVU808
 2334 00c4 FA01      		movw r30,r20
 2335               		.loc 1 835 12 view .LVU809
 2336 00c6 292F      		mov r18,r25
 2337               	.LVL281:
 2338               	.L182:
 2339               		.loc 1 835 5 discriminator 1 view .LVU810
 2340 00c8 2111      		cpse r18,__zero_reg__
 2341 00ca 00C0      		rjmp .L183
 2342               		.loc 1 835 5 discriminator 1 view .LVU811
 2343 00cc 490F      		add r20,r25
 2344 00ce 511D      		adc r21,__zero_reg__
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 837:usb_serial.c  **** 				}
 838:usb_serial.c  **** 				len -= n;
 2345               		.loc 1 838 5 is_stmt 1 view .LVU812
 2346               		.loc 1 838 9 is_stmt 0 view .LVU813
 2347 00d0 E82F      		mov r30,r24
 2348               	.LVL282:
 2349               		.loc 1 838 9 view .LVU814
 2350 00d2 E91B      		sub r30,r25
 2351 00d4 9E2F      		mov r25,r30
 2352               	.LVL283:
 839:usb_serial.c  **** 				usb_send_in();
 2353               		.loc 1 839 5 is_stmt 1 view .LVU815
 2354               	.LBB69:
 2355               	.LBI66:
 754:usb_serial.c  **** {
 2356               		.loc 1 754 20 view .LVU816
 2357               	.LBB68:
 756:usb_serial.c  **** }
 2358               		.loc 1 756 2 view .LVU817
 756:usb_serial.c  **** }
 2359               		.loc 1 756 9 is_stmt 0 view .LVU818
 2360 00d6 3093 E800 		sts 232,r19
 2361               	.LBE68:
 2362               	.LBE69:
 840:usb_serial.c  **** 			} while (len || n == ENDPOINT0_SIZE);
 2363               		.loc 1 840 4 view .LVU819
 2364 00da E111      		cpse r30,__zero_reg__
 2365 00dc 00C0      		rjmp .L184
 2366               		.loc 1 840 17 discriminator 1 view .LVU820
 2367 00de 8031      		cpi r24,lo8(16)
 2368 00e0 00F4      		brsh .L184
 2369               	.LVL284:
 2370               	.L168:
 2371               	/* epilogue start */
 841:usb_serial.c  **** 			return;
 842:usb_serial.c  ****                 }
 843:usb_serial.c  **** 		if (bRequest == SET_ADDRESS) {
 844:usb_serial.c  **** 			usb_send_in();
 845:usb_serial.c  **** 			usb_wait_in_ready();
 846:usb_serial.c  **** 			UDADDR = wValue | (1<<ADDEN);
 847:usb_serial.c  **** 			return;
 848:usb_serial.c  **** 		}
 849:usb_serial.c  **** 		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 850:usb_serial.c  **** 			usb_configuration = wValue;
 851:usb_serial.c  **** 			cdc_line_rtsdtr = 0;
 852:usb_serial.c  **** 			transmit_flush_timer = 0;
 853:usb_serial.c  **** 			usb_send_in();
 854:usb_serial.c  **** 			cfg = endpoint_config_table;
 855:usb_serial.c  **** 			for (i=1; i<5; i++) {
 856:usb_serial.c  **** 				UENUM = i;
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 858:usb_serial.c  **** 				UECONX = en;
 859:usb_serial.c  **** 				if (en) {
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 862:usb_serial.c  **** 				}
 863:usb_serial.c  **** 			}
 864:usb_serial.c  ****         		UERST = 0x1E;
 865:usb_serial.c  ****         		UERST = 0;
 866:usb_serial.c  **** 			return;
 867:usb_serial.c  **** 		}
 868:usb_serial.c  **** 		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 869:usb_serial.c  **** 			usb_wait_in_ready();
 870:usb_serial.c  **** 			UEDATX = usb_configuration;
 871:usb_serial.c  **** 			usb_send_in();
 872:usb_serial.c  **** 			return;
 873:usb_serial.c  **** 		}
 874:usb_serial.c  **** 		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 875:usb_serial.c  **** 			usb_wait_in_ready();
 876:usb_serial.c  **** 			p = cdc_line_coding;
 877:usb_serial.c  **** 			for (i=0; i<7; i++) {
 878:usb_serial.c  **** 				UEDATX = *p++;
 879:usb_serial.c  **** 			}
 880:usb_serial.c  **** 			usb_send_in();
 881:usb_serial.c  **** 			return;
 882:usb_serial.c  **** 		}
 883:usb_serial.c  **** 		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 884:usb_serial.c  **** 			usb_wait_receive_out();
 885:usb_serial.c  **** 			p = cdc_line_coding;
 886:usb_serial.c  **** 			for (i=0; i<7; i++) {
 887:usb_serial.c  **** 				*p++ = UEDATX;
 888:usb_serial.c  **** 			}
 889:usb_serial.c  **** 			usb_ack_out();
 890:usb_serial.c  **** 			usb_send_in();
 891:usb_serial.c  **** 			return;
 892:usb_serial.c  **** 		}
 893:usb_serial.c  **** 		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 894:usb_serial.c  **** 			cdc_line_rtsdtr = wValue;
 895:usb_serial.c  **** 			usb_wait_in_ready();
 896:usb_serial.c  **** 			usb_send_in();
 897:usb_serial.c  **** 			return;
 898:usb_serial.c  **** 		}
 899:usb_serial.c  **** 		if (bRequest == GET_STATUS) {
 900:usb_serial.c  **** 			usb_wait_in_ready();
 901:usb_serial.c  **** 			i = 0;
 902:usb_serial.c  **** 			#ifdef SUPPORT_ENDPOINT_HALT
 903:usb_serial.c  **** 			if (bmRequestType == 0x82) {
 904:usb_serial.c  **** 				UENUM = wIndex;
 905:usb_serial.c  **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 906:usb_serial.c  **** 				UENUM = 0;
 907:usb_serial.c  **** 			}
 908:usb_serial.c  **** 			#endif
 909:usb_serial.c  **** 			UEDATX = i;
 910:usb_serial.c  **** 			UEDATX = 0;
 911:usb_serial.c  **** 			usb_send_in();
 912:usb_serial.c  **** 			return;
 913:usb_serial.c  **** 		}
 914:usb_serial.c  **** 		#ifdef SUPPORT_ENDPOINT_HALT
 915:usb_serial.c  **** 		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 916:usb_serial.c  **** 		  && bmRequestType == 0x02 && wValue == 0) {
 917:usb_serial.c  **** 			i = wIndex & 0x7F;
 918:usb_serial.c  **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 919:usb_serial.c  **** 				usb_send_in();
 920:usb_serial.c  **** 				UENUM = i;
 921:usb_serial.c  **** 				if (bRequest == SET_FEATURE) {
 922:usb_serial.c  **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);
 923:usb_serial.c  **** 				} else {
 924:usb_serial.c  **** 					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 925:usb_serial.c  **** 					UERST = (1 << i);
 926:usb_serial.c  **** 					UERST = 0;
 927:usb_serial.c  **** 				}
 928:usb_serial.c  **** 				return;
 929:usb_serial.c  **** 			}
 930:usb_serial.c  **** 		}
 931:usb_serial.c  **** 		#endif
 932:usb_serial.c  ****         }
 933:usb_serial.c  **** 	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 934:usb_serial.c  **** }...
 2372               		.loc 1 934 1 view .LVU821
 2373 00e2 FF91      		pop r31
 2374 00e4 EF91      		pop r30
 2375 00e6 DF91      		pop r29
 2376 00e8 CF91      		pop r28
 2377 00ea BF91      		pop r27
 2378 00ec AF91      		pop r26
 2379 00ee 9F91      		pop r25
 2380 00f0 8F91      		pop r24
 2381 00f2 7F91      		pop r23
 2382 00f4 6F91      		pop r22
 2383 00f6 5F91      		pop r21
 2384 00f8 4F91      		pop r20
 2385 00fa 3F91      		pop r19
 2386 00fc 2F91      		pop r18
 2387 00fe 1F91      		pop r17
 2388 0100 0F91      		pop r16
 2389 0102 FF90      		pop r15
 2390 0104 EF90      		pop r14
 2391 0106 0F90      		pop r0
 2392 0108 0FBE      		out __SREG__,r0
 2393 010a 0F90      		pop r0
 2394 010c 1F90      		pop r1
 2395 010e 1895      		reti
 2396               	.LVL285:
 2397               	.L173:
 804:usb_serial.c  **** 				if (i >= NUM_DESC_LIST) {
 2398               		.loc 1 804 5 is_stmt 1 view .LVU822
 2399 0110 295F      		subi r18,-7
 2400 0112 3F4F      		sbci r19,-1
 804:usb_serial.c  **** 				if (i >= NUM_DESC_LIST) {
 2401               		.loc 1 804 8 is_stmt 0 view .LVU823
 2402 0114 40E0      		ldi r20,hi8(descriptor_list+42)
 2403 0116 2030      		cpi r18,lo8(descriptor_list+42)
 2404 0118 3407      		cpc r19,r20
 2405               	.LVL286:
 804:usb_serial.c  **** 				if (i >= NUM_DESC_LIST) {
 2406               		.loc 1 804 8 view .LVU824
 2407 011a 01F0      		breq .+2
 2408 011c 00C0      		rjmp .L178
 2409               	.LVL287:
 2410               	.L169:
 933:usb_serial.c  **** 	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 2411               		.loc 1 933 2 is_stmt 1 view .LVU825
 933:usb_serial.c  **** 	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 2412               		.loc 1 933 9 is_stmt 0 view .LVU826
 2413 011e 81E2      		ldi r24,lo8(33)
 2414 0120 8093 EB00 		sts 235,r24
 2415 0124 00C0      		rjmp .L168
 2416               	.LVL288:
 2417               	.L184:
 774:usb_serial.c  **** {
 2418               		.loc 1 774 1 discriminator 1 view .LVU827
 2419 0126 892F      		mov r24,r25
 2420 0128 00C0      		rjmp .L179
 2421               	.LVL289:
 2422               	.L183:
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2423               		.loc 1 836 6 is_stmt 1 discriminator 3 view .LVU828
 2424               	.LBB70:
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2425               		.loc 1 836 15 discriminator 3 view .LVU829
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2426               		.loc 1 836 15 discriminator 3 view .LVU830
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2427               		.loc 1 836 15 discriminator 3 view .LVU831
 2428               	/* #APP */
 2429               	 ;  836 "usb_serial.c" 1
 2430 012a 6491      		lpm r22, Z
 2431               		
 2432               	 ;  0 "" 2
 2433               	.LVL290:
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2434               		.loc 1 836 15 discriminator 3 view .LVU832
 2435               	/* #NOAPP */
 2436               	.LBE70:
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2437               		.loc 1 836 13 is_stmt 0 discriminator 3 view .LVU833
 2438 012c 6093 F100 		sts 241,r22
 835:usb_serial.c  **** 				for (i = n; i; i--) {
 2439               		.loc 1 835 21 discriminator 3 view .LVU834
 2440 0130 2150      		subi r18,lo8(-(-1))
 2441               	.LVL291:
 835:usb_serial.c  **** 				for (i = n; i; i--) {
 2442               		.loc 1 835 21 discriminator 3 view .LVU835
 2443 0132 3196      		adiw r30,1
 2444               	.LVL292:
 835:usb_serial.c  **** 				for (i = n; i; i--) {
 2445               		.loc 1 835 21 discriminator 3 view .LVU836
 2446 0134 00C0      		rjmp .L182
 2447               	.LVL293:
 2448               	.L211:
 843:usb_serial.c  **** 		if (bRequest == SET_ADDRESS) {
 2449               		.loc 1 843 3 is_stmt 1 view .LVU837
 843:usb_serial.c  **** 		if (bRequest == SET_ADDRESS) {
 2450               		.loc 1 843 6 is_stmt 0 view .LVU838
 2451 0136 C530      		cpi r28,lo8(5)
 2452 0138 01F4      		brne .L186
 844:usb_serial.c  **** 			usb_send_in();
 2453               		.loc 1 844 4 is_stmt 1 view .LVU839
 2454               	.LBB71:
 2455               	.LBI71:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2456               		.loc 1 754 20 view .LVU840
 2457               	.LBB72:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2458               		.loc 1 756 2 view .LVU841
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2459               		.loc 1 756 9 is_stmt 0 view .LVU842
 2460 013a 8EEF      		ldi r24,lo8(-2)
 2461               	.LVL294:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2462               		.loc 1 756 9 view .LVU843
 2463 013c 8093 E800 		sts 232,r24
 2464               	.LBE72:
 2465               	.LBE71:
 845:usb_serial.c  **** 			usb_wait_in_ready();
 2466               		.loc 1 845 4 is_stmt 1 view .LVU844
 2467 0140 0E94 0000 		call usb_wait_in_ready
 2468               	.LVL295:
 846:usb_serial.c  **** 			UDADDR = wValue | (1<<ADDEN);
 2469               		.loc 1 846 4 view .LVU845
 846:usb_serial.c  **** 			UDADDR = wValue | (1<<ADDEN);
 2470               		.loc 1 846 20 is_stmt 0 view .LVU846
 2471 0144 8E2D      		mov r24,r14
 2472 0146 8068      		ori r24,lo8(-128)
 846:usb_serial.c  **** 			UDADDR = wValue | (1<<ADDEN);
 2473               		.loc 1 846 11 view .LVU847
 2474 0148 8093 E300 		sts 227,r24
 847:usb_serial.c  **** 			return;
 2475               		.loc 1 847 4 is_stmt 1 view .LVU848
 2476 014c 00C0      		rjmp .L168
 2477               	.LVL296:
 2478               	.L186:
 849:usb_serial.c  **** 		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 2479               		.loc 1 849 3 view .LVU849
 849:usb_serial.c  **** 		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 2480               		.loc 1 849 6 is_stmt 0 view .LVU850
 2481 014e C930      		cpi r28,lo8(9)
 2482 0150 01F4      		brne .L187
 849:usb_serial.c  **** 		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 2483               		.loc 1 849 37 discriminator 1 view .LVU851
 2484 0152 D111      		cpse r29,__zero_reg__
 2485 0154 00C0      		rjmp .L169
 850:usb_serial.c  **** 			usb_configuration = wValue;
 2486               		.loc 1 850 4 is_stmt 1 view .LVU852
 850:usb_serial.c  **** 			usb_configuration = wValue;
 2487               		.loc 1 850 22 is_stmt 0 view .LVU853
 2488 0156 E092 0000 		sts usb_configuration,r14
 851:usb_serial.c  **** 			cdc_line_rtsdtr = 0;
 2489               		.loc 1 851 4 is_stmt 1 view .LVU854
 851:usb_serial.c  **** 			cdc_line_rtsdtr = 0;
 2490               		.loc 1 851 20 is_stmt 0 view .LVU855
 2491 015a 1092 0000 		sts cdc_line_rtsdtr,__zero_reg__
 852:usb_serial.c  **** 			transmit_flush_timer = 0;
 2492               		.loc 1 852 4 is_stmt 1 view .LVU856
 852:usb_serial.c  **** 			transmit_flush_timer = 0;
 2493               		.loc 1 852 25 is_stmt 0 view .LVU857
 2494 015e 1092 0000 		sts transmit_flush_timer,__zero_reg__
 853:usb_serial.c  **** 			usb_send_in();
 2495               		.loc 1 853 4 is_stmt 1 view .LVU858
 2496               	.LBB73:
 2497               	.LBI73:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2498               		.loc 1 754 20 view .LVU859
 2499               	.LBB74:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2500               		.loc 1 756 2 view .LVU860
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2501               		.loc 1 756 9 is_stmt 0 view .LVU861
 2502 0162 8EEF      		ldi r24,lo8(-2)
 2503               	.LVL297:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2504               		.loc 1 756 9 view .LVU862
 2505 0164 8093 E800 		sts 232,r24
 2506               	.LBE74:
 2507               	.LBE73:
 854:usb_serial.c  **** 			cfg = endpoint_config_table;
 2508               		.loc 1 854 4 is_stmt 1 view .LVU863
 2509               	.LVL298:
 855:usb_serial.c  **** 			for (i=1; i<5; i++) {
 2510               		.loc 1 855 4 view .LVU864
 855:usb_serial.c  **** 			for (i=1; i<5; i++) {
 2511               		.loc 1 855 10 is_stmt 0 view .LVU865
 2512 0168 21E0      		ldi r18,lo8(1)
 854:usb_serial.c  **** 			cfg = endpoint_config_table;
 2513               		.loc 1 854 8 view .LVU866
 2514 016a 80E0      		ldi r24,lo8(endpoint_config_table)
 2515 016c 90E0      		ldi r25,hi8(endpoint_config_table)
 2516               	.LVL299:
 2517               	.L189:
 856:usb_serial.c  **** 				UENUM = i;
 2518               		.loc 1 856 5 is_stmt 1 view .LVU867
 856:usb_serial.c  **** 				UENUM = i;
 2519               		.loc 1 856 11 is_stmt 0 view .LVU868
 2520 016e 2093 E900 		sts 233,r18
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2521               		.loc 1 857 5 is_stmt 1 view .LVU869
 2522               	.LBB75:
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2523               		.loc 1 857 10 view .LVU870
 2524 0172 AC01      		movw r20,r24
 2525 0174 4F5F      		subi r20,-1
 2526 0176 5F4F      		sbci r21,-1
 2527               	.LVL300:
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2528               		.loc 1 857 10 view .LVU871
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2529               		.loc 1 857 10 view .LVU872
 2530 0178 FC01      		movw r30,r24
 2531               	/* #APP */
 2532               	 ;  857 "usb_serial.c" 1
 2533 017a 3491      		lpm r19, Z
 2534               		
 2535               	 ;  0 "" 2
 2536               	.LVL301:
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2537               		.loc 1 857 10 view .LVU873
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2538               		.loc 1 857 10 is_stmt 0 view .LVU874
 2539               	/* #NOAPP */
 2540               	.LBE75:
 858:usb_serial.c  **** 				UECONX = en;
 2541               		.loc 1 858 5 is_stmt 1 view .LVU875
 858:usb_serial.c  **** 				UECONX = en;
 2542               		.loc 1 858 12 is_stmt 0 view .LVU876
 2543 017c 3093 EB00 		sts 235,r19
 859:usb_serial.c  **** 				if (en) {
 2544               		.loc 1 859 5 is_stmt 1 view .LVU877
 859:usb_serial.c  **** 				if (en) {
 2545               		.loc 1 859 8 is_stmt 0 view .LVU878
 2546 0180 3323      		tst r19
 2547 0182 01F0      		breq .L200
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2548               		.loc 1 860 6 is_stmt 1 view .LVU879
 2549               	.LBB76:
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2550               		.loc 1 860 16 view .LVU880
 2551               	.LVL302:
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2552               		.loc 1 860 16 view .LVU881
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2553               		.loc 1 860 16 view .LVU882
 2554 0184 FA01      		movw r30,r20
 2555               	/* #APP */
 2556               	 ;  860 "usb_serial.c" 1
 2557 0186 4491      		lpm r20, Z
 2558               		
 2559               	 ;  0 "" 2
 2560               	.LVL303:
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2561               		.loc 1 860 16 view .LVU883
 2562               	/* #NOAPP */
 2563               	.LBE76:
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2564               		.loc 1 860 14 is_stmt 0 view .LVU884
 2565 0188 4093 EC00 		sts 236,r20
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2566               		.loc 1 861 6 is_stmt 1 view .LVU885
 2567               	.LBB77:
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2568               		.loc 1 861 16 view .LVU886
 2569               	.LVL304:
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2570               		.loc 1 861 16 view .LVU887
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2571               		.loc 1 861 16 view .LVU888
 2572 018c 3196      		adiw r30,1
 2573               	.LVL305:
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2574               		.loc 1 861 16 is_stmt 0 view .LVU889
 2575               	/* #APP */
 2576               	 ;  861 "usb_serial.c" 1
 2577 018e E491      		lpm r30, Z
 2578               		
 2579               	 ;  0 "" 2
 2580               	.LVL306:
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2581               		.loc 1 861 16 view .LVU890
 2582               	/* #NOAPP */
 2583 0190 0396      		adiw r24,3
 2584               	.LVL307:
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2585               		.loc 1 861 16 is_stmt 1 view .LVU891
 2586               	.LBE77:
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2587               		.loc 1 861 14 is_stmt 0 view .LVU892
 2588 0192 E093 ED00 		sts 237,r30
 2589               	.LVL308:
 2590               	.L188:
 855:usb_serial.c  **** 			for (i=1; i<5; i++) {
 2591               		.loc 1 855 20 discriminator 2 view .LVU893
 2592 0196 2F5F      		subi r18,lo8(-(1))
 2593               	.LVL309:
 855:usb_serial.c  **** 			for (i=1; i<5; i++) {
 2594               		.loc 1 855 4 discriminator 2 view .LVU894
 2595 0198 2530      		cpi r18,lo8(5)
 2596 019a 01F4      		brne .L189
 864:usb_serial.c  ****         		UERST = 0x1E;
 2597               		.loc 1 864 11 is_stmt 1 view .LVU895
 864:usb_serial.c  ****         		UERST = 0x1E;
 2598               		.loc 1 864 17 is_stmt 0 view .LVU896
 2599 019c 8EE1      		ldi r24,lo8(30)
 2600               	.LVL310:
 2601               	.L212:
 925:usb_serial.c  **** 					UERST = (1 << i);
 2602               		.loc 1 925 12 view .LVU897
 2603 019e 8093 EA00 		sts 234,r24
 926:usb_serial.c  **** 					UERST = 0;
 2604               		.loc 1 926 6 is_stmt 1 view .LVU898
 926:usb_serial.c  **** 					UERST = 0;
 2605               		.loc 1 926 12 is_stmt 0 view .LVU899
 2606 01a2 1092 EA00 		sts 234,__zero_reg__
 2607 01a6 00C0      		rjmp .L168
 2608               	.LVL311:
 2609               	.L200:
 2610               	.LBB78:
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2611               		.loc 1 857 10 view .LVU900
 2612 01a8 CA01      		movw r24,r20
 2613               	.LVL312:
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2614               		.loc 1 857 10 view .LVU901
 2615 01aa 00C0      		rjmp .L188
 2616               	.LVL313:
 2617               	.L187:
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2618               		.loc 1 857 10 view .LVU902
 2619               	.LBE78:
 868:usb_serial.c  **** 		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 2620               		.loc 1 868 3 is_stmt 1 view .LVU903
 868:usb_serial.c  **** 		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 2621               		.loc 1 868 6 is_stmt 0 view .LVU904
 2622 01ac C830      		cpi r28,lo8(8)
 2623 01ae 01F4      		brne .L190
 868:usb_serial.c  **** 		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 2624               		.loc 1 868 37 discriminator 1 view .LVU905
 2625 01b0 D038      		cpi r29,lo8(-128)
 2626 01b2 01F0      		breq .+2
 2627 01b4 00C0      		rjmp .L169
 869:usb_serial.c  **** 			usb_wait_in_ready();
 2628               		.loc 1 869 4 is_stmt 1 view .LVU906
 2629 01b6 0E94 0000 		call usb_wait_in_ready
 2630               	.LVL314:
 870:usb_serial.c  **** 			UEDATX = usb_configuration;
 2631               		.loc 1 870 4 view .LVU907
 870:usb_serial.c  **** 			UEDATX = usb_configuration;
 2632               		.loc 1 870 11 is_stmt 0 view .LVU908
 2633 01ba 8091 0000 		lds r24,usb_configuration
 2634 01be 8093 F100 		sts 241,r24
 871:usb_serial.c  **** 			usb_send_in();
 2635               		.loc 1 871 4 is_stmt 1 view .LVU909
 2636               	.LBB79:
 2637               	.LBI79:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2638               		.loc 1 754 20 view .LVU910
 2639               	.LBB80:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2640               		.loc 1 756 2 view .LVU911
 2641               	.LVL315:
 2642               	.L213:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2643               		.loc 1 756 2 is_stmt 0 view .LVU912
 2644               	.LBE80:
 2645               	.LBE79:
 911:usb_serial.c  **** 			usb_send_in();
 2646               		.loc 1 911 4 is_stmt 1 view .LVU913
 2647               	.LBB81:
 2648               	.LBI81:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2649               		.loc 1 754 20 view .LVU914
 2650               	.LBB82:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2651               		.loc 1 756 2 view .LVU915
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2652               		.loc 1 756 9 is_stmt 0 view .LVU916
 2653 01c2 8EEF      		ldi r24,lo8(-2)
 2654 01c4 8093 E800 		sts 232,r24
 2655               	.LBE82:
 2656               	.LBE81:
 912:usb_serial.c  **** 			return;
 2657               		.loc 1 912 4 is_stmt 1 view .LVU917
 2658 01c8 00C0      		rjmp .L168
 2659               	.LVL316:
 2660               	.L190:
 874:usb_serial.c  **** 		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 2661               		.loc 1 874 3 view .LVU918
 874:usb_serial.c  **** 		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 2662               		.loc 1 874 6 is_stmt 0 view .LVU919
 2663 01ca C132      		cpi r28,lo8(33)
 2664 01cc 01F4      		brne .L191
 874:usb_serial.c  **** 		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 2665               		.loc 1 874 39 discriminator 1 view .LVU920
 2666 01ce D13A      		cpi r29,lo8(-95)
 2667 01d0 01F0      		breq .+2
 2668 01d2 00C0      		rjmp .L169
 875:usb_serial.c  **** 			usb_wait_in_ready();
 2669               		.loc 1 875 4 is_stmt 1 view .LVU921
 2670 01d4 0E94 0000 		call usb_wait_in_ready
 2671               	.LVL317:
 876:usb_serial.c  **** 			p = cdc_line_coding;
 2672               		.loc 1 876 4 view .LVU922
 877:usb_serial.c  **** 			for (i=0; i<7; i++) {
 2673               		.loc 1 877 4 view .LVU923
 876:usb_serial.c  **** 			p = cdc_line_coding;
 2674               		.loc 1 876 6 is_stmt 0 view .LVU924
 2675 01d8 80E0      		ldi r24,lo8(cdc_line_coding)
 2676 01da 90E0      		ldi r25,hi8(cdc_line_coding)
 2677               	.LVL318:
 2678               	.L192:
 878:usb_serial.c  **** 				UEDATX = *p++;
 2679               		.loc 1 878 5 is_stmt 1 discriminator 3 view .LVU925
 878:usb_serial.c  **** 				UEDATX = *p++;
 2680               		.loc 1 878 14 is_stmt 0 discriminator 3 view .LVU926
 2681 01dc FC01      		movw r30,r24
 2682 01de 2191      		ld r18,Z+
 2683 01e0 CF01      		movw r24,r30
 2684               	.LVL319:
 878:usb_serial.c  **** 				UEDATX = *p++;
 2685               		.loc 1 878 12 discriminator 3 view .LVU927
 2686 01e2 2093 F100 		sts 241,r18
 2687               	.LVL320:
 877:usb_serial.c  **** 			for (i=0; i<7; i++) {
 2688               		.loc 1 877 4 discriminator 3 view .LVU928
 2689 01e6 F0E0      		ldi r31,hi8(cdc_line_coding+7)
 2690 01e8 8030      		cpi r24,lo8(cdc_line_coding+7)
 2691 01ea 9F07      		cpc r25,r31
 2692 01ec 01F4      		brne .L192
 2693 01ee 00C0      		rjmp .L213
 2694               	.LVL321:
 2695               	.L191:
 883:usb_serial.c  **** 		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 2696               		.loc 1 883 3 is_stmt 1 view .LVU929
 883:usb_serial.c  **** 		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 2697               		.loc 1 883 6 is_stmt 0 view .LVU930
 2698 01f0 C032      		cpi r28,lo8(32)
 2699 01f2 01F4      		brne .L193
 883:usb_serial.c  **** 		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 2700               		.loc 1 883 39 discriminator 1 view .LVU931
 2701 01f4 D132      		cpi r29,lo8(33)
 2702 01f6 01F0      		breq .+2
 2703 01f8 00C0      		rjmp .L169
 2704               	.LVL322:
 2705               	.L194:
 2706               	.LBB83:
 2707               	.LBB84:
 760:usb_serial.c  **** 	while (!(UEINTX & (1<<RXOUTI))) ;
 2708               		.loc 1 760 34 is_stmt 1 view .LVU932
 760:usb_serial.c  **** 	while (!(UEINTX & (1<<RXOUTI))) ;
 2709               		.loc 1 760 11 is_stmt 0 view .LVU933
 2710 01fa 8091 E800 		lds r24,232
 760:usb_serial.c  **** 	while (!(UEINTX & (1<<RXOUTI))) ;
 2711               		.loc 1 760 8 view .LVU934
 2712 01fe 82FF      		sbrs r24,2
 2713 0200 00C0      		rjmp .L194
 2714               	.LBE84:
 2715               	.LBE83:
 885:usb_serial.c  **** 			p = cdc_line_coding;
 2716               		.loc 1 885 6 view .LVU935
 2717 0202 80E0      		ldi r24,lo8(cdc_line_coding)
 2718 0204 90E0      		ldi r25,hi8(cdc_line_coding)
 2719               	.L195:
 2720               	.LVL323:
 887:usb_serial.c  **** 				*p++ = UEDATX;
 2721               		.loc 1 887 5 is_stmt 1 discriminator 3 view .LVU936
 887:usb_serial.c  **** 				*p++ = UEDATX;
 2722               		.loc 1 887 12 is_stmt 0 discriminator 3 view .LVU937
 2723 0206 2091 F100 		lds r18,241
 887:usb_serial.c  **** 				*p++ = UEDATX;
 2724               		.loc 1 887 10 discriminator 3 view .LVU938
 2725 020a FC01      		movw r30,r24
 2726 020c 2193      		st Z+,r18
 2727 020e CF01      		movw r24,r30
 2728               	.LVL324:
 886:usb_serial.c  **** 			for (i=0; i<7; i++) {
 2729               		.loc 1 886 4 discriminator 3 view .LVU939
 2730 0210 F0E0      		ldi r31,hi8(cdc_line_coding+7)
 2731 0212 8030      		cpi r24,lo8(cdc_line_coding+7)
 2732 0214 9F07      		cpc r25,r31
 2733 0216 01F4      		brne .L195
 889:usb_serial.c  **** 			usb_ack_out();
 2734               		.loc 1 889 4 is_stmt 1 view .LVU940
 2735               	.LBB85:
 2736               	.LBI85:
 762:usb_serial.c  **** static inline void usb_ack_out(void)
 2737               		.loc 1 762 20 view .LVU941
 2738               	.LBB86:
 764:usb_serial.c  **** 	UEINTX = ~(1<<RXOUTI);
 2739               		.loc 1 764 2 view .LVU942
 764:usb_serial.c  **** 	UEINTX = ~(1<<RXOUTI);
 2740               		.loc 1 764 9 is_stmt 0 view .LVU943
 2741 0218 8BEF      		ldi r24,lo8(-5)
 2742               	.LVL325:
 764:usb_serial.c  **** 	UEINTX = ~(1<<RXOUTI);
 2743               		.loc 1 764 9 view .LVU944
 2744 021a 8093 E800 		sts 232,r24
 2745               	.LBE86:
 2746               	.LBE85:
 890:usb_serial.c  **** 			usb_send_in();
 2747               		.loc 1 890 4 is_stmt 1 view .LVU945
 2748               	.LBB87:
 2749               	.LBI87:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2750               		.loc 1 754 20 view .LVU946
 2751               	.LBB88:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2752               		.loc 1 756 2 view .LVU947
 2753 021e 00C0      		rjmp .L213
 2754               	.LVL326:
 2755               	.L193:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2756               		.loc 1 756 2 is_stmt 0 view .LVU948
 2757               	.LBE88:
 2758               	.LBE87:
 893:usb_serial.c  **** 		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 2759               		.loc 1 893 3 is_stmt 1 view .LVU949
 893:usb_serial.c  **** 		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 2760               		.loc 1 893 6 is_stmt 0 view .LVU950
 2761 0220 C232      		cpi r28,lo8(34)
 2762 0222 01F4      		brne .L196
 893:usb_serial.c  **** 		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 2763               		.loc 1 893 46 discriminator 1 view .LVU951
 2764 0224 D132      		cpi r29,lo8(33)
 2765 0226 01F0      		breq .+2
 2766 0228 00C0      		rjmp .L169
 894:usb_serial.c  **** 			cdc_line_rtsdtr = wValue;
 2767               		.loc 1 894 4 is_stmt 1 view .LVU952
 894:usb_serial.c  **** 			cdc_line_rtsdtr = wValue;
 2768               		.loc 1 894 20 is_stmt 0 view .LVU953
 2769 022a E092 0000 		sts cdc_line_rtsdtr,r14
 895:usb_serial.c  **** 			usb_wait_in_ready();
 2770               		.loc 1 895 4 is_stmt 1 view .LVU954
 2771 022e 0E94 0000 		call usb_wait_in_ready
 2772               	.LVL327:
 896:usb_serial.c  **** 			usb_send_in();
 2773               		.loc 1 896 4 view .LVU955
 2774               	.LBB89:
 2775               	.LBI89:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2776               		.loc 1 754 20 view .LVU956
 2777               	.LBB90:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2778               		.loc 1 756 2 view .LVU957
 2779 0232 00C0      		rjmp .L213
 2780               	.LVL328:
 2781               	.L196:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2782               		.loc 1 756 2 is_stmt 0 view .LVU958
 2783               	.LBE90:
 2784               	.LBE89:
 899:usb_serial.c  **** 		if (bRequest == GET_STATUS) {
 2785               		.loc 1 899 3 is_stmt 1 view .LVU959
 899:usb_serial.c  **** 		if (bRequest == GET_STATUS) {
 2786               		.loc 1 899 6 is_stmt 0 view .LVU960
 2787 0234 C111      		cpse r28,__zero_reg__
 2788 0236 00C0      		rjmp .L197
 900:usb_serial.c  **** 			usb_wait_in_ready();
 2789               		.loc 1 900 4 is_stmt 1 view .LVU961
 2790 0238 0E94 0000 		call usb_wait_in_ready
 2791               	.LVL329:
 901:usb_serial.c  **** 			i = 0;
 2792               		.loc 1 901 4 view .LVU962
 903:usb_serial.c  **** 			if (bmRequestType == 0x82) {
 2793               		.loc 1 903 4 view .LVU963
 903:usb_serial.c  **** 			if (bmRequestType == 0x82) {
 2794               		.loc 1 903 7 is_stmt 0 view .LVU964
 2795 023c D238      		cpi r29,lo8(-126)
 2796 023e 01F4      		brne .L198
 904:usb_serial.c  **** 				UENUM = wIndex;
 2797               		.loc 1 904 5 is_stmt 1 view .LVU965
 904:usb_serial.c  **** 				UENUM = wIndex;
 2798               		.loc 1 904 11 is_stmt 0 view .LVU966
 2799 0240 0093 E900 		sts 233,r16
 905:usb_serial.c  **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 2800               		.loc 1 905 5 is_stmt 1 view .LVU967
 905:usb_serial.c  **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 2801               		.loc 1 905 9 is_stmt 0 view .LVU968
 2802 0244 C091 EB00 		lds r28,235
 2803               	.LVL330:
 905:usb_serial.c  **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 2804               		.loc 1 905 8 view .LVU969
 2805 0248 C5FB      		bst r28,5
 2806 024a CC27      		clr r28
 2807 024c C0F9      		bld r28,0
 2808               	.LVL331:
 906:usb_serial.c  **** 				UENUM = 0;
 2809               		.loc 1 906 5 is_stmt 1 view .LVU970
 906:usb_serial.c  **** 				UENUM = 0;
 2810               		.loc 1 906 11 is_stmt 0 view .LVU971
 2811 024e 1092 E900 		sts 233,__zero_reg__
 2812               	.LVL332:
 2813               	.L198:
 909:usb_serial.c  **** 			UEDATX = i;
 2814               		.loc 1 909 4 is_stmt 1 view .LVU972
 909:usb_serial.c  **** 			UEDATX = i;
 2815               		.loc 1 909 11 is_stmt 0 view .LVU973
 2816 0252 C093 F100 		sts 241,r28
 910:usb_serial.c  **** 			UEDATX = 0;
 2817               		.loc 1 910 4 is_stmt 1 view .LVU974
 910:usb_serial.c  **** 			UEDATX = 0;
 2818               		.loc 1 910 11 is_stmt 0 view .LVU975
 2819 0256 1092 F100 		sts 241,__zero_reg__
 2820 025a 00C0      		rjmp .L213
 2821               	.LVL333:
 2822               	.L197:
 915:usb_serial.c  **** 		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 2823               		.loc 1 915 3 is_stmt 1 view .LVU976
 915:usb_serial.c  **** 		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 2824               		.loc 1 915 6 is_stmt 0 view .LVU977
 2825 025c 8C2F      		mov r24,r28
 2826               	.LVL334:
 915:usb_serial.c  **** 		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 2827               		.loc 1 915 6 view .LVU978
 2828 025e 8D7F      		andi r24,lo8(-3)
 2829 0260 8130      		cpi r24,lo8(1)
 2830 0262 01F0      		breq .+2
 2831 0264 00C0      		rjmp .L169
 916:usb_serial.c  **** 		  && bmRequestType == 0x02 && wValue == 0) {
 2832               		.loc 1 916 5 view .LVU979
 2833 0266 D230      		cpi r29,lo8(2)
 2834 0268 01F0      		breq .+2
 2835 026a 00C0      		rjmp .L169
 916:usb_serial.c  **** 		  && bmRequestType == 0x02 && wValue == 0) {
 2836               		.loc 1 916 30 discriminator 1 view .LVU980
 2837 026c EF28      		or r14,r15
 2838 026e 01F0      		breq .+2
 2839 0270 00C0      		rjmp .L169
 917:usb_serial.c  **** 			i = wIndex & 0x7F;
 2840               		.loc 1 917 4 is_stmt 1 view .LVU981
 917:usb_serial.c  **** 			i = wIndex & 0x7F;
 2841               		.loc 1 917 6 is_stmt 0 view .LVU982
 2842 0272 0F77      		andi r16,lo8(127)
 2843               	.LVL335:
 918:usb_serial.c  **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 2844               		.loc 1 918 4 is_stmt 1 view .LVU983
 918:usb_serial.c  **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 2845               		.loc 1 918 15 is_stmt 0 view .LVU984
 2846 0274 8FEF      		ldi r24,lo8(-1)
 2847 0276 800F      		add r24,r16
 918:usb_serial.c  **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 2848               		.loc 1 918 7 view .LVU985
 2849 0278 8430      		cpi r24,lo8(4)
 2850 027a 00F0      		brlo .+2
 2851 027c 00C0      		rjmp .L169
 919:usb_serial.c  **** 				usb_send_in();
 2852               		.loc 1 919 5 is_stmt 1 view .LVU986
 2853               	.LBB91:
 2854               	.LBI91:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2855               		.loc 1 754 20 view .LVU987
 2856               	.LBB92:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2857               		.loc 1 756 2 view .LVU988
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2858               		.loc 1 756 9 is_stmt 0 view .LVU989
 2859 027e 8EEF      		ldi r24,lo8(-2)
 2860 0280 8093 E800 		sts 232,r24
 2861               	.LBE92:
 2862               	.LBE91:
 920:usb_serial.c  **** 				UENUM = i;
 2863               		.loc 1 920 5 is_stmt 1 view .LVU990
 920:usb_serial.c  **** 				UENUM = i;
 2864               		.loc 1 920 11 is_stmt 0 view .LVU991
 2865 0284 0093 E900 		sts 233,r16
 921:usb_serial.c  **** 				if (bRequest == SET_FEATURE) {
 2866               		.loc 1 921 5 is_stmt 1 view .LVU992
 921:usb_serial.c  **** 				if (bRequest == SET_FEATURE) {
 2867               		.loc 1 921 8 is_stmt 0 view .LVU993
 2868 0288 C330      		cpi r28,lo8(3)
 2869 028a 01F4      		brne .+2
 2870 028c 00C0      		rjmp .L169
 924:usb_serial.c  **** 					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 2871               		.loc 1 924 6 is_stmt 1 view .LVU994
 924:usb_serial.c  **** 					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 2872               		.loc 1 924 13 is_stmt 0 view .LVU995
 2873 028e 89E1      		ldi r24,lo8(25)
 2874 0290 8093 EB00 		sts 235,r24
 925:usb_serial.c  **** 					UERST = (1 << i);
 2875               		.loc 1 925 6 is_stmt 1 view .LVU996
 925:usb_serial.c  **** 					UERST = (1 << i);
 2876               		.loc 1 925 17 is_stmt 0 view .LVU997
 2877 0294 81E0      		ldi r24,lo8(1)
 2878 0296 90E0      		ldi r25,0
 2879 0298 00C0      		rjmp 2f
 2880               		1:
 2881 029a 880F      		lsl r24
 2882               		2:
 2883 029c 0A95      		dec r16
 2884 029e 02F4      		brpl 1b
 2885 02a0 00C0      		rjmp .L212
 2886               		.cfi_endproc
 2887               	.LFE21:
 2889               		.local	cdc_line_rtsdtr
 2890               		.comm	cdc_line_rtsdtr,1,1
 2891               		.data
 2894               	cdc_line_coding:
 2895 0000 00        		.byte	0
 2896 0001 E1        		.byte	-31
 2897 0002 00        		.byte	0
 2898 0003 00        		.byte	0
 2899 0004 00        		.byte	0
 2900 0005 00        		.byte	0
 2901 0006 08        		.byte	8
 2902               		.local	transmit_previous_timeout
 2903               		.comm	transmit_previous_timeout,1,1
 2904               		.local	transmit_flush_timer
 2905               		.comm	transmit_flush_timer,1,1
 2906               		.local	usb_configuration
 2907               		.comm	usb_configuration,1,1
 2908               		.section	.progmem.data,"a",@progbits
 2911               	descriptor_list:
 2912 0000 0001      		.word	256
 2913 0002 0000      		.word	0
 2914 0004 0000      		.word	device_descriptor
 2915 0006 12        		.byte	18
 2916 0007 0002      		.word	512
 2917 0009 0000      		.word	0
 2918 000b 0000      		.word	config1_descriptor
 2919 000d 43        		.byte	67
 2920 000e 0003      		.word	768
 2921 0010 0000      		.word	0
 2922 0012 0000      		.word	string0
 2923 0014 04        		.byte	4
 2924 0015 0103      		.word	769
 2925 0017 0904      		.word	1033
 2926 0019 0000      		.word	string1
 2927 001b 14        		.byte	20
 2928 001c 0203      		.word	770
 2929 001e 0904      		.word	1033
 2930 0020 0000      		.word	string2
 2931 0022 16        		.byte	22
 2932 0023 0303      		.word	771
 2933 0025 0904      		.word	1033
 2934 0027 0000      		.word	string3
 2935 0029 0C        		.byte	12
 2938               	string3:
 2939 002a 0C        		.byte	12
 2940 002b 03        		.byte	3
 2941 002c 3100      		.string	"1"
 2942 002e 3200      		.string	"2"
 2943 0030 3300      		.string	"3"
 2944 0032 3400      		.string	"4"
 2945 0034 3500      		.string	"5"
 2946 0036 00        		.string	""
 2947 0037 00        		.string	""
 2950               	string2:
 2951 0038 16        		.byte	22
 2952 0039 03        		.byte	3
 2953 003a 5500      		.string	"U"
 2954 003c 5300      		.string	"S"
 2955 003e 4200      		.string	"B"
 2956 0040 2000      		.string	" "
 2957 0042 5300      		.string	"S"
 2958 0044 6500      		.string	"e"
 2959 0046 7200      		.string	"r"
 2960 0048 6900      		.string	"i"
 2961 004a 6100      		.string	"a"
 2962 004c 6C00      		.string	"l"
 2963 004e 00        		.string	""
 2964 004f 00        		.string	""
 2967               	string1:
 2968 0050 14        		.byte	20
 2969 0051 03        		.byte	3
 2970 0052 5900      		.string	"Y"
 2971 0054 6F00      		.string	"o"
 2972 0056 7500      		.string	"u"
 2973 0058 7200      		.string	"r"
 2974 005a 2000      		.string	" "
 2975 005c 4E00      		.string	"N"
 2976 005e 6100      		.string	"a"
 2977 0060 6D00      		.string	"m"
 2978 0062 6500      		.string	"e"
 2979 0064 00        		.string	""
 2980 0065 00        		.string	""
 2983               	string0:
 2984 0066 04        		.byte	4
 2985 0067 03        		.byte	3
 2986 0068 0904      		.word	1033
 2989               	config1_descriptor:
 2990 006a 09        		.byte	9
 2991 006b 02        		.byte	2
 2992 006c 43        		.byte	67
 2993 006d 00        		.byte	0
 2994 006e 02        		.byte	2
 2995 006f 01        		.byte	1
 2996 0070 00        		.byte	0
 2997 0071 C0        		.byte	-64
 2998 0072 32        		.byte	50
 2999 0073 09        		.byte	9
 3000 0074 04        		.byte	4
 3001 0075 00        		.byte	0
 3002 0076 00        		.byte	0
 3003 0077 01        		.byte	1
 3004 0078 02        		.byte	2
 3005 0079 02        		.byte	2
 3006 007a 01        		.byte	1
 3007 007b 00        		.byte	0
 3008 007c 05        		.byte	5
 3009 007d 24        		.byte	36
 3010 007e 00        		.byte	0
 3011 007f 10        		.byte	16
 3012 0080 01        		.byte	1
 3013 0081 05        		.byte	5
 3014 0082 24        		.byte	36
 3015 0083 01        		.byte	1
 3016 0084 01        		.byte	1
 3017 0085 01        		.byte	1
 3018 0086 04        		.byte	4
 3019 0087 24        		.byte	36
 3020 0088 02        		.byte	2
 3021 0089 06        		.byte	6
 3022 008a 05        		.byte	5
 3023 008b 24        		.byte	36
 3024 008c 06        		.byte	6
 3025 008d 00        		.byte	0
 3026 008e 01        		.byte	1
 3027 008f 07        		.byte	7
 3028 0090 05        		.byte	5
 3029 0091 82        		.byte	-126
 3030 0092 03        		.byte	3
 3031 0093 10        		.byte	16
 3032 0094 00        		.byte	0
 3033 0095 40        		.byte	64
 3034 0096 09        		.byte	9
 3035 0097 04        		.byte	4
 3036 0098 01        		.byte	1
 3037 0099 00        		.byte	0
 3038 009a 02        		.byte	2
 3039 009b 0A        		.byte	10
 3040 009c 00        		.byte	0
 3041 009d 00        		.byte	0
 3042 009e 00        		.byte	0
 3043 009f 07        		.byte	7
 3044 00a0 05        		.byte	5
 3045 00a1 03        		.byte	3
 3046 00a2 02        		.byte	2
 3047 00a3 40        		.byte	64
 3048 00a4 00        		.byte	0
 3049 00a5 00        		.byte	0
 3050 00a6 07        		.byte	7
 3051 00a7 05        		.byte	5
 3052 00a8 84        		.byte	-124
 3053 00a9 02        		.byte	2
 3054 00aa 40        		.byte	64
 3055 00ab 00        		.byte	0
 3056 00ac 00        		.byte	0
 3059               	device_descriptor:
 3060 00ad 12        		.byte	18
 3061 00ae 01        		.byte	1
 3062 00af 00        		.byte	0
 3063 00b0 02        		.byte	2
 3064 00b1 02        		.byte	2
 3065 00b2 00        		.byte	0
 3066 00b3 00        		.byte	0
 3067 00b4 10        		.byte	16
 3068 00b5 C0        		.byte	-64
 3069 00b6 16        		.byte	22
 3070 00b7 7A        		.byte	122
 3071 00b8 04        		.byte	4
 3072 00b9 00        		.byte	0
 3073 00ba 01        		.byte	1
 3074 00bb 01        		.byte	1
 3075 00bc 02        		.byte	2
 3076 00bd 03        		.byte	3
 3077 00be 01        		.byte	1
 3080               	endpoint_config_table:
 3081 00bf 00        		.byte	0
 3082 00c0 01        		.byte	1
 3083 00c1 C1        		.byte	-63
 3084 00c2 12        		.byte	18
 3085 00c3 01        		.byte	1
 3086 00c4 80        		.byte	-128
 3087 00c5 36        		.byte	54
 3088 00c6 01        		.byte	1
 3089 00c7 81        		.byte	-127
 3090 00c8 36        		.byte	54
 3091               		.text
 3092               	.Letext0:
 3093               		.file 2 "/usr/local/Cellar/avr-gcc/8.2.0/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_serial.c
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:12     .text.usb_wait_in_ready:0000000000000000 usb_wait_in_ready
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:37     .text.usb_init:0000000000000000 usb_init
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:2905   .bss:0000000000000003 usb_configuration
                             .bss:0000000000000000 cdc_line_rtsdtr
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:92     .text.usb_configured:0000000000000000 usb_configured
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:112    .text.usb_serial_getchar:0000000000000000 usb_serial_getchar
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:203    .text.usb_serial_available:0000000000000000 usb_serial_available
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:280    .text.usb_serial_flush_input:0000000000000000 usb_serial_flush_input
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:338    .text.usb_serial_putchar:0000000000000000 usb_serial_putchar
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:2890   .bss:0000000000000001 transmit_previous_timeout
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:2903   .bss:0000000000000002 transmit_flush_timer
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:490    .text.usb_serial_putchar_nowait:0000000000000000 usb_serial_putchar_nowait
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:573    .text.usb_serial_write:0000000000000000 usb_serial_write
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:1668   .text.usb_serial_flush_output:0000000000000000 usb_serial_flush_output
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:1717   .text.usb_serial_get_baud:0000000000000000 usb_serial_get_baud
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:2894   .data:0000000000000000 cdc_line_coding
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:1740   .text.usb_serial_get_stopbits:0000000000000000 usb_serial_get_stopbits
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:1759   .text.usb_serial_get_paritytype:0000000000000000 usb_serial_get_paritytype
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:1778   .text.usb_serial_get_numbits:0000000000000000 usb_serial_get_numbits
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:1797   .text.usb_serial_get_control:0000000000000000 usb_serial_get_control
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:1816   .text.usb_serial_set_control:0000000000000000 usb_serial_set_control
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:1916   .text.__vector_10:0000000000000000 __vector_10
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:2019   .text.__vector_11:0000000000000000 __vector_11
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:2911   .progmem.data:0000000000000000 descriptor_list
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:3080   .progmem.data:00000000000000bf endpoint_config_table
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:3059   .progmem.data:00000000000000ad device_descriptor
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:2989   .progmem.data:000000000000006a config1_descriptor
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:2983   .progmem.data:0000000000000066 string0
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:2967   .progmem.data:0000000000000050 string1
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:2950   .progmem.data:0000000000000038 string2
/var/folders/sw/vnxf91zd60v67_29b873hhf40000gn/T//ccuDxCFE.s:2938   .progmem.data:000000000000002a string3

UNDEFINED SYMBOLS
__tablejump2__
__do_copy_data
__do_clear_bss
